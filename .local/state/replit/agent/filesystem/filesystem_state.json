{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# NaijaReset - Wellness Challenge and Tracking Platform\n\n## Overview\n\nNaijaReset is a modern full-stack health and wellness challenge tracking platform built with React, Express.js, and TypeScript. The application features gamification elements, multi-language support, comprehensive health tracking capabilities, and West African cultural content. It serves as a progressive web app that can work offline using localStorage for data persistence with CSV export functionality.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Build Tool**: Vite for fast development and optimized builds\n- **Styling**: TailwindCSS with custom CSS variables for theming\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **State Management**: React Context API with useReducer pattern\n- **Routing**: Wouter for lightweight client-side routing\n- **Data Fetching**: TanStack Query for server state management\n- **Styling System**: Mobile-first responsive design with dark mode support\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Development**: Hot reload with tsx for development server\n- **Build System**: ESBuild for production bundling\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Session Management**: connect-pg-simple for PostgreSQL session storage\n- **Development Tools**: Replit integration for cloud development\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL via Neon Database\n- **ORM**: Drizzle ORM with TypeScript schema definitions\n- **Local Storage**: Browser localStorage for offline functionality\n- **Session Storage**: PostgreSQL-backed sessions\n- **Migration System**: Drizzle Kit for database schema migrations\n\n## Key Components\n\n### User Interface Components\n- **Responsive Design**: Mobile-first approach with bottom navigation\n- **Component Library**: Comprehensive UI components (cards, buttons, forms, dialogs)\n- **Theming**: Light/dark mode with CSS custom properties\n- **Charts**: Recharts for data visualization\n- **Internationalization**: Multi-language support (English-Nigeria, French-Ivory Coast)\n\n### Health Tracking Features\n- **Challenge System**: 4 pre-defined challenges with daily tasks\n- **Progress Tracking**: Weight, mood, water intake, calories logging\n- **Exercise Library**: Categorized workouts with difficulty levels\n- **Meal Planning**: Nigerian and Ivorian cuisine with nutritional information\n- **Gamification**: Badge system for achievements and milestones\n\n### Data Management\n- **Local-First**: Data persists in localStorage for offline functionality\n- **Export Capability**: JSON export of user data\n- **Backup System**: Database integration for cloud backup\n- **Real-time Updates**: State synchronization across components\n\n## Data Flow\n\n1. **User Authentication**: Currently using in-memory storage with plans for database integration\n2. **Data Persistence**: Primary storage in localStorage, with database as backup/sync layer\n3. **State Management**: Centralized state via React Context with reducer pattern\n4. **Component Communication**: Props and context for data sharing\n5. **API Communication**: RESTful endpoints for server interactions\n\n## External Dependencies\n\n### Frontend Dependencies\n- **React Ecosystem**: React 18, React DOM, React Hook Form\n- **UI Library**: Radix UI components, Lucide React icons\n- **Styling**: TailwindCSS, class-variance-authority for component variants\n- **Charts**: Recharts for data visualization\n- **Date Handling**: date-fns for date manipulation\n- **Routing**: Wouter for client-side navigation\n\n### Backend Dependencies\n- **Server Framework**: Express.js with TypeScript support\n- **Database**: Drizzle ORM, pg for PostgreSQL, Neon Database serverless\n- **Development**: tsx for TypeScript execution, nodemon equivalent\n- **Session Management**: express-session with connect-pg-simple\n- **Validation**: Zod for runtime type checking\n\n### Development Tools\n- **Build Tools**: Vite, ESBuild, TypeScript compiler\n- **Code Quality**: ESLint, Prettier (implicit)\n- **Database Tools**: Drizzle Kit for migrations and schema management\n- **Cloud Integration**: Replit plugins for development environment\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: Vite dev server with HMR\n- **Database**: Local PostgreSQL or Neon Database development instance\n- **Environment Variables**: DATABASE_URL for database connection\n- **Hot Reload**: Both frontend and backend with file watching\n\n### Production Deployment\n- **Frontend**: Static build via Vite, served by Express\n- **Backend**: Node.js server with ESBuild bundling\n- **Database**: Neon Database PostgreSQL instance\n- **Environment**: Production NODE_ENV with optimized builds\n- **Serving**: Express serves both API and static frontend files\n\n### Build Process\n1. Frontend build: `vite build` outputs to `dist/public`\n2. Backend build: `esbuild` bundles server code to `dist/index.js`\n3. Database: `drizzle-kit push` for schema deployment\n4. Production: Single Node.js process serving both frontend and API\n\n## Changelog\n\n```\nChangelog:\n- July 07, 2025: Initial setup\n- July 07, 2025: Added comprehensive progression tracking with water intake calculator, BMI calculator, and body composition analysis\n- July 07, 2025: Implemented exercise timer functionality with workout phases\n- July 07, 2025: Enhanced challenge management with restart functionality and task unchecking\n- July 07, 2025: Rebranded app to \"NaijaReset\" with logo integration throughout UI\n- July 07, 2025: Added CSV export functionality for all app data in Progress tab and Dashboard\n```\n\n## User Preferences\n\n```\nPreferred communication style: Simple, everyday language.\n```","size_bytes":5777},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import React from \"react\";\nimport { Router, Route, Switch, useLocation } from \"wouter\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"./components/ui/toaster\";\nimport { ThemeProvider } from \"./components/ThemeProvider\";\nimport { AppProvider, useApp } from \"./contexts/AppContext\";\nimport BottomNavigation from \"./components/BottomNavigation\";\nimport { FloatingActionButton } from \"./components/FloatingActionButton\";\n\n// Pages\nimport Dashboard from \"./pages/dashboard\";\nimport Meals from \"./pages/meals\";\nimport Exercises from \"./pages/exercises\";\nimport Courses from \"./pages/courses\";\nimport CourseDetails from \"./pages/course-details\";\nimport Lesson from \"./pages/lesson\";\n\nconst LessonPage = Lesson;\nimport Badges from \"./pages/badges\";\nimport Challenges from \"./pages/challenges\";\nimport Progress from \"./pages/progress\";\nimport Settings from \"./pages/settings\";\nimport FAQ from \"./pages/faq\";\nimport Welcome from \"./pages/welcome\";\nimport Onboarding from \"./pages/onboarding\";\nimport NotFound from \"./pages/not-found\";\n\nconst queryClient = new QueryClient();\n\nfunction OnboardingRedirect() {\n  const { state } = useApp();\n  const [, setLocation] = useLocation();\n\n  React.useEffect(() => {\n    // Check if user has completed onboarding\n    if (!state.isOnboarded && !state.userData.userProfile.name) {\n      // Redirect to onboarding for first-time users\n      setLocation(\"/onboarding\");\n    }\n  }, [state.isOnboarded, state.userData.userProfile.name, setLocation]);\n\n  return null;\n}\n\nfunction AppContent() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <OnboardingRedirect />\n      <main className=\"pb-20\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/challenges\" component={Challenges} />\n          <Route path=\"/exercises\" component={Exercises} />\n          <Route path=\"/meals\" component={Meals} />\n          <Route path=\"/progress\" component={Progress} />\n          <Route path=\"/badges\" component={Badges} />\n          <Route path=\"/courses\" component={Courses} />\n          <Route path=\"/course/:id\">\n            {(params) => <CourseDetails params={params} />}\n          </Route>\n          <Route path=\"/lesson/:courseId/:moduleId/:lessonId\">\n            {(params) => (\n              <LessonPage\n                courseId={params.courseId}\n                moduleId={params.moduleId}\n                lessonId={params.lessonId}\n              />\n            )}\n          </Route>\n          <Route path=\"/faq\" component={FAQ} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/welcome\" component={Welcome} />\n          <Route path=\"/onboarding\" component={Onboarding} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <BottomNavigation />\n      <FloatingActionButton />\n      <Toaster />\n    </div>\n  );\n}\n\nexport default function App() {\n  return (\n    <AppProvider>\n      <QueryClientProvider client={queryClient}>\n        <ThemeProvider>\n          <Router>\n            <AppContent />\n          </Router>\n        </ThemeProvider>\n      </QueryClientProvider>\n    </AppProvider>\n  );\n}\n","size_bytes":3244},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(18, 100%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(150, 45%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(45, 100%, 50%);\n  --accent-foreground: hsl(20, 14.3%, 4.1%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  --success: hsl(120, 60%, 40%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 65%, 51%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(18, 100%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(150, 45%, 45%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(45, 100%, 50%);\n  --accent-foreground: hsl(240, 10%, 3.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n  --success: hsl(120, 60%, 40%);\n  --warning: hsl(38, 92%, 50%);\n  --error: hsl(0, 65%, 51%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n  }\n\n  .font-poppins {\n    font-family: 'Poppins', sans-serif;\n  }\n}\n\n@layer components {\n  .gradient-primary {\n    @apply bg-gradient-to-r from-primary to-secondary;\n  }\n\n  .gradient-accent {\n    @apply bg-gradient-to-br from-accent to-primary;\n  }\n\n  .card-shadow {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n\n  .card-shadow-lg {\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  }\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Animations */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    transform: translateX(-100%);\n  }\n  to {\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.05);\n  }\n}\n\n.animate-fadeIn {\n  animation: fadeIn 0.5s ease-out;\n}\n\n.animate-slideIn {\n  animation: slideIn 0.3s ease-out;\n}\n\n.animate-pulse-soft {\n  animation: pulse 2s infinite;\n}\n","size_bytes":3310},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport { AppProvider } from \"./contexts/AppContext\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":210},"client/public/exercises-media/README.md":{"content":"\n# Exercise Media Files\n\nEsta pasta contém os arquivos GIF e imagens dos exercícios.\n\n## Estrutura dos Arquivos\n\nCada exercício deve ter seu arquivo GIF nomeado seguindo o padrão:\n`{exercise-id}.gif`\n\nPor exemplo:\n- `jumping-jacks.gif`\n- `push-ups.gif`\n- `squats.gif`\n- `lunges.gif`\n- `plank.gif`\n\n## Especificações Recomendadas\n\n- **Formato**: GIF animado\n- **Resolução**: 400x400px ou 500x500px\n- **Duração**: 3-5 segundos em loop\n- **Tamanho**: Máximo 2MB por arquivo\n- **Qualidade**: Boa qualidade visual mostrando a execução correta do exercício\n\n## Como Adicionar Novos GIFs\n\n1. Salve o arquivo GIF com o nome correspondente ao ID do exercício no JSON\n2. Coloque o arquivo nesta pasta\n3. Verifique se o caminho no JSON está correto: `/exercises-media/{exercise-id}.gif`\n\n## Lista de Exercícios que Precisam de GIFs\n\n- jumping-jacks.gif\n- push-ups.gif\n- squats.gif\n- lunges.gif\n- plank.gif\n- burpees.gif\n- mountain-climbers.gif\n- high-knees.gif\n- wall-sit.gif\n- arm-circles.gif\n- side-plank.gif\n- bicycle-crunches.gif\n- glute-bridges.gif\n- step-ups.gif\n- skater-jumps.gif\n- tricep-dips.gif\n- flutter-kicks.gif\n- calf-raises.gif\n- side-lunges.gif\n- bear-crawl.gif\n- knee-push-ups.gif\n- march-in-place.gif\n- seated-leg-extensions.gif\n- cat-cow-stretch.gif\n- donkey-kicks.gif\n- reverse-crunches.gif\n- inchworms.gif\n- single-leg-glute-bridge.gif\n- jump-squats.gif\n- pike-push-ups.gif\n- plank-to-push-up.gif\n- jump-lunges.gif\n- handstand-hold.gif\n- plank-jacks.gif\n- cross-body-mountain-climbers.gif\n- broad-jumps.gif\n","size_bytes":1535},"client/src/components/BadgeCard.tsx":{"content":"import React from 'react';\nimport { Badge as BadgeType } from '../types';\nimport { Card, CardContent } from './ui/card';\nimport { Badge } from './ui/badge';\nimport { Star, Lock } from 'lucide-react';\nimport { useTranslation } from '../hooks/useTranslation';\n\ninterface BadgeCardProps {\n  badge: BadgeType;\n  showDate?: boolean;\n}\n\nexport function BadgeCard({ badge, showDate = false }: BadgeCardProps) {\n  const { t } = useTranslation();\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  const getBadgeIcon = (badgeId: string) => {\n    const iconMap: Record<string, string> = {\n      'first_step': '🏃‍♂️',\n      'hydrated': '💧',\n      'consistent': '⚡',\n      'no_sugar_hero': '🍎',\n      'halfway': '🎯',\n      'week_warrior': '🏆',\n      'month_master': '👑',\n      'exercise_enthusiast': '💪',\n      'healthy_eater': '🥗',\n      'water_champion': '🌊'\n    };\n    \n    return iconMap[badgeId] || '🏅';\n  };\n\n  return (\n    <Card className={`w-full text-center transition-all duration-300 ${\n      badge.isUnlocked \n        ? 'shadow-lg hover:shadow-xl bg-gradient-to-br from-white to-yellow-50 dark:from-gray-800 dark:to-yellow-900' \n        : 'shadow-sm bg-gray-50 dark:bg-gray-900 opacity-60'\n    }`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex flex-col items-center space-y-3\">\n          {/* Badge Icon */}\n          <div className={`w-16 h-16 rounded-full flex items-center justify-center text-2xl ${\n            badge.isUnlocked \n              ? 'bg-gradient-to-br from-yellow-400 to-orange-500' \n              : 'bg-gray-300 dark:bg-gray-700'\n          }`}>\n            {badge.isUnlocked ? getBadgeIcon(badge.id) : <Lock className=\"w-8 h-8 text-gray-500\" />}\n          </div>\n\n          {/* Badge Info */}\n          <div className=\"space-y-1\">\n            <h3 className=\"font-poppins font-bold text-sm text-gray-800 dark:text-gray-100\">\n              {t(`badges.badgeTypes.${badge.id}`) || badge.name}\n            </h3>\n            <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n              {badge.description}\n            </p>\n          </div>\n\n          {/* Status Badge */}\n          <Badge \n            variant={badge.isUnlocked ? 'default' : 'secondary'}\n            className={`text-xs ${\n              badge.isUnlocked \n                ? 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100' \n                : 'bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-400'\n            }`}\n          >\n            {badge.isUnlocked ? t('badges.unlocked') : t('badges.locked')}\n          </Badge>\n\n          {/* Unlock Date */}\n          {badge.isUnlocked && badge.unlockedAt && showDate && (\n            <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n              {t('badges.unlockedAt', { date: formatDate(badge.unlockedAt) })}\n            </p>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3061},"client/src/components/BadgeNotification.tsx":{"content":"\nimport React from 'react';\nimport { Badge as BadgeType } from '../types';\nimport { Dialog, DialogContent } from './ui/dialog';\nimport { Badge } from './ui/badge';\nimport { Star, Trophy, Sparkles, X } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { useTranslation } from '../hooks/useTranslation';\n\ninterface BadgeNotificationProps {\n  badge: BadgeType | null;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function BadgeNotification({ badge, isOpen, onClose }: BadgeNotificationProps) {\n  const { t } = useTranslation();\n\n  if (!badge) return null;\n\n  const getBadgeIcon = (badgeId: string) => {\n    const iconMap: Record<string, string> = {\n      'first_step': '🏃‍♂️',\n      'hydrated': '💧',\n      'consistent': '⚡',\n      'no_sugar_hero': '🍎',\n      'halfway': '🎯',\n      'week_warrior': '🏆',\n      'month_master': '👑',\n      'exercise_enthusiast': '💪',\n      'healthy_eater': '🥗',\n      'water_champion': '🌊'\n    };\n    \n    return iconMap[badgeId] || '🏅';\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <div className=\"flex justify-end\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex flex-col items-center space-y-6 p-6\">\n          {/* Animated Badge Icon */}\n          <div className=\"relative\">\n            <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-yellow-400 to-orange-500 flex items-center justify-center text-4xl animate-bounce\">\n              {getBadgeIcon(badge.id)}\n            </div>\n            <div className=\"absolute -top-2 -right-2 w-8 h-8 rounded-full bg-green-500 flex items-center justify-center\">\n              <Trophy className=\"w-4 h-4 text-white\" />\n            </div>\n          </div>\n\n          {/* Celebration Text */}\n          <div className=\"text-center space-y-2\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n              <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                Parabéns! 🎉\n              </h2>\n              <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n            </div>\n            \n            <p className=\"text-lg text-gray-600 dark:text-gray-300\">\n              Você desbloqueou uma nova conquista!\n            </p>\n          </div>\n\n          {/* Badge Details */}\n          <div className=\"text-center space-y-3\">\n            <h3 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100\">\n              {t(`badges.badgeTypes.${badge.id}`) || badge.name}\n            </h3>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              {badge.description}\n            </p>\n            \n            <Badge className=\"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n              <Star className=\"w-3 h-3 mr-1\" />\n              Conquista Desbloqueada\n            </Badge>\n          </div>\n\n          {/* Action Button */}\n          <Button \n            onClick={onClose}\n            className=\"w-full bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white font-semibold\"\n          >\n            Incrível! Continue assim! 🚀\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3471},"client/src/components/BottomNavigation.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { \n  Home, \n  Target, \n  Dumbbell, \n  Utensils, \n  TrendingUp, \n  Award,\n  BookOpen,\n  HelpCircle,\n  Settings,\n  Menu,\n  X\n} from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { Button } from \"./ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"./ui/sheet\";\n\nconst navigationItems = [\n  { path: \"/dashboard\", icon: Home, key: \"home\" },\n  { path: \"/challenges\", icon: Target, key: \"challenges\" },\n  { path: \"/exercises\", icon: Dumbbell, key: \"exercises\" },\n  { path: \"/meals\", icon: Utensils, key: \"meals\" },\n];\n\nconst secondaryItems = [\n  { path: \"/progress\", icon: TrendingUp, key: \"progress\" },\n  { path: \"/badges\", icon: Award, key: \"badges\" },\n  { path: \"/courses\", icon: BookOpen, key: \"courses\" },\n  { path: \"/faq\", icon: HelpCircle, key: \"faq\" },\n  { path: \"/settings\", icon: Settings, key: \"settings\" },\n];\n\nexport default function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n  const { t } = useTranslation();\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  const NavItem = ({ path, icon: Icon, label, onClick, isSideMenu = false }: {\n    path: string;\n    icon: React.ComponentType<any>;\n    label: string;\n    onClick?: () => void;\n    isSideMenu?: boolean;\n  }) => {\n    const isActive = location === path;\n\n    return (\n      <button\n        onClick={() => {\n          setLocation(path);\n          onClick?.();\n        }}\n        className={`flex ${isSideMenu ? 'flex-row items-center justify-start p-3 w-full' : 'flex-col items-center justify-center p-2'} rounded-lg transition-colors ${\n          isActive\n            ? \"text-primary bg-primary/10\"\n            : \"text-muted-foreground hover:text-foreground hover:bg-muted\"\n        }`}\n      >\n        <Icon className={`w-5 h-5 ${isSideMenu ? 'mr-3' : 'mb-1'}`} />\n        <span className={`${isSideMenu ? 'text-sm' : 'text-xs'} font-medium`}>{label}</span>\n      </button>\n    );\n  };\n\n  return (\n    <>\n      {/* Bottom Navigation - Mobile */}\n      <nav className=\"fixed bottom-0 left-0 right-0 z-50 bg-background border-t border-border\">\n        <div className=\"flex items-center justify-around px-2 py-2 max-w-md mx-auto\">\n          {navigationItems.map((item) => (\n            <NavItem\n              key={item.path}\n              path={item.path}\n              icon={item.icon}\n              label={t(`navigation.${item.key}`)}\n            />\n          ))}\n\n          {/* Menu Button */}\n          <Sheet open={isMenuOpen} onOpenChange={setIsMenuOpen}>\n            <SheetTrigger asChild>\n              <button className=\"flex flex-col items-center justify-center p-2 rounded-lg text-muted-foreground hover:text-foreground hover:bg-muted transition-colors\">\n                <Menu className=\"w-5 h-5 mb-1\" />\n                <span className=\"text-xs font-medium\">Menu</span>\n              </button>\n            </SheetTrigger>\n            <SheetContent side=\"right\" className=\"w-80\">\n              <SheetHeader>\n                <SheetTitle>Menu</SheetTitle>\n              </SheetHeader>\n              <div className=\"mt-6 space-y-2\">\n                {secondaryItems.map((item) => (\n                  <NavItem\n                    key={item.path}\n                    path={item.path}\n                    icon={item.icon}\n                    label={t(`navigation.${item.key}`)}\n                    onClick={() => setIsMenuOpen(false)}\n                    isSideMenu={true}\n                  />\n                ))}\n              </div>\n            </SheetContent>\n          </Sheet>\n        </div>\n      </nav>\n    </>\n  );\n}","size_bytes":3684},"client/src/components/CSVImport.tsx":{"content":"\nimport React, { useState, useRef } from 'react';\nimport { Button } from './ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Upload, AlertCircle, CheckCircle } from 'lucide-react';\nimport { useApp } from '../contexts/AppContext';\n\ninterface CSVImportProps {\n  onClose: () => void;\n}\n\nexport function CSVImport({ onClose }: CSVImportProps) {\n  const [file, setFile] = useState<File | null>(null);\n  const [importing, setImporting] = useState(false);\n  const [result, setResult] = useState<{ success: boolean; message: string } | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { importCSVData } = useApp();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = event.target.files?.[0];\n    if (selectedFile && selectedFile.type === 'text/csv') {\n      setFile(selectedFile);\n      setResult(null);\n    } else {\n      setResult({ success: false, message: 'Please select a valid CSV file.' });\n    }\n  };\n\n  const parseCSV = (csvText: string) => {\n    const lines = csvText.split('\\n').filter(line => line.trim());\n    if (lines.length < 2) {\n      throw new Error('CSV file must contain at least a header and one data row.');\n    }\n\n    const headers = lines[0].split(',').map(h => h.trim().replace(/\"/g, ''));\n    const data: any[] = [];\n\n    for (let i = 1; i < lines.length; i++) {\n      const values = lines[i].split(',').map(v => v.trim().replace(/\"/g, ''));\n      if (values.length === headers.length) {\n        const row: any = {};\n        headers.forEach((header, index) => {\n          row[header] = values[index];\n        });\n        data.push(row);\n      }\n    }\n\n    return data;\n  };\n\n  const handleImport = async () => {\n    if (!file) return;\n\n    setImporting(true);\n    setResult(null);\n\n    try {\n      const csvText = await file.text();\n      const data = parseCSV(csvText);\n      \n      // Import the data\n      const importResult = await importCSVData(data);\n      \n      if (importResult.success) {\n        setResult({ \n          success: true, \n          message: `Successfully imported ${importResult.imported} records. ${importResult.skipped} records were skipped.` \n        });\n        \n        // Close modal after successful import\n        setTimeout(() => {\n          onClose();\n        }, 2000);\n      } else {\n        setResult({ \n          success: false, \n          message: importResult.message || 'Import failed. Please check your CSV format.' \n        });\n      }\n    } catch (error) {\n      setResult({ \n        success: false, \n        message: `Import failed: ${error instanceof Error ? error.message : 'Unknown error'}` \n      });\n    } finally {\n      setImporting(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Upload className=\"w-5 h-5\" />\n          Import CSV Data\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Import previously exported data from this app. The CSV should contain columns for weights, water intake, meals, exercises, and other tracked data.\n        </div>\n\n        <div className=\"border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg p-6 text-center\">\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleFileSelect}\n            className=\"hidden\"\n          />\n          \n          {!file ? (\n            <div>\n              <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                Click to select a CSV file\n              </p>\n              <Button \n                onClick={() => fileInputRef.current?.click()}\n                variant=\"outline\"\n              >\n                Choose File\n              </Button>\n            </div>\n          ) : (\n            <div>\n              <CheckCircle className=\"w-8 h-8 text-green-500 mx-auto mb-2\" />\n              <p className=\"text-sm font-medium\">{file.name}</p>\n              <p className=\"text-xs text-gray-500\">{(file.size / 1024).toFixed(1)} KB</p>\n            </div>\n          )}\n        </div>\n\n        {result && (\n          <div className={`p-3 rounded-lg flex items-center gap-2 ${\n            result.success \n              ? 'bg-green-50 text-green-700 dark:bg-green-900 dark:text-green-300' \n              : 'bg-red-50 text-red-700 dark:bg-red-900 dark:text-red-300'\n          }`}>\n            {result.success ? (\n              <CheckCircle className=\"w-4 h-4\" />\n            ) : (\n              <AlertCircle className=\"w-4 h-4\" />\n            )}\n            <span className=\"text-sm\">{result.message}</span>\n          </div>\n        )}\n\n        <div className=\"flex gap-2\">\n          <Button\n            onClick={handleImport}\n            disabled={!file || importing}\n            className=\"flex-1\"\n          >\n            {importing ? 'Importing...' : 'Import Data'}\n          </Button>\n          <Button\n            onClick={onClose}\n            variant=\"outline\"\n            disabled={importing}\n          >\n            Cancel\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5358},"client/src/components/ChallengeCard.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Challenge } from '../types';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Progress } from './ui/progress';\nimport { CheckCircle, Circle, Play, ArrowRight, RotateCcw, Calendar, Target, Trophy } from 'lucide-react';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { useApp } from '../contexts/AppContext';\nimport { ChallengeCompletionPopup } from './ChallengeCompletionPopup';\n\ninterface ChallengeCardProps {\n  challenge: Challenge;\n  onStart?: () => void;\n  onContinue?: () => void;\n  onViewDetails?: () => void;\n  onRestart?: () => void;\n}\n\nexport function ChallengeCard({ challenge, onStart, onContinue, onViewDetails, onRestart }: ChallengeCardProps) {\n  const { t, getLocalizedText } = useTranslation();\n  const { completeTask, uncompleteTask } = useApp();\n  const [showCompletionPopup, setShowCompletionPopup] = useState(false);\n  const [prevCompletedTasks, setPrevCompletedTasks] = useState<number>(0);\n\n  const progressPercentage = (challenge.completedDays.length / challenge.days) * 100;\n  const currentDayTasks = challenge.dailyTasks.find(task => task.day === challenge.currentDay);\n  // Use the same language that was used when the challenge was created to maintain index consistency\n  const challengeLanguage = challenge.language || 'en-US'; \n  const tasks = currentDayTasks ? (currentDayTasks.tasks[challengeLanguage] || currentDayTasks.tasks['en-US'] || []) : [];\n  const completedTasksCount = currentDayTasks?.completed.filter(Boolean).length || 0;\n  const totalTasksCount = tasks.length;\n  const allTasksCompleted = completedTasksCount === totalTasksCount && totalTasksCount > 0;\n\n  // Check if all tasks were just completed\n  useEffect(() => {\n    if (allTasksCompleted && completedTasksCount > prevCompletedTasks) {\n      setShowCompletionPopup(true);\n    }\n    setPrevCompletedTasks(completedTasksCount);\n  }, [completedTasksCount, allTasksCompleted, prevCompletedTasks]);\n\n  const handleTaskToggle = (taskIndex: number) => {\n    if (currentDayTasks?.completed[taskIndex]) {\n      uncompleteTask(challenge.id, challenge.currentDay, taskIndex);\n    } else {\n      completeTask(challenge.id, challenge.currentDay, taskIndex);\n    }\n  };\n\n  const getChallengeStatusColor = () => {\n    if (progressPercentage === 100) return 'from-yellow-400 to-orange-500';\n    if (progressPercentage > 50) return 'from-green-400 to-blue-500';\n    return 'from-blue-400 to-purple-500';\n  };\n\n  // Get localized challenge name and description\n  const challengeName = getLocalizedText(challenge.name);\n  const challengeDescription = getLocalizedText(challenge.description);\n\n  return (\n    <>\n      <Card className=\"w-full shadow-lg hover:shadow-xl transition-all duration-300 overflow-hidden\">\n        <div className={`h-1 bg-gradient-to-r ${getChallengeStatusColor()}`} />\n\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-2 mb-2\">\n                <CardTitle className=\"text-lg font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                  {challengeName}\n                </CardTitle>\n                {progressPercentage === 100 && (\n                  <Trophy className=\"w-5 h-5 text-yellow-500\" />\n                )}\n              </div>\n\n              <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>{t('challenges.dayOf', { current: challenge.currentDay, total: challenge.days })}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Target className=\"w-4 h-4\" />\n                  <span>{completedTasksCount}/{totalTasksCount} {t('challenges.tasks')}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"text-center\">\n              <div className=\"relative w-16 h-16 mb-2\">\n                <svg className=\"w-16 h-16 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                  <path\n                    className=\"text-gray-200 dark:text-gray-700\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"3\"\n                    fill=\"none\"\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                  />\n                  <path\n                    className=\"text-primary\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"3\"\n                    strokeDasharray={`${progressPercentage}, 100`}\n                    strokeLinecap=\"round\"\n                    fill=\"none\"\n                    d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                  />\n                </svg>\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <span className=\"text-sm font-bold text-gray-700 dark:text-gray-200\">\n                    {Math.round(progressPercentage)}%\n                  </span>\n                </div>\n              </div>\n\n              <Badge className={`text-xs bg-gradient-to-r ${getChallengeStatusColor()} text-white`}>\n                {progressPercentage === 100 ? t('challenges.completed') : challenge.isActive ? t('challenges.active') : t('challenges.available')}\n              </Badge>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-4\">\n            {challengeDescription}\n          </p>\n\n          <div className=\"space-y-4\">\n            {/* Progress Bar */}\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span className=\"text-gray-600 dark:text-gray-400\">{t('challenges.challengeProgress')}</span>\n                <span className=\"font-medium\">{challenge.completedDays.length}/{challenge.days} {t('challenges.daysLabel')}</span>\n              </div>\n              <Progress value={progressPercentage} className=\"h-2\" />\n            </div>\n\n            {/* Daily Tasks */}\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-gray-800 dark:text-gray-100\">\n                {t('challenges.todayTasks')}:\n              </h4>\n              {tasks.map((task, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\">\n                  <div className=\"flex items-center space-x-3\">\n                    <button\n                      onClick={() => handleTaskToggle(index)}\n                      className={`w-6 h-6 rounded-full flex items-center justify-center transition-all duration-200 ${\n                        currentDayTasks.completed[index]\n                          ? 'bg-green-500 text-white hover:bg-green-600 scale-110'\n                          : 'bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 hover:scale-105'\n                      }`}\n                    >\n                      {currentDayTasks.completed[index] ? (\n                        <CheckCircle className=\"w-4 h-4\" />\n                      ) : (\n                        <Circle className=\"w-3 h-3\" />\n                      )}\n                    </button>\n                    <span className={`text-sm transition-all duration-200 ${\n                      currentDayTasks.completed[index] \n                        ? 'line-through text-gray-500 dark:text-gray-400' \n                        : 'text-gray-700 dark:text-gray-200'\n                    }`}>\n                      {task}\n                    </span>\n                  </div>\n                  {currentDayTasks.completed[index] && (\n                    <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800\">\n                      ✓ {t('challenges.done')}\n                    </Badge>\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex space-x-2 pt-2\">\n              {!challenge.isActive && onStart && (\n                <Button onClick={onStart} className=\"flex-1 bg-primary hover:bg-primary/90\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  {t('challenges.startChallenge')}\n                </Button>\n              )}\n\n              {challenge.isActive && onContinue && (\n                <Button onClick={onContinue} className=\"flex-1 bg-secondary hover:bg-secondary/90\">\n                  {t('challenges.continueChallenge')}\n                </Button>\n              )}\n\n              {challenge.isActive && onRestart && (\n                <Button onClick={onRestart} variant=\"outline\" className=\"flex-shrink-0\">\n                  <RotateCcw className=\"w-4 h-4 mr-2\" />\n                  {t('challenges.restart')}\n                </Button>\n              )}\n\n              {onViewDetails && (\n                <Button onClick={onViewDetails} variant=\"outline\" className=\"flex-1\">\n                  {t('challenges.viewDetails')}\n                  <ArrowRight className=\"w-4 h-4 ml-2\" />\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n\n        {/* Completion Celebration Popup */}\n        <ChallengeCompletionPopup\n          isOpen={showCompletionPopup}\n          onClose={() => setShowCompletionPopup(false)}\n          challengeName={challengeName}\n          currentDay={challenge.currentDay}\n          totalDays={challenge.days}\n        />\n      </Card>\n    </>\n  );\n}","size_bytes":9862},"client/src/components/ChallengeCompletionPopup.tsx":{"content":"\nimport React from 'react';\nimport { Dialog, DialogContent } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Trophy, Star, Sparkles, X, CheckCircle } from 'lucide-react';\n\ninterface ChallengeCompletionPopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  challengeName: string;\n  currentDay: number;\n  totalDays: number;\n}\n\nexport function ChallengeCompletionPopup({ \n  isOpen, \n  onClose, \n  challengeName, \n  currentDay, \n  totalDays \n}: ChallengeCompletionPopupProps) {\n  const isLastDay = currentDay === totalDays;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <div className=\"flex justify-end\">\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"w-4 h-4\" />\n          </Button>\n        </div>\n        \n        <div className=\"flex flex-col items-center space-y-6 p-6\">\n          {/* Animated Trophy Icon */}\n          <div className=\"relative\">\n            <div className=\"w-24 h-24 rounded-full bg-gradient-to-br from-green-400 to-blue-500 flex items-center justify-center animate-bounce\">\n              {isLastDay ? (\n                <Trophy className=\"w-12 h-12 text-white\" />\n              ) : (\n                <CheckCircle className=\"w-12 h-12 text-white\" />\n              )}\n            </div>\n            <div className=\"absolute -top-2 -right-2 w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center animate-pulse\">\n              <Star className=\"w-4 h-4 text-white\" />\n            </div>\n          </div>\n\n          {/* Celebration Text */}\n          <div className=\"text-center space-y-2\">\n            <div className=\"flex items-center justify-center space-x-2\">\n              <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n              <h2 className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                {isLastDay ? \"Desafio Concluído! 🎉\" : \"Dia Concluído! 🎯\"}\n              </h2>\n              <Sparkles className=\"w-5 h-5 text-yellow-500\" />\n            </div>\n            \n            <p className=\"text-lg text-gray-600 dark:text-gray-300\">\n              {isLastDay \n                ? \"Parabéns! Você completou todo o desafio!\"\n                : \"Excelente! Você completou mais um dia!\"\n              }\n            </p>\n          </div>\n\n          {/* Challenge Details */}\n          <div className=\"text-center space-y-3\">\n            <h3 className=\"text-xl font-semibold text-gray-800 dark:text-gray-100\">\n              {challengeName}\n            </h3>\n            \n            <div className=\"flex items-center justify-center space-x-4\">\n              <Badge className=\"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\">\n                Dia {currentDay} de {totalDays}\n              </Badge>\n              \n              {isLastDay && (\n                <Badge className=\"bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100\">\n                  <Trophy className=\"w-3 h-3 mr-1\" />\n                  Desafio Completo\n                </Badge>\n              )}\n            </div>\n\n            {!isLastDay && (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                Continue assim! Faltam {totalDays - currentDay} dias.\n              </p>\n            )}\n          </div>\n\n          {/* Action Button */}\n          <Button \n            onClick={onClose}\n            className={`w-full font-semibold ${\n              isLastDay \n                ? \"bg-gradient-to-r from-yellow-400 to-orange-500 hover:from-yellow-500 hover:to-orange-600 text-white\"\n                : \"bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white\"\n            }`}\n          >\n            {isLastDay \n              ? \"Incrível! Vamos para o próximo! 🚀\"\n              : \"Continue assim! 💪\"\n            }\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3998},"client/src/components/DailyMoodLogger.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { useApp } from '../contexts/AppContext';\nimport { useTranslation } from '../hooks/useTranslation';\n\nconst moodEmojis = [\n  { emoji: '😞', label: 'Very Sad', value: '😞' },\n  { emoji: '😐', label: 'Neutral', value: '😐' },\n  { emoji: '🙂', label: 'Good', value: '🙂' },\n  { emoji: '😊', label: 'Happy', value: '😊' },\n  { emoji: '😄', label: 'Very Happy', value: '😄' }\n];\n\nexport function DailyMoodLogger() {\n  const { t } = useTranslation();\n  const { state, logMood } = useApp();\n  const [selectedMood, setSelectedMood] = useState<string>('');\n  const [todayMood, setTodayMood] = useState<string>('');\n\n  useEffect(() => {\n    const today = new Date().toISOString().split('T')[0];\n    const existingMood = state.userData.moods.find(m => m.date === today);\n    if (existingMood) {\n      setTodayMood(existingMood.mood);\n      setSelectedMood(existingMood.mood);\n    }\n  }, [state.userData.moods]);\n\n  const handleMoodSelect = (mood: string) => {\n    setSelectedMood(mood);\n  };\n\n  const handleSaveMood = () => {\n    if (selectedMood) {\n      logMood(selectedMood as '😞' | '😐' | '🙂' | '😊' | '😄');\n      setTodayMood(selectedMood);\n    }\n  };\n\n  return (\n    <Card className=\"w-full\">\n      <CardHeader>\n        <CardTitle className=\"text-lg font-poppins\">\n          {t('progress.dailyMood') || 'Daily Mood'}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {todayMood && (\n            <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">\n                Today's mood:\n              </p>\n              <span className=\"text-3xl\">{todayMood}</span>\n            </div>\n          )}\n          \n          <div className=\"flex justify-center space-x-3\">\n            {moodEmojis.map((mood) => (\n              <Button\n                key={mood.value}\n                variant={selectedMood === mood.value ? 'default' : 'outline'}\n                size=\"lg\"\n                onClick={() => handleMoodSelect(mood.value)}\n                className=\"text-2xl p-3 hover:scale-110 transition-transform\"\n                title={mood.label}\n              >\n                {mood.emoji}\n              </Button>\n            ))}\n          </div>\n\n          {selectedMood && selectedMood !== todayMood && (\n            <Button\n              onClick={handleSaveMood}\n              className=\"w-full bg-primary hover:bg-primary/90\"\n            >\n              {todayMood ? 'Update Mood' : 'Save Mood'}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2824},"client/src/components/DailyWaterLogger.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Droplets } from 'lucide-react';\nimport { useApp } from '../contexts/AppContext';\n\nexport const DailyWaterLogger: React.FC = () => {\n  const { state, logWater } = useApp();\n  const [waterInput, setWaterInput] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n\n  const today = new Date().toISOString().split('T')[0];\n  const todayWaterLog = state.userData.waterLog.find(w => w.date === today);\n  const todayWater = todayWaterLog?.liters || 0;\n\n  const handleLogWater = async () => {\n    const amount = parseFloat(waterInput);\n    if (amount > 0) {\n      setIsSaving(true);\n      try {\n        logWater(amount);\n        setWaterInput('');\n      } finally {\n        setIsSaving(false);\n      }\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Droplets className=\"w-5 h-5 text-blue-500\" />\n          Water Intake\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        {todayWater > 0 && (\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 p-3 rounded-lg\">\n            <p className=\"text-sm font-medium text-blue-800 dark:text-blue-200\">\n              Today's Water: {todayWater.toFixed(1)} liters\n            </p>\n          </div>\n        )}\n        \n        <div className=\"flex gap-2\">\n          <div className=\"flex-1\">\n            <Label htmlFor=\"daily-water\">Add Water (liters)</Label>\n            <Input\n              id=\"daily-water\"\n              type=\"number\"\n              step=\"0.1\"\n              value={waterInput}\n              onChange={(e) => setWaterInput(e.target.value)}\n              placeholder=\"e.g., 0.5\"\n            />\n          </div>\n          <Button \n            onClick={handleLogWater}\n            disabled={!waterInput || isSaving}\n            className=\"mt-6\"\n          >\n            <Droplets className=\"w-4 h-4 mr-2\" />\n            {isSaving ? 'Logging...' : 'Log'}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n","size_bytes":2232},"client/src/components/DailyWeightLogger.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Card, CardContent } from './ui/card';\nimport { Scale, TrendingUp, TrendingDown } from 'lucide-react';\nimport { useApp } from '../contexts/AppContext';\n\nexport function DailyWeightLogger() {\n  const { state, logWeight } = useApp();\n  const [currentWeight, setCurrentWeight] = useState('');\n  const [isSaving, setIsSaving] = useState(false);\n  \n  const { userData } = state;\n  const today = new Date().toISOString().split('T')[0];\n  const todayWeight = userData.weights.find(w => w.date === today);\n  const recentWeights = userData.weights.slice(-7).reverse();\n  \n  const handleLogWeight = async () => {\n    if (!currentWeight || parseFloat(currentWeight) <= 0) return;\n    \n    setIsSaving(true);\n    try {\n      logWeight(parseFloat(currentWeight));\n      setCurrentWeight('');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n  \n  const getWeightTrend = () => {\n    if (recentWeights.length < 2) return null;\n    const latest = recentWeights[0].weight;\n    const previous = recentWeights[1].weight;\n    return latest > previous ? 'up' : latest < previous ? 'down' : 'stable';\n  };\n  \n  const weightTrend = getWeightTrend();\n  \n  return (\n    <div className=\"space-y-4\">\n      {/* Today's Weight */}\n      {todayWeight ? (\n        <Card className=\"bg-green-50 dark:bg-green-900/20\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Today's Weight</p>\n                <p className=\"text-2xl font-bold text-green-600\">{todayWeight.weight} kg</p>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                {weightTrend === 'up' && <TrendingUp className=\"w-5 h-5 text-red-500\" />}\n                {weightTrend === 'down' && <TrendingDown className=\"w-5 h-5 text-green-500\" />}\n                <Scale className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ) : (\n        <div className=\"space-y-3\">\n          <div className=\"flex gap-2\">\n            <div className=\"flex-1\">\n              <Label htmlFor=\"daily-weight\">Today's Weight (kg)</Label>\n              <Input\n                id=\"daily-weight\"\n                type=\"number\"\n                step=\"0.1\"\n                value={currentWeight}\n                onChange={(e) => setCurrentWeight(e.target.value)}\n                placeholder=\"Enter your weight\"\n              />\n            </div>\n            <Button \n              onClick={handleLogWeight}\n              disabled={!currentWeight || isSaving}\n              className=\"mt-6\"\n            >\n              <Scale className=\"w-4 h-4 mr-2\" />\n              {isSaving ? 'Logging...' : 'Log Weight'}\n            </Button>\n          </div>\n        </div>\n      )}\n      \n      {/* Recent Weights */}\n      {recentWeights.length > 0 && (\n        <div>\n          <h4 className=\"text-sm font-semibold mb-2\">Recent Weights</h4>\n          <div className=\"space-y-2\">\n            {recentWeights.slice(0, 5).map((weightEntry, index) => (\n              <div key={weightEntry.date} className=\"flex justify-between items-center p-2 bg-gray-50 dark:bg-gray-800 rounded\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {new Date(weightEntry.date).toLocaleDateString('en-US', {\n                    weekday: 'short',\n                    month: 'short',\n                    day: 'numeric'\n                  })}\n                </span>\n                <span className=\"font-medium\">{weightEntry.weight} kg</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":3870},"client/src/components/ExerciseCard.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Badge } from './ui/badge';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './ui/dialog';\nimport { Play, Heart, Info, Timer, Pause, RotateCcw, Star } from 'lucide-react';\nimport { useApp } from '../contexts/AppContext';\nimport { useTranslation } from '../hooks/useTranslation';\n\ninterface Exercise {\n  id: string;\n  name: string | { [key: string]: string };\n  category: string;\n  duration?: string;\n  reps?: string;\n  rest?: string;\n  description: string | { [key: string]: string };\n  instructions: string | { [key: string]: string };\n  media?: string;\n  accessPlans?: number[];\n}\n\ninterface ExerciseCardProps {\n  exercise: Exercise;\n  onStart: () => void;\n}\n\nexport function ExerciseCard({ exercise, onStart }: ExerciseCardProps) {\n  const { state, toggleFavorite } = useApp();\n  const { getLocalizedText, currentLanguage } = useTranslation();\n  const [showDetails, setShowDetails] = useState(false);\n  const [showTimer, setShowTimer] = useState(false);\n  const [timer, setTimer] = useState(0);\n  const [isRunning, setIsRunning] = useState(false);\n  const [timerInterval, setTimerInterval] = useState<NodeJS.Timeout | null>(null);\n  const [currentPhase, setCurrentPhase] = useState<'prep' | 'exercise' | 'rest'>('prep');\n  const [prepTimer, setPrepTimer] = useState(10);\n\n  const isFavorite = state.userData.favorites.exercises.includes(exercise.id);\n  const hasAccess = true; // All exercises are now accessible\n  \n  const exerciseName = typeof exercise.name === 'string' \n    ? exercise.name \n    : exercise.name && typeof exercise.name === 'object' \n      ? getLocalizedText(exercise.name) \n      : '';\n\n  const exerciseDescription = typeof exercise.description === 'string'\n    ? exercise.description\n    : exercise.description && typeof exercise.description === 'object'\n      ? getLocalizedText(exercise.description)\n      : '';\n\n  const exerciseInstructions = typeof exercise.instructions === 'string'\n    ? exercise.instructions\n    : exercise.instructions && typeof exercise.instructions === 'object'\n      ? getLocalizedText(exercise.instructions)\n      : '';\n  \n  // Convert duration to seconds for timer\n  const getDurationInSeconds = () => {\n    if (!exercise.duration) return 60; // default 1 minute\n    const match = exercise.duration.match(/(\\d+)/);\n    return match ? parseInt(match[1]) * 60 : 60;\n  };\n\n  const getRestInSeconds = () => {\n    if (!exercise.rest) return 30; // default 30 seconds\n    const match = exercise.rest.match(/(\\d+)/);\n    return match ? parseInt(match[1]) : 30;\n  };\n\n  const handleStartTimer = () => {\n    setPrepTimer(10);\n    setCurrentPhase('prep');\n    setShowTimer(true);\n    setIsRunning(true);\n    \n    // Start preparation countdown\n    const prepInterval = setInterval(() => {\n      setPrepTimer((prev) => {\n        if (prev <= 1) {\n          clearInterval(prepInterval);\n          // Start main exercise\n          setCurrentPhase('exercise');\n          setTimer(getDurationInSeconds());\n          startExerciseTimer();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerInterval(prepInterval);\n  };\n\n  const startExerciseTimer = () => {\n    const interval = setInterval(() => {\n      setTimer((prev) => {\n        if (prev <= 1) {\n          clearInterval(interval);\n          // Start rest period\n          setCurrentPhase('rest');\n          setTimer(getRestInSeconds());\n          startRestTimer();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerInterval(interval);\n  };\n\n  const startRestTimer = () => {\n    const interval = setInterval(() => {\n      setTimer((prev) => {\n        if (prev <= 1) {\n          clearInterval(interval);\n          setIsRunning(false);\n          setShowTimer(false);\n          setCurrentPhase('prep');\n          onStart(); // Call the original onStart function\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    \n    setTimerInterval(interval);\n  };\n\n  const handlePauseTimer = () => {\n    if (timerInterval) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n    }\n    setIsRunning(!isRunning);\n    \n    if (!isRunning) {\n      if (currentPhase === 'prep') {\n        const prepInterval = setInterval(() => {\n          setPrepTimer((prev) => {\n            if (prev <= 1) {\n              clearInterval(prepInterval);\n              setCurrentPhase('exercise');\n              setTimer(getDurationInSeconds());\n              startExerciseTimer();\n              return 0;\n            }\n            return prev - 1;\n          });\n        }, 1000);\n        setTimerInterval(prepInterval);\n      } else if (currentPhase === 'exercise') {\n        startExerciseTimer();\n      } else {\n        startRestTimer();\n      }\n    }\n  };\n\n  const handleResetTimer = () => {\n    if (timerInterval) {\n      clearInterval(timerInterval);\n      setTimerInterval(null);\n    }\n    setPrepTimer(10);\n    setTimer(getDurationInSeconds());\n    setCurrentPhase('prep');\n    setIsRunning(false);\n  };\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getCategoryColor = () => {\n    switch (exercise.category) {\n      case 'Light': return 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100';\n      case 'Moderate': return 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100';\n      case 'Advanced': return 'bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const getPhaseText = () => {\n    switch (currentPhase) {\n      case 'prep': return 'Preparação';\n      case 'exercise': return 'Exercício';\n      case 'rest': return 'Descanso';\n    }\n  };\n\n  const getPhaseColor = () => {\n    switch (currentPhase) {\n      case 'prep': return 'text-yellow-500';\n      case 'exercise': return 'text-green-500';\n      case 'rest': return 'text-blue-500';\n    }\n  };\n\n  return (\n    <>\n      <Card className=\"overflow-hidden transition-all duration-300 hover:shadow-lg hover:scale-[1.01]\">\n        {/* Category Badge */}\n        <div className=\"relative p-4 pb-2\">\n          <div className=\"flex justify-between items-start mb-3\">\n            <Badge className={`${getCategoryColor()}`}>\n              {exercise.category}\n            </Badge>\n            \n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => toggleFavorite('exercises', exercise.id)}\n              className=\"h-8 w-8 p-0\"\n            >\n              <Heart className={`w-4 h-4 ${isFavorite ? 'fill-red-500 text-red-500' : 'text-gray-400'}`} />\n            </Button>\n          </div>\n\n          <CardHeader className=\"p-0 pb-3\">\n            <CardTitle className=\"text-lg font-bold text-gray-800 dark:text-gray-100\">\n              {exerciseName}\n            </CardTitle>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 line-clamp-2\">\n              {exerciseDescription}\n            </p>\n          </CardHeader>\n\n          <CardContent className=\"p-0\">\n            <div className=\"grid grid-cols-3 gap-2 mb-4\">\n              {exercise.duration && (\n                <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <Timer className=\"w-4 h-4 mx-auto mb-1 text-blue-500\" />\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Duração</p>\n                  <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-100\">\n                    {exercise.duration}\n                  </p>\n                </div>\n              )}\n              \n              {exercise.reps && (\n                <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <Star className=\"w-4 h-4 mx-auto mb-1 text-green-500\" />\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Repetições</p>\n                  <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-100\">\n                    {exercise.reps}\n                  </p>\n                </div>\n              )}\n              \n              {exercise.rest && (\n                <div className=\"text-center p-2 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <Pause className=\"w-4 h-4 mx-auto mb-1 text-orange-500\" />\n                  <p className=\"text-xs text-gray-600 dark:text-gray-400\">Descanso</p>\n                  <p className=\"text-sm font-semibold text-gray-800 dark:text-gray-100\">\n                    {exercise.rest}\n                  </p>\n                </div>\n              )}\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                onClick={handleStartTimer}\n                className=\"flex-1 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white\"\n              >\n                <Play className=\"w-4 h-4 mr-2\" />\n                Iniciar Exercício\n              </Button>\n              \n              <Button\n                variant=\"outline\"\n                onClick={() => setShowDetails(true)}\n                className=\"flex-shrink-0\"\n              >\n                <Info className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardContent>\n        </div>\n      </Card>\n\n      {/* Exercise Details Dialog */}\n      <Dialog open={showDetails} onOpenChange={setShowDetails}>\n        <DialogContent className=\"sm:max-w-lg max-h-[80vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-bold\">{exerciseName}</DialogTitle>\n            <DialogDescription>\n              Informações detalhadas sobre o exercício\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            {/* Exercise GIF */}\n            {exercise.media && (\n              <div className=\"w-full aspect-square bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                <img \n                  src={exercise.media} \n                  alt={exerciseName}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n            \n            {/* Exercise Info */}\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">Categoria</p>\n                <p className=\"font-semibold\">{exercise.category}</p>\n              </div>\n              \n              {exercise.duration && (\n                <div className=\"text-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Duração</p>\n                  <p className=\"font-semibold\">{exercise.duration}</p>\n                </div>\n              )}\n            </div>\n            \n            {/* Description */}\n            <div>\n              <h4 className=\"font-semibold mb-2\">Descrição:</h4>\n              <p className=\"text-gray-600 dark:text-gray-400\">{exerciseDescription}</p>\n            </div>\n\n            {/* Instructions */}\n            <div>\n              <h4 className=\"font-semibold mb-2\">Instruções:</h4>\n              <div className=\"text-gray-600 dark:text-gray-400 whitespace-pre-line\">\n                {exerciseInstructions}\n              </div>\n            </div>\n            \n            <Button\n              onClick={() => {\n                setShowDetails(false);\n                handleStartTimer();\n              }}\n              className=\"w-full bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600 text-white\"\n            >\n              <Play className=\"w-4 h-4 mr-2\" />\n              Iniciar Exercício\n            </Button>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Timer Dialog */}\n      <Dialog open={showTimer} onOpenChange={setShowTimer}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-center\">{exerciseName}</DialogTitle>\n            <DialogDescription className=\"text-center\">\n              <span className={`font-semibold ${getPhaseColor()}`}>\n                {getPhaseText()}\n              </span>\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"text-center space-y-6\">\n            {/* Exercise GIF */}\n            {exercise.media && currentPhase !== 'prep' && (\n              <div className=\"w-full aspect-square bg-gray-100 dark:bg-gray-800 rounded-lg overflow-hidden\">\n                <img \n                  src={exercise.media} \n                  alt={exerciseName}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            )}\n            \n            {/* Preparation Phase */}\n            {currentPhase === 'prep' && (\n              <div className=\"flex flex-col items-center space-y-4\">\n                <div className=\"text-6xl\">🏃‍♂️</div>\n                <p className=\"text-lg font-semibold\">Prepare-se!</p>\n                <div className=\"text-4xl font-bold text-yellow-500\">\n                  {prepTimer}\n                </div>\n              </div>\n            )}\n            \n            {/* Timer Display for Exercise/Rest */}\n            {currentPhase !== 'prep' && (\n              <div className=\"relative\">\n                <div className=\"w-32 h-32 mx-auto\">\n                  <svg className=\"w-32 h-32 transform -rotate-90\" viewBox=\"0 0 36 36\">\n                    <path\n                      className=\"text-gray-200\"\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      fill=\"none\"\n                      d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                    />\n                    <path\n                      className={currentPhase === 'exercise' ? 'text-green-500' : 'text-blue-500'}\n                      stroke=\"currentColor\"\n                      strokeWidth=\"2\"\n                      strokeDasharray={`${(timer / (currentPhase === 'exercise' ? getDurationInSeconds() : getRestInSeconds())) * 100}, 100`}\n                      strokeLinecap=\"round\"\n                      fill=\"none\"\n                      d=\"M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831\"\n                    />\n                  </svg>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <span className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                      {formatTime(timer)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {/* Timer Controls */}\n            <div className=\"flex justify-center space-x-4\">\n              <Button\n                onClick={handlePauseTimer}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                {isRunning ? <Pause className=\"w-4 h-4\" /> : <Play className=\"w-4 h-4\" />}\n              </Button>\n              \n              <Button\n                onClick={handleResetTimer}\n                variant=\"outline\"\n                size=\"sm\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":15792},"client/src/components/ExerciseTimer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Button } from './ui/button';\nimport { Card, CardContent } from './ui/card';\nimport { Play, Pause, Square, Timer, RotateCcw } from 'lucide-react';\nimport { Exercise } from '../types';\n\ninterface ExerciseTimerProps {\n  exercise: Exercise;\n  isOpen: boolean;\n  onClose: () => void;\n  onComplete: () => void;\n}\n\nexport function ExerciseTimer({ exercise, isOpen, onClose, onComplete }: ExerciseTimerProps) {\n  const [currentPhase, setCurrentPhase] = useState<'preparation' | 'exercise' | 'rest' | 'completed'>('preparation');\n  const [timeRemaining, setTimeRemaining] = useState(10); // 10 seconds preparation\n  const [isRunning, setIsRunning] = useState(false);\n  const [currentSet, setCurrentSet] = useState(1);\n  const [totalSets, setTotalSets] = useState(3);\n\n  // Parse exercise duration (e.g., \"30 seconds\", \"2 minutes\")\n  const parseExerciseDuration = (duration?: string): number => {\n    if (!duration) return 30;\n    const minutes = duration.match(/(\\d+)\\s*minutes?/);\n    const seconds = duration.match(/(\\d+)\\s*seconds?/);\n    \n    if (minutes) return parseInt(minutes[1]) * 60;\n    if (seconds) return parseInt(seconds[1]);\n    return 30; // default\n  };\n\n  // Parse rest duration (e.g., \"30 seconds\", \"1 minute\")\n  const parseRestDuration = (rest: string): number => {\n    const minutes = rest.match(/(\\d+)\\s*minutes?/);\n    const seconds = rest.match(/(\\d+)\\s*seconds?/);\n    \n    if (minutes) return parseInt(minutes[1]) * 60;\n    if (seconds) return parseInt(seconds[1]);\n    return 30; // default\n  };\n\n  const exerciseDuration = parseExerciseDuration(exercise.duration);\n  const restDuration = parseRestDuration(exercise.rest);\n\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    \n    if (isRunning && timeRemaining > 0) {\n      interval = setInterval(() => {\n        setTimeRemaining(time => time - 1);\n      }, 1000);\n    } else if (timeRemaining === 0) {\n      handlePhaseComplete();\n    }\n\n    return () => clearInterval(interval);\n  }, [isRunning, timeRemaining]);\n\n  const handlePhaseComplete = () => {\n    setIsRunning(false);\n    \n    switch (currentPhase) {\n      case 'preparation':\n        setCurrentPhase('exercise');\n        setTimeRemaining(exerciseDuration);\n        setIsRunning(true);\n        break;\n      case 'exercise':\n        if (currentSet < totalSets) {\n          setCurrentPhase('rest');\n          setTimeRemaining(restDuration);\n          setIsRunning(true);\n        } else {\n          setCurrentPhase('completed');\n          onComplete();\n        }\n        break;\n      case 'rest':\n        setCurrentSet(prev => prev + 1);\n        setCurrentPhase('exercise');\n        setTimeRemaining(exerciseDuration);\n        setIsRunning(true);\n        break;\n    }\n  };\n\n  const handleStart = () => {\n    setIsRunning(true);\n    console.log('Starting exercise:', exercise.id);\n  };\n\n  const handlePause = () => {\n    setIsRunning(false);\n  };\n\n  const handleReset = () => {\n    setIsRunning(false);\n    setCurrentPhase('preparation');\n    setTimeRemaining(10);\n    setCurrentSet(1);\n  };\n\n  const handleStop = () => {\n    setIsRunning(false);\n    onClose();\n  };\n\n  const formatTime = (seconds: number): string => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const getPhaseTitle = () => {\n    switch (currentPhase) {\n      case 'preparation': return 'Get Ready!';\n      case 'exercise': return `Set ${currentSet} of ${totalSets}`;\n      case 'rest': return 'Rest Time';\n      case 'completed': return 'Excellent Work!';\n      default: return '';\n    }\n  };\n\n  const getPhaseColor = () => {\n    switch (currentPhase) {\n      case 'preparation': return 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100';\n      case 'exercise': return 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100';\n      case 'rest': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100';\n      case 'completed': return 'bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const getPhaseInstruction = () => {\n    switch (currentPhase) {\n      case 'preparation': return 'Prepare yourself for the exercise. Make sure you have enough space and are ready to begin.';\n      case 'exercise': return exercise.description || 'Perform the exercise with proper form. Focus on your breathing and technique.';\n      case 'rest': return 'Take a breather! Stay hydrated and prepare for the next set.';\n      case 'completed': return 'You completed the exercise! Great job on your workout session.';\n      default: return '';\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[500px]\">\n        <DialogHeader>\n          <DialogTitle className=\"text-xl font-bold text-center\">\n            {exercise.name}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Phase Indicator */}\n          <div className={`text-center p-4 rounded-lg ${getPhaseColor()}`}>\n            <h3 className=\"text-lg font-semibold mb-2\">{getPhaseTitle()}</h3>\n            <p className=\"text-sm\">{getPhaseInstruction()}</p>\n          </div>\n\n          {/* Timer Display */}\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">\n                <div className=\"text-6xl font-bold text-primary mb-2\">\n                  {formatTime(timeRemaining)}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {currentPhase === 'preparation' && 'Preparation Time'}\n                  {currentPhase === 'exercise' && 'Exercise Time'}\n                  {currentPhase === 'rest' && 'Rest Time'}\n                  {currentPhase === 'completed' && 'Completed!'}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Exercise Info */}\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-700 dark:text-gray-300\">Duration</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">{exercise.duration || '30 seconds'}</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"font-semibold text-gray-700 dark:text-gray-300\">Rest</div>\n              <div className=\"text-gray-600 dark:text-gray-400\">{exercise.rest}</div>\n            </div>\n          </div>\n\n          {/* Controls */}\n          <div className=\"flex justify-center space-x-3\">\n            {!isRunning && currentPhase !== 'completed' && (\n              <Button onClick={handleStart} className=\"bg-green-600 hover:bg-green-700\">\n                <Play className=\"w-4 h-4 mr-2\" />\n                Start\n              </Button>\n            )}\n            \n            {isRunning && (\n              <Button onClick={handlePause} variant=\"outline\">\n                <Pause className=\"w-4 h-4 mr-2\" />\n                Pause\n              </Button>\n            )}\n            \n            <Button onClick={handleReset} variant=\"outline\">\n              <RotateCcw className=\"w-4 h-4 mr-2\" />\n              Reset\n            </Button>\n            \n            <Button onClick={handleStop} variant=\"destructive\">\n              <Square className=\"w-4 h-4 mr-2\" />\n              Stop\n            </Button>\n          </div>\n\n          {currentPhase === 'completed' && (\n            <div className=\"text-center space-y-3\">\n              <p className=\"text-green-600 dark:text-green-400 font-semibold\">\n                🎉 Exercise completed! You're building stronger habits.\n              </p>\n              <Button onClick={onClose} className=\"bg-primary hover:bg-primary/90\">\n                Finish Workout\n              </Button>\n            </div>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8180},"client/src/components/FloatingActionButton.tsx":{"content":"\nimport React, { useState } from \"react\";\nimport { Button } from \"./ui/button\";\nimport {\n  Card,\n  CardContent,\n} from \"./ui/card\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"./ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"./ui/dialog\";\nimport {\n  Plus,\n  Droplets,\n  Weight,\n  Heart,\n  X,\n} from \"lucide-react\";\nimport { useApp } from \"../contexts/AppContext\";\n\nexport function FloatingActionButton() {\n  const { logWeight, logMood, logWater } = useApp();\n  const [isOpen, setIsOpen] = useState(false);\n  const [showWeightDialog, setShowWeightDialog] = useState(false);\n  const [showMoodDialog, setShowMoodDialog] = useState(false);\n  const [showWaterDialog, setShowWaterDialog] = useState(false);\n\n  // Form states\n  const [weightInput, setWeightInput] = useState(\"\");\n  const [moodInput, setMoodInput] = useState(\"\");\n  const [waterInput, setWaterInput] = useState(\"\");\n\n  const handleLogWeight = () => {\n    const weight = parseFloat(weightInput);\n    if (weight > 0) {\n      logWeight(weight);\n      setWeightInput(\"\");\n      setShowWeightDialog(false);\n      setIsOpen(false);\n    }\n  };\n\n  const handleLogMood = () => {\n    const mood = parseInt(moodInput);\n    if (mood >= 1 && mood <= 5) {\n      logMood(mood);\n      setMoodInput(\"\");\n      setShowMoodDialog(false);\n      setIsOpen(false);\n    }\n  };\n\n  const handleLogWater = () => {\n    const water = parseFloat(waterInput);\n    if (water > 0) {\n      logWater(water);\n      setWaterInput(\"\");\n      setShowWaterDialog(false);\n      setIsOpen(false);\n    }\n  };\n\n  const getMoodEmoji = (mood: string) => {\n    const moodMap: { [key: string]: string } = {\n      \"1\": \"😢\",\n      \"2\": \"😔\",\n      \"3\": \"😐\",\n      \"4\": \"😊\",\n      \"5\": \"😄\",\n    };\n    return moodMap[mood] || \"😐\";\n  };\n\n  return (\n    <>\n      {/* Floating Action Button Container */}\n      <div className=\"fixed bottom-20 right-4 z-50 flex flex-col items-end\">\n        {/* Quick Action Options - positioned above the main button */}\n        {isOpen && (\n          <div className=\"flex flex-col items-end space-y-2 mb-4\">\n            <Button\n              onClick={() => setShowWaterDialog(true)}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white shadow-lg w-auto px-4\"\n              size=\"sm\"\n            >\n              <Droplets className=\"w-4 h-4 mr-2\" />\n              Log Water\n            </Button>\n            <Button\n              onClick={() => setShowWeightDialog(true)}\n              className=\"bg-purple-500 hover:bg-purple-600 text-white shadow-lg w-auto px-4\"\n              size=\"sm\"\n            >\n              <Weight className=\"w-4 h-4 mr-2\" />\n              Log Weight\n            </Button>\n            <Button\n              onClick={() => setShowMoodDialog(true)}\n              className=\"bg-pink-500 hover:bg-pink-600 text-white shadow-lg w-auto px-4\"\n              size=\"sm\"\n            >\n              <Heart className=\"w-4 h-4 mr-2\" />\n              Log Mood\n            </Button>\n          </div>\n        )}\n\n        {/* Main FAB - always stays in the same position */}\n        <Button\n          onClick={() => setIsOpen(!isOpen)}\n          className=\"h-14 w-14 rounded-full bg-primary hover:bg-primary/90 text-white shadow-lg transition-transform hover:scale-105 flex-shrink-0\"\n          size=\"sm\"\n        >\n          {isOpen ? (\n            <X className=\"w-6 h-6\" />\n          ) : (\n            <Plus className=\"w-6 h-6\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Weight Dialog */}\n      <Dialog open={showWeightDialog} onOpenChange={setShowWeightDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Weight className=\"w-5 h-5\" />\n              Log Weight\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"weight-input\">Weight (kg)</Label>\n              <Input\n                id=\"weight-input\"\n                type=\"number\"\n                step=\"0.1\"\n                value={weightInput}\n                onChange={(e) => setWeightInput(e.target.value)}\n                placeholder=\"Enter your weight in kg\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowWeightDialog(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={handleLogWeight} disabled={!weightInput} className=\"flex-1\">\n                Log Weight\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Mood Dialog */}\n      <Dialog open={showMoodDialog} onOpenChange={setShowMoodDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Heart className=\"w-5 h-5\" />\n              Log Mood\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"mood-select\">How are you feeling?</Label>\n              <Select value={moodInput} onValueChange={setMoodInput}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select your mood\">\n                    {moodInput && (\n                      <span className=\"flex items-center gap-2\">\n                        {getMoodEmoji(moodInput)}\n                        {moodInput === \"1\" && \"Very Sad\"}\n                        {moodInput === \"2\" && \"Sad\"}\n                        {moodInput === \"3\" && \"Neutral\"}\n                        {moodInput === \"4\" && \"Happy\"}\n                        {moodInput === \"5\" && \"Very Happy\"}\n                      </span>\n                    )}\n                  </SelectValue>\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"1\">😢 Very Sad</SelectItem>\n                  <SelectItem value=\"2\">😔 Sad</SelectItem>\n                  <SelectItem value=\"3\">😐 Neutral</SelectItem>\n                  <SelectItem value=\"4\">😊 Happy</SelectItem>\n                  <SelectItem value=\"5\">😄 Very Happy</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowMoodDialog(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={handleLogMood} disabled={!moodInput} className=\"flex-1\">\n                Log Mood\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Water Dialog */}\n      <Dialog open={showWaterDialog} onOpenChange={setShowWaterDialog}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Droplets className=\"w-5 h-5\" />\n              Log Water Intake\n            </DialogTitle>\n          </DialogHeader>\n          \n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"water-input\">Amount (liters)</Label>\n              <Input\n                id=\"water-input\"\n                type=\"number\"\n                step=\"0.1\"\n                value={waterInput}\n                onChange={(e) => setWaterInput(e.target.value)}\n                placeholder=\"e.g., 0.5\"\n              />\n            </div>\n            \n            {/* Quick Amount Buttons */}\n            <div className=\"grid grid-cols-4 gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setWaterInput(\"0.25\")}\n              >\n                250ml\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setWaterInput(\"0.5\")}\n              >\n                500ml\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setWaterInput(\"0.75\")}\n              >\n                750ml\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setWaterInput(\"1\")}\n              >\n                1L\n              </Button>\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button variant=\"outline\" onClick={() => setShowWaterDialog(false)} className=\"flex-1\">\n                Cancel\n              </Button>\n              <Button onClick={handleLogWater} disabled={!waterInput} className=\"flex-1\">\n                Log Water\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":9090},"client/src/components/Journal.tsx":{"content":"import React, { useState, useMemo } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"./ui/card\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Badge } from \"./ui/badge\";\nimport { Separator } from \"./ui/separator\";\nimport {\n  Calendar,\n  Droplets,\n  Target,\n  Heart,\n  Utensils,\n  ChevronLeft,\n  ChevronRight,\n  Weight,\n  Trash2,\n} from \"lucide-react\";\nimport { Button } from \"./ui/button\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\n\nexport function Journal() {\n  const { t } = useTranslation();\n  const { state, dispatch } = useApp();\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  // Helper functions to navigate dates\n  const goToPreviousDay = () => {\n    const currentDate = new Date(selectedDate);\n    currentDate.setDate(currentDate.getDate() - 1);\n    setSelectedDate(currentDate.toISOString().split(\"T\")[0]);\n  };\n\n  const goToNextDay = () => {\n    const currentDate = new Date(selectedDate);\n    const tomorrow = new Date();\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    if (currentDate < tomorrow) {\n      currentDate.setDate(currentDate.getDate() + 1);\n      setSelectedDate(currentDate.toISOString().split(\"T\")[0]);\n    }\n  };\n\n  // Function to delete a meal log\n  const deleteMealLog = (mealLogId: string) => {\n    const updatedMealLogs = state.userData.mealLogs?.filter(\n      log => log.id !== mealLogId\n    ) || [];\n\n    dispatch({\n      type: \"SET_USER_DATA\",\n      payload: {\n        ...state.userData,\n        mealLogs: updatedMealLogs,\n      },\n    });\n  };\n\n  // Get data for selected date\n  const dayData = useMemo(() => {\n    const waterLogs = state.userData.waterLog?.filter(\n      (log) => log.date === selectedDate\n    ) || [];\n    const mealLogs = state.userData.mealLogs?.filter(\n      (log) => log.date === selectedDate\n    ) || [];\n    const moodLogs = state.userData.moodLogs?.filter(\n      (log) => log.date === selectedDate\n    ) || [];\n    const weightLogs = state.userData.weights?.filter(\n      (log) => log.date === selectedDate\n    ) || [];\n\n    const totalWater = waterLogs.reduce((sum, log) => sum + log.liters, 0);\n    const totalCalories = mealLogs.reduce((sum, log) => sum + log.calories, 0);\n    const totalProtein = mealLogs.reduce((sum, log) => sum + log.protein, 0);\n    const totalCarbs = mealLogs.reduce((sum, log) => sum + log.carbs, 0);\n    const totalFat = mealLogs.reduce((sum, log) => sum + log.fat, 0);\n    const lastMood = moodLogs.length > 0 ? moodLogs[moodLogs.length - 1] : null;\n    const dayWeight = weightLogs.length > 0 ? weightLogs[weightLogs.length - 1] : null;\n\n    return {\n      water: totalWater,\n      calories: totalCalories,\n      protein: totalProtein,\n      carbs: totalCarbs,\n      fat: totalFat,\n      mood: lastMood,\n      weight: dayWeight,\n      mealLogs,\n      waterLogs,\n    };\n  }, [selectedDate, state.userData]);\n\n  const formatDate = (dateStr: string) => {\n    const date = new Date(dateStr);\n    return date.toLocaleDateString(\"en-US\", {\n      weekday: \"long\",\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n    });\n  };\n\n  const getMoodEmoji = (mood: number) => {\n    const moodMap = {\n      1: \"😢\",\n      2: \"😔\",\n      3: \"😐\",\n      4: \"😊\",\n      5: \"😄\",\n    };\n    return moodMap[mood as keyof typeof moodMap] || \"😐\";\n  };\n\n  const getMoodLabel = (mood: number) => {\n    const moodLabels = {\n      1: \"Very Sad\",\n      2: \"Sad\",\n      3: \"Neutral\",\n      4: \"Happy\",\n      5: \"Very Happy\",\n    };\n    return moodLabels[mood as keyof typeof moodLabels] || \"Unknown\";\n  };\n\n  const isToday = selectedDate === new Date().toISOString().split(\"T\")[0];\n  const isFuture = new Date(selectedDate) > new Date();\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Date Navigation */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              Daily Journal\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToPreviousDay}\n              >\n                <ChevronLeft className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={goToNextDay}\n                disabled={isFuture}\n              >\n                <ChevronRight className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"journal-date\">Select Date</Label>\n              <Input\n                id=\"journal-date\"\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                max={new Date().toISOString().split(\"T\")[0]}\n              />\n            </div>\n            <div className=\"text-center\">\n              <h2 className=\"text-xl font-semibold\">\n                {formatDate(selectedDate)}\n              </h2>\n              {isToday && (\n                <Badge variant=\"secondary\" className=\"mt-1\">\n                  Today\n                </Badge>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Daily Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Water Intake */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Droplets className=\"w-4 h-4 text-blue-500\" />\n              Water Intake\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {dayData.water.toFixed(1)}L\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {dayData.waterLogs.length} log{dayData.waterLogs.length !== 1 ? 's' : ''}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Calories */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Target className=\"w-4 h-4 text-orange-500\" />\n              Calories\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {dayData.calories}\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {dayData.mealLogs.length} meal{dayData.mealLogs.length !== 1 ? 's' : ''}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Mood */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Heart className=\"w-4 h-4 text-pink-500\" />\n              Mood\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              {dayData.mood ? (\n                <>\n                  <div className=\"text-3xl mb-1\">\n                    {getMoodEmoji(dayData.mood.mood)}\n                  </div>\n                  <div className=\"text-sm font-medium\">\n                    {getMoodLabel(dayData.mood.mood)}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {dayData.mood.time}\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-muted-foreground\">\n                  <div className=\"text-2xl\">😐</div>\n                  <div className=\"text-sm\">No mood logged</div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Weight */}\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base flex items-center gap-2\">\n              <Weight className=\"w-4 h-4 text-purple-500\" />\n              Weight\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-center\">\n              {dayData.weight ? (\n                <>\n                  <div className=\"text-2xl font-bold text-purple-600\">\n                    {dayData.weight.weight} kg\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">\n                    {dayData.weight.time}\n                  </div>\n                </>\n              ) : (\n                <div className=\"text-muted-foreground\">\n                  <div className=\"text-2xl\">-</div>\n                  <div className=\"text-sm\">No weight logged</div>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Macronutrients Summary */}\n      {dayData.mealLogs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Target className=\"w-5 h-5\" />\n              Daily Macronutrients\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-3 gap-4\">\n              <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {dayData.protein.toFixed(1)}g\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Protein</div>\n              </div>\n              <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {dayData.carbs.toFixed(1)}g\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Carbs</div>\n              </div>\n              <div className=\"text-center p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {dayData.fat.toFixed(1)}g\n                </div>\n                <div className=\"text-sm text-muted-foreground\">Fat</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Water Logs */}\n      {dayData.waterLogs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Droplets className=\"w-5 h-5\" />\n              Water Intake Logs\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {dayData.waterLogs.map((waterLog, index) => (\n                <div key={waterLog.id || index} className=\"flex items-center justify-between p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-blue-700 dark:text-blue-300\">\n                      {waterLog.liters}L water\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {waterLog.time}\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"font-semibold text-blue-600\">\n                      {(waterLog.liters * 1000).toFixed(0)}ml\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Detailed Logs */}\n      {dayData.mealLogs.length > 0 && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Utensils className=\"w-5 h-5\" />\n              Meals Logged\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {dayData.mealLogs.map((meal, index) => (\n                <div key={meal.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{meal.mealName}</div>\n                    <div className=\"text-sm text-muted-foreground\">\n                      {meal.time}\n                    </div>\n                  </div>\n                  <div className=\"text-right mr-4\">\n                    <div className=\"font-semibold text-orange-600\">\n                      {meal.calories} cal\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      P: {meal.protein}g • C: {meal.carbs}g • F: {meal.fat}g\n                    </div>\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => deleteMealLog(meal.id)}\n                    className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Empty State */}\n      {dayData.water === 0 && dayData.calories === 0 && !dayData.mood && !dayData.weight && (\n        <Card>\n          <CardContent className=\"text-center py-12\">\n            <Calendar className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">No data for this day</h3>\n            <p className=\"text-muted-foreground\">\n              {isToday\n                ? \"Start logging your meals, water intake, mood, and weight to see your daily progress.\"\n                : \"No activities were logged on this date.\"}\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":14161},"client/src/components/LanguageSwitcher.tsx":{"content":"import React from 'react';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { Button } from './ui/button';\n\nexport function LanguageSwitcher() {\n  const { currentLanguage, changeLanguage } = useTranslation();\n\n  const languages = [\n    { code: 'en-US', flag: '🇺🇸', name: 'English (US)' },\n    { code: 'fr-FR', flag: '🇫🇷', name: 'Français (France)' },\n    { code: 'es-ES', flag: '🇪🇸', name: 'Español (España)' }\n  ];\n\n  const handleLanguageChange = (langCode: string) => {\n    changeLanguage(langCode);\n    // Force page reload to apply language changes\n    setTimeout(() => {\n      window.location.reload();\n    }, 100);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"text-sm text-gray-600 dark:text-gray-400 mb-3\">\n        Current: {languages.find(l => l.code === currentLanguage)?.name || 'English (US)'}\n      </div>\n      \n      <div className=\"grid gap-2\">\n        {languages.map((language) => (\n          <Button\n            key={language.code}\n            variant={currentLanguage === language.code ? 'default' : 'outline'}\n            onClick={() => handleLanguageChange(language.code)}\n            className=\"w-full justify-start\"\n          >\n            <span className=\"mr-2\">{language.flag}</span>\n            {language.name}\n          </Button>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":1361},"client/src/components/MealCard.tsx":{"content":"\nimport React, { useState } from \"react\";\nimport { Meal } from \"../types\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"./ui/card\";\nimport { Button } from \"./ui/button\";\nimport { Badge } from \"./ui/badge\";\nimport { Heart, Plus, Clock, Utensils } from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { MealLogDialog } from \"./MealLogDialog\";\n\ninterface MealCardProps {\n  meal: Meal;\n  onLogMeal?: () => void;\n  showCategory?: boolean;\n}\n\nexport function MealCard({\n  meal,\n  onLogMeal,\n  showCategory = true,\n}: MealCardProps) {\n  const { t, currentLanguage } = useTranslation();\n  const { state, toggleFavorite } = useApp();\n  const [showLogDialog, setShowLogDialog] = useState(false);\n\n  // All meals are now accessible\n  const isLocked = false;\n\n  const isFavorite = state.userData.favorites.meals.includes(meal.id);\n\n  const handleToggleFavorite = () => {\n    toggleFavorite(\"meals\", meal.id);\n  };\n\n  const handleLogMealOriginal = () => {\n    setShowLogDialog(true);\n  };\n\n  const handleConfirmLog = (date: string) => {\n    // Create meal log entry\n    const { dispatch } = useApp();\n    const mealLog = {\n      id: `${meal.id}-${Date.now()}`,\n      mealId: meal.id,\n      mealName: getMealName(),\n      calories: meal.calories,\n      protein: meal.protein,\n      carbs: meal.carbs,\n      fats: meal.fats,\n      date: date,\n      time: new Date().toLocaleTimeString(),\n      timestamp: new Date().toISOString(),\n    };\n\n    // For now, just call the callback\n    // TODO: Implement proper meal logging if needed\n\n    if (onLogMeal) {\n      onLogMeal();\n    }\n  };\n\n  const getCategoryColor = (category?: string) => {\n    switch (category) {\n      case \"breakfast\":\n        return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100\";\n      case \"lunch\":\n        return \"bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100\";\n      case \"dinner\":\n        return \"bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100\";\n      case \"snack\":\n        return \"bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100\";\n      default:\n        return \"bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100\";\n    }\n  };\n\n  // Get the meal name for the current language, fallback to English Nigeria\n  const getMealName = () => {\n    if (typeof meal.name === 'string') {\n      return meal.name;\n    }\n    return meal.name[currentLanguage] || meal.name['en-NG'] || 'Meal';\n  };\n\n  // Get the meal description for the current language, fallback to English Nigeria\n  const getMealDescription = () => {\n    if (typeof meal.description === 'string') {\n      return meal.description;\n    }\n    return meal.description?.[currentLanguage] || meal.description?.['en-NG'] || '';\n  };\n\n\n  return (\n    <Card\n      className=\"w-full shadow-lg hover:shadow-xl transition-shadow duration-300 overflow-hidden\"\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2\">\n              <CardTitle className=\"text-lg font-poppins font-bold text-gray-800 dark:text-gray-100 mb-1\">\n                {getMealName()}\n              </CardTitle>\n            </div>\n            \n            {/* Show category */}\n            {showCategory && meal.category && (\n              <Badge className={`text-xs mb-2 ${getCategoryColor(meal.category)}`}>\n                {t(`meals.categories.${meal.category}`)}\n              </Badge>\n            )}\n\n          </div>\n          \n          <button\n            onClick={handleToggleFavorite}\n            className={`p-2 rounded-full transition-colors ${\n              isFavorite\n                ? \"bg-red-100 text-red-500 hover:bg-red-200 dark:bg-red-800 dark:text-red-300\"\n                : \"bg-gray-100 text-gray-400 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-500\"\n            }`}\n          >\n            <Heart\n              className=\"w-5 h-5\"\n              fill={isFavorite ? \"currentColor\" : \"none\"}\n            />\n          </button>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"space-y-3\">\n          {/* Meal Image */}\n          <div className=\"relative h-40 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden\">\n            {meal.image ? (\n              <img\n                src={meal.image}\n                alt={getMealName()}\n                className=\"w-full h-full object-cover\"\n              />\n            ) : (\n              <div className=\"flex items-center justify-center h-full\">\n                <Utensils className=\"w-16 h-16 text-gray-400\" />\n              </div>\n            )}\n          </div>\n\n          {/* Meal Info */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-1\">\n                <Utensils className=\"w-4 h-4 text-gray-500\" />\n                <span className=\"text-sm font-medium text-primary\">\n                  {meal.calories} {t(\"common.calories\")}\n                </span>\n              </div>\n            </div>\n          </div>\n\n          {/* Nutritional Info */}\n          <div className=\"grid grid-cols-3 gap-2 text-center\">\n            <div className=\"p-2 bg-blue-50 dark:bg-blue-900/20 rounded\">\n              <div className=\"text-sm font-bold text-blue-600\">{meal.protein}g</div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Protein</div>\n            </div>\n            <div className=\"p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n              <div className=\"text-sm font-bold text-green-600\">{meal.carbs}g</div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Carbs</div>\n            </div>\n            <div className=\"p-2 bg-purple-50 dark:bg-purple-900/20 rounded\">\n              <div className=\"text-sm font-bold text-purple-600\">{meal.fats}g</div>\n              <div className=\"text-xs text-gray-600 dark:text-gray-400\">Fats</div>\n            </div>\n          </div>\n\n          {/* Instructions */}\n          {meal.instructions && (\n            <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {typeof meal.instructions === 'string' \n                  ? meal.instructions \n                  : (Array.isArray(meal.instructions) \n                    ? meal.instructions.join(', ') \n                    : meal.instructions[currentLanguage] || meal.instructions['en-NG'] || '')}\n              </p>\n            </div>\n          )}\n\n          {/* Action Button */}\n          {onLogMeal && (\n            <Button\n              onClick={handleLogMealOriginal}\n              className=\"w-full bg-secondary hover:bg-secondary/90\"\n            >\n              <Plus className=\"w-4 h-4 mr-2\" />\n              {t(\"meals.logMeal\")}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n\n\n      {/* Meal Log Dialog */}\n      <MealLogDialog\n        isOpen={showLogDialog}\n        onClose={() => setShowLogDialog(false)}\n        onConfirm={handleConfirmLog}\n        mealName={getMealName()}\n      />\n    </Card>\n  );\n}\n","size_bytes":7282},"client/src/components/MealLogDialog.tsx":{"content":"\nimport React, { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from \"./ui/dialog\";\nimport { Button } from \"./ui/button\";\nimport { Input } from \"./ui/input\";\nimport { Label } from \"./ui/label\";\nimport { Calendar, Check } from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\n\ninterface MealLogDialogProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (date: string) => void;\n  mealName: string;\n}\n\nexport function MealLogDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  mealName,\n}: MealLogDialogProps) {\n  const { t } = useTranslation();\n  const [selectedDate, setSelectedDate] = useState(\n    new Date().toISOString().split(\"T\")[0]\n  );\n\n  const handleConfirm = () => {\n    onConfirm(selectedDate);\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"w-5 h-5\" />\n            Log Meal\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <p className=\"text-sm text-muted-foreground mb-2\">\n              You are about to log:\n            </p>\n            <p className=\"font-semibold\">{mealName}</p>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"meal-date\">Select Date</Label>\n            <Input\n              id=\"meal-date\"\n              type=\"date\"\n              value={selectedDate}\n              onChange={(e) => setSelectedDate(e.target.value)}\n              max={new Date().toISOString().split(\"T\")[0]}\n            />\n          </div>\n        </div>\n\n        <DialogFooter className=\"flex gap-2\">\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button onClick={handleConfirm} className=\"flex items-center gap-2\">\n            <Check className=\"w-4 h-4\" />\n            Confirm Log\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":2133},"client/src/components/PlanActivation.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Input } from './ui/input';\nimport { Label } from './ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './ui/dialog';\nimport { activatePlan, PLANS } from '../utils/planManager';\nimport { Key, Check, X } from 'lucide-react';\n\ninterface PlanActivationProps {\n  onActivation: () => void;\n}\n\nexport const PlanActivation: React.FC<PlanActivationProps> = ({ onActivation }) => {\n  const [selectedPlan, setSelectedPlan] = useState<string>('');\n  const [password, setPassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState(false);\n\n  const handleActivation = async () => {\n    if (!selectedPlan || !password) {\n      setError('Por favor, selecione um plano e digite a senha');\n      return;\n    }\n\n    setIsLoading(true);\n    setError('');\n\n    try {\n      const planId = parseInt(selectedPlan);\n      const success = activatePlan(planId, password);\n\n      if (success) {\n        setSuccess(true);\n        setTimeout(() => {\n          onActivation();\n        }, 1500);\n      } else {\n        setError('Senha incorreta para o plano selecionado');\n      }\n    } catch (error) {\n      setError('Erro ao ativar plano. Tente novamente.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const resetForm = () => {\n    setSelectedPlan('');\n    setPassword('');\n    setError('');\n    setSuccess(false);\n  };\n\n  if (success) {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Check className=\"w-8 h-8 text-green-600\" />\n          </div>\n          <h3 className=\"text-lg font-semibold text-green-800 mb-2\">\n            Plano Ativado com Sucesso!\n          </h3>\n          <p className=\"text-sm text-gray-600\">\n            Redirecionando...\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <Key className=\"w-5 h-5\" />\n          Ativar Plano\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <Label htmlFor=\"plan\">Selecione o Plano</Label>\n          <Select value={selectedPlan} onValueChange={setSelectedPlan}>\n            <SelectTrigger>\n              <SelectValue placeholder=\"Escolha um plano\" />\n            </SelectTrigger>\n            <SelectContent>\n              {PLANS.map((plan) => (\n                <SelectItem key={plan.id} value={plan.id.toString()}>\n                  {plan.name} - {plan.duration === -1 ? 'Ilimitado' : `${plan.duration} dias`}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        <div>\n          <Label htmlFor=\"password\">Senha do Plano</Label>\n          <Input\n            id=\"password\"\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            placeholder=\"Digite a senha do plano\"\n          />\n        </div>\n\n        {error && (\n          <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n            <div className=\"flex items-center gap-2\">\n              <X className=\"w-4 h-4 text-red-600\" />\n              <p className=\"text-sm text-red-800\">{error}</p>\n            </div>\n          </div>\n        )}\n\n        <Button \n          onClick={handleActivation} \n          disabled={isLoading || !selectedPlan || !password}\n          className=\"w-full\"\n        >\n          {isLoading ? 'Ativando...' : 'Ativar Plano'}\n        </Button>\n\n        {selectedPlan && (\n          <div className=\"p-3 bg-blue-50 border border-blue-200 rounded-md\">\n            <h4 className=\"font-medium text-blue-800 mb-2\">\n              {PLANS.find(p => p.id.toString() === selectedPlan)?.name}\n            </h4>\n            <ul className=\"text-sm text-blue-700 space-y-1\">\n              {PLANS.find(p => p.id.toString() === selectedPlan)?.features.map((feature, index) => (\n                <li key={index}>• {feature}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n};\n\nexport const PlanActivationDialog: React.FC<PlanActivationProps> = ({ onActivation }) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleActivation = () => {\n    setIsOpen(false);\n    onActivation();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\n      <DialogTrigger asChild>\n        <Button variant=\"outline\" className=\"w-full\">\n          <Key className=\"w-4 h-4 mr-2\" />\n          Ativar Plano\n        </Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Ativação de Plano</DialogTitle>\n        </DialogHeader>\n        <PlanActivation onActivation={handleActivation} />\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":5291},"client/src/components/ThemeProvider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const saved = localStorage.getItem('wellness_tracker_theme') as Theme;\n    if (saved && (saved === 'light' || saved === 'dark')) {\n      setTheme(saved);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('wellness_tracker_theme', theme);\n    \n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1305},"client/src/components/UpgradePopup.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\nimport { Button } from './ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { Crown, Clock, AlertTriangle } from 'lucide-react';\nimport { PlanActivationDialog } from './PlanActivation';\n\ninterface UpgradePopupProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onUpgrade?: () => void;\n}\n\nexport const UpgradePopup: React.FC<UpgradePopupProps> = ({ \n  isOpen, \n  onClose, \n  onUpgrade \n}) => {\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n            Acesso Expirado\n          </DialogTitle>\n        </DialogHeader>\n        \n        <Card className=\"border-orange-200\">\n          <CardHeader className=\"text-center\">\n            <div className=\"w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Clock className=\"w-8 h-8 text-orange-600\" />\n            </div>\n            <CardTitle className=\"text-orange-800\">\n              Seu plano expirou!\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-gray-600\">\n              Para continuar usando o aplicativo, faça upgrade para o Plano Ilimitado.\n            </p>\n            \n            <div className=\"p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-lg border\">\n              <div className=\"flex items-center justify-center gap-2 mb-2\">\n                <Crown className=\"w-5 h-5 text-purple-600\" />\n                <h3 className=\"font-semibold text-purple-800\">Plano Ilimitado</h3>\n              </div>\n              <p className=\"text-sm text-purple-700 mb-3\">\n                Acesso completo sem limitações de tempo\n              </p>\n              <ul className=\"text-xs text-purple-600 space-y-1\">\n                <li>• Todos os desafios disponíveis</li>\n                <li>• Funcionalidades premium</li>\n                <li>• Sem prazo de expiração</li>\n                <li>• Suporte prioritário</li>\n              </ul>\n            </div>\n\n            <div className=\"space-y-2\">\n              <PlanActivationDialog onActivation={onUpgrade} />\n              <Button \n                variant=\"ghost\" \n                onClick={onClose}\n                className=\"w-full text-gray-600\"\n              >\n                Sair do App\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </DialogContent>\n    </Dialog>\n  );\n};\n","size_bytes":2726},"client/src/contexts/AppContext.tsx":{"content":"import React, {\n  createContext,\n  useContext,\n  useReducer,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport { UserData, AppState, Challenge } from \"../types\";\nimport {\n  loadUserData,\n  saveUserData,\n  defaultUserData,\n  checkAndUnlockBadges,\n} from \"../utils/storage\";\nimport challengesData from \"../data/challenges.json\";\n\ninterface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  updateUserProfile: (profile: Partial<UserData[\"userProfile\"]>) => void;\n  startChallenge: (challengeId: string) => void;\n  restartChallenge: (challengeId: string) => void;\n  completeTask: (challengeId: string, day: number, taskIndex: number) => void;\n  uncompleteTask: (challengeId: string, day: number, taskIndex: number) => void;\n  toggleFavorite: (type: \"exercises\" | \"meals\" | \"quotes\", id: string) => void;\n  logWeight: (weight: number) => void;\n  logMood: (mood: number) => void;\n  logWater: (liters: number) => void;\n  logCalories: (calories: number) => void;\n  unlockBadge: (badgeId: string) => void;\n  importCSVData: (\n    csvData: any[],\n  ) => Promise<{\n    success: boolean;\n    imported: number;\n    skipped: number;\n    message?: string;\n  }>;\n}\n\ntype AppAction =\n  | { type: \"SET_USER_DATA\"; payload: UserData }\n  | { type: \"UPDATE_USER_PROFILE\"; payload: Partial<UserData[\"userProfile\"]> }\n  | { type: \"SET_LANGUAGE\"; payload: \"en-US\" | \"fr-FR\" | \"es-ES\" }\n  | { type: \"SET_DARK_MODE\"; payload: boolean }\n  | { type: \"SET_ONBOARDED\"; payload: boolean }\n  | { type: \"START_CHALLENGE\"; payload: string }\n  | { type: \"RESTART_CHALLENGE\"; payload: string }\n  | {\n      type: \"COMPLETE_TASK\";\n      payload: { challengeId: string; day: number; taskIndex: number };\n    }\n  | {\n      type: \"UNCOMPLETE_TASK\";\n      payload: { challengeId: string; day: number; taskIndex: number };\n    }\n  | {\n      type: \"TOGGLE_FAVORITE\";\n      payload: { type: \"exercises\" | \"meals\" | \"quotes\"; id: string };\n    }\n  | { type: \"LOG_WEIGHT\"; payload: number }\n  | { type: \"LOG_MOOD\"; payload: number }\n  | { type: \"LOG_WATER\"; payload: number }\n  | { type: \"LOG_CALORIES\"; payload: number }\n  | { type: \"UNLOCK_BADGE\"; payload: string };\n\nconst initialState: AppState = {\n  userData: defaultUserData,\n  currentLanguage: \"en-US\",\n  isDarkMode: false,\n  isOnboarded: false,\n  currentChallenge: undefined,\n};\n\nfunction appReducer(state: AppState, action: AppAction): AppState {\n  switch (action.type) {\n    case \"SET_USER_DATA\":\n      return { ...state, userData: action.payload };\n\n    case \"UPDATE_USER_PROFILE\":\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          userProfile: { ...state.userData.userProfile, ...action.payload },\n        },\n      };\n\n    case \"SET_LANGUAGE\":\n      return { ...state, currentLanguage: action.payload };\n\n    case \"SET_DARK_MODE\":\n      return { ...state, isDarkMode: action.payload };\n\n    case \"SET_ONBOARDED\":\n      return { ...state, isOnboarded: action.payload };\n\n    case \"START_CHALLENGE\":\n    case \"RESTART_CHALLENGE\": {\n      const challengeTemplate = challengesData.find(\n        (c) => c.id === action.payload,\n      );\n      if (!challengeTemplate) return state;\n\n      const currentLanguage = state.currentLanguage;\n      const newChallenge: Challenge = {\n        ...challengeTemplate,\n        currentDay: 1,\n        completedDays: [],\n        isActive: true,\n        startDate: new Date().toISOString().split(\"T\")[0],\n        language: currentLanguage, // Store the language used when creating the challenge\n        dailyTasks: challengeTemplate.dailyTasks.map((task) => {\n          // Get the tasks array for the current language\n          const languageTasks = task.tasks[currentLanguage] || task.tasks['en-US'] || [];\n          return {\n            ...task,\n            completed: new Array(languageTasks.length).fill(false),\n          };\n        }),\n      };\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          challenges: {\n            ...state.userData.challenges,\n            [action.payload]: newChallenge,\n          },\n        },\n        currentChallenge: action.payload,\n      };\n    }\n\n    case \"COMPLETE_TASK\": {\n      const { challengeId, day, taskIndex } = action.payload;\n      const challenge = state.userData.challenges[challengeId];\n      if (!challenge) return state;\n\n      const updatedChallenge = { ...challenge };\n      const dayTask = updatedChallenge.dailyTasks.find((t) => t.day === day);\n      if (dayTask && taskIndex >= 0 && taskIndex < dayTask.completed.length) {\n        dayTask.completed[taskIndex] = true;\n\n        const allTasksCompleted = dayTask.completed.every((c) => c);\n        if (\n          allTasksCompleted &&\n          !updatedChallenge.completedDays.includes(day)\n        ) {\n          updatedChallenge.completedDays.push(day);\n          updatedChallenge.currentDay = Math.min(\n            day + 1,\n            updatedChallenge.days,\n          );\n        }\n      }\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          challenges: {\n            ...state.userData.challenges,\n            [challengeId]: updatedChallenge,\n          },\n        },\n      };\n    }\n\n    case \"UNCOMPLETE_TASK\": {\n      const { challengeId, day, taskIndex } = action.payload;\n      const challenge = state.userData.challenges[challengeId];\n      if (!challenge) return state;\n\n      const updatedChallenge = { ...challenge };\n      const dayTask = updatedChallenge.dailyTasks.find((t) => t.day === day);\n      if (dayTask && taskIndex >= 0 && taskIndex < dayTask.completed.length) {\n        dayTask.completed[taskIndex] = false;\n        if (updatedChallenge.completedDays.includes(day)) {\n          updatedChallenge.completedDays =\n            updatedChallenge.completedDays.filter((d) => d !== day);\n        }\n      }\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          challenges: {\n            ...state.userData.challenges,\n            [challengeId]: updatedChallenge,\n          },\n        },\n      };\n    }\n\n    case \"TOGGLE_FAVORITE\": {\n      const { type, id } = action.payload;\n      const currentFavorites = state.userData.favorites[type];\n      const newFavorites = currentFavorites.includes(id)\n        ? currentFavorites.filter((fav) => fav !== id)\n        : [...currentFavorites, id];\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          favorites: {\n            ...state.userData.favorites,\n            [type]: newFavorites,\n          },\n        },\n      };\n    }\n\n    case \"LOG_WEIGHT\": {\n      const today = new Date().toISOString().split(\"T\")[0];\n      const updatedWeights = state.userData.weights.filter(\n        (w) => w.date !== today,\n      );\n      updatedWeights.push({ date: today, weight: action.payload });\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          weights: updatedWeights,\n        },\n      };\n    }\n\n    case \"LOG_MOOD\": {\n      const today = new Date().toISOString().split('T')[0];\n      const updatedMoods = state.userData.moods.filter(\n        (m) => m.date !== today,\n      );\n      updatedMoods.push({ date: today, mood: action.payload });\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          moods: updatedMoods,\n        },\n      };\n    }\n\n    case \"LOG_WATER\": {\n      const today = new Date().toISOString().split('T')[0];\n      const time = new Date().toLocaleTimeString();\n\n      const waterLogEntry = {\n        id: `water-${Date.now()}`,\n        date: today,\n        liters: action.payload,\n        time,\n        timestamp: new Date().toISOString()\n      };\n\n      const updatedWaterLog = [...state.userData.waterLog, waterLogEntry];\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          waterLog: updatedWaterLog,\n        },\n      };\n    }\n\n    case \"LOG_CALORIES\": {\n      const today = new Date().toISOString().split(\"T\")[0];\n      const updatedCaloriesLog = state.userData.caloriesLog.filter(\n        (c) => c.date !== today,\n      );\n      updatedCaloriesLog.push({ date: today, calories: action.payload });\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          caloriesLog: updatedCaloriesLog,\n        },\n      };\n    }\n\n    case \"UNLOCK_BADGE\": {\n      const existingBadge = state.userData.badges.find(\n        (b) => b.id === action.payload,\n      );\n      if (existingBadge) return state;\n\n      const newBadge = {\n        id: action.payload,\n        name: action.payload,\n        description: \"\",\n        icon: \"\",\n        isUnlocked: true,\n        unlockedAt: new Date().toISOString(),\n      };\n\n      return {\n        ...state,\n        userData: {\n          ...state.userData,\n          badges: [...state.userData.badges, newBadge],\n        },\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\nconst AppContext = createContext<AppContextType | undefined>(undefined);\n\nexport function AppProvider({ children }: { children: React.ReactNode }) {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  useEffect(() => {\n    const userData = loadUserData();\n    dispatch({ type: \"SET_USER_DATA\", payload: userData });\n\n    if (userData.userProfile.name) {\n      dispatch({ type: \"SET_ONBOARDED\", payload: true });\n    }\n\n    if (userData.userProfile.language) {\n      dispatch({\n        type: \"SET_LANGUAGE\",\n        payload: userData.userProfile.language,\n      });\n    }\n  }, []);\n\n  useEffect(() => {\n    saveUserData(state.userData);\n  }, [state.userData]);\n\n  const updateUserProfile = (profile: Partial<UserData[\"userProfile\"]>) => {\n    dispatch({ type: \"UPDATE_USER_PROFILE\", payload: profile });\n  };\n\n  const startChallenge = (challengeId: string) => {\n    dispatch({ type: \"START_CHALLENGE\", payload: challengeId });\n  };\n\n  const restartChallenge = (challengeId: string) => {\n    dispatch({ type: \"RESTART_CHALLENGE\", payload: challengeId });\n  };\n\n  const completeTask = useCallback(\n    (challengeId: string, day: number, taskIndex: number) => {\n      dispatch({\n        type: \"COMPLETE_TASK\",\n        payload: { challengeId, day, taskIndex },\n      });\n      checkAndUnlockBadges(state.userData, dispatch);\n    },\n    [state.userData],\n  );\n\n  const uncompleteTask = (\n    challengeId: string,\n    day: number,\n    taskIndex: number,\n  ) => {\n    dispatch({\n      type: \"UNCOMPLETE_TASK\",\n      payload: { challengeId, day, taskIndex },\n    });\n  };\n\n  const toggleFavorite = (\n    type: \"exercises\" | \"meals\" | \"quotes\",\n    id: string,\n  ) => {\n    dispatch({ type: \"TOGGLE_FAVORITE\", payload: { type, id } });\n  };\n\n  const logWeight = (weight: number) => {\n    dispatch({ type: \"LOG_WEIGHT\", payload: weight });\n  };\n\n  const logMood = (mood: number) => {\n    dispatch({ type: \"LOG_MOOD\", payload: mood });\n  };\n\n  const logWater = (liters: number) => {\n    dispatch({ type: \"LOG_WATER\", payload: liters });\n  };\n\n  const logCalories = (calories: number) => {\n    dispatch({ type: \"LOG_CALORIES\", payload: calories });\n  };\n\n  const unlockBadge = (badgeId: string) => {\n    dispatch({ type: \"UNLOCK_BADGE\", payload: badgeId });\n  };\n\n  const importCSVData = async (csvData: any[]) => {\n    return {\n      success: true,\n      imported: 0,\n      skipped: 0,\n      message: \"Not implemented\",\n    };\n  };\n\n  return (\n    <AppContext.Provider\n      value={{\n        state,\n        dispatch,\n        updateUserProfile,\n        startChallenge,\n        restartChallenge,\n        completeTask,\n        uncompleteTask,\n        toggleFavorite,\n        logWeight,\n        logMood,\n        logWater,\n        logCalories,\n        unlockBadge,\n        importCSVData,\n      }}\n    >\n      {children}\n    </AppContext.Provider>\n  );\n}\n\nexport const useApp = (): AppContextType => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error(\"useApp must be used within an AppProvider\");\n  }\n  return context;\n};\n\nconst initialUserData: UserData = {\n  personalInfo: {\n    name: '',\n    age: 0,\n    weight: 0,\n    height: 0,\n    sex: 'male',\n    activityLevel: 'moderate',\n    goal: 'maintain'\n  },\n  preferences: {\n    language: 'en-NG',\n    theme: 'light'\n  },\n  onboardingCompleted: false,\n  activePlan: 1,\n  weightLogs: [],\n  waterLogs: [],\n  moodLogs: [],\n  exerciseLogs: [],\n  mealLogs: [],\n  measurements: [],\n  challengeProgress: [],\n  courseProgress: [],\n  lessonProgress: [],\n  badges: []\n};","size_bytes":12438},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useLocalStorage.ts":{"content":"import { useState, useEffect } from 'react';\n\nexport function useLocalStorage<T>(key: string, initialValue: T): [T, (value: T) => void] {\n  const [storedValue, setStoredValue] = useState<T>(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      console.error(`Error reading localStorage key \"${key}\":`, error);\n      return initialValue;\n    }\n  });\n\n  const setValue = (value: T) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(`Error setting localStorage key \"${key}\":`, error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n","size_bytes":727},"client/src/hooks/usePlanAccess.ts":{"content":"import { useState, useEffect } from \"react\";\n\n// Simplified hook that always grants access\nexport const usePlanAccess = () => {\n  const [isValid, setIsValid] = useState(true);\n  const [currentPlan, setCurrentPlan] = useState(null);\n  const [remainingDays, setRemainingDays] = useState(-1);\n\n  useEffect(() => {\n    // No need to check access - always valid\n    setIsValid(true);\n    setCurrentPlan(null);\n    setRemainingDays(-1);\n  }, []);\n\n  // Always return true - no access restrictions\n  const hasAccess = (requiredPlans?: number[]): boolean => {\n    return true;\n  };\n\n  return {\n    hasAccess,\n    currentPlan,\n    remainingDays,\n    refreshAccess: () => {\n      // No-op - always has access\n    },\n  };\n};","size_bytes":713},"client/src/hooks/useTranslation.ts":{"content":"import { useState, useEffect } from \"react\";\n\ntype TranslationKey = string;\ntype TranslationParams = Record<string, string | number>;\n\ninterface TranslationData {\n  [key: string]: any;\n}\n\nconst translations: Record<string, TranslationData> = {};\n\ntype SupportedLanguage = \"en-US\" | \"fr-FR\" | \"es-ES\";\n\nexport function useTranslation() {\n  const [currentLanguage, setCurrentLanguage] =\n    useState<SupportedLanguage>(\"en-US\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  const getLocalizedText = (value: string | Record<string, string>) => {\n    if (typeof value === \"string\") return value;\n    return value[currentLanguage] || Object.values(value)[0] || \"\";\n  };\n\n  useEffect(() => {\n    const loadTranslations = async () => {\n      try {\n        const languages: SupportedLanguage[] = [\n          \"en-US\",\n          \"fr-FR\",\n          \"es-ES\",\n        ];\n\n        for (const lang of languages) {\n          if (!translations[lang]) {\n            const module = await import(`../data/translations/${lang}.json`);\n            translations[lang] = module.default;\n          }\n        }\n\n        setIsLoading(false);\n      } catch (error) {\n        console.error(\"Failed to load translations:\", error);\n        setIsLoading(false);\n      }\n    };\n\n    loadTranslations();\n  }, []);\n\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\n      \"wellness_tracker_language\",\n    ) as SupportedLanguage;\n    if (\n      savedLanguage &&\n      [\"en-US\", \"fr-FR\", \"es-ES\"].includes(savedLanguage)\n    ) {\n      setCurrentLanguage(savedLanguage);\n    }\n  }, []);\n\n  const changeLanguage = (language: string) => {\n    const supportedLang = language as SupportedLanguage;\n    setCurrentLanguage(supportedLang);\n    localStorage.setItem(\"wellness_tracker_language\", supportedLang);\n  };\n\n  const t = (key: TranslationKey, params?: TranslationParams): string => {\n    if (isLoading) return key;\n\n    if (!key || typeof key !== \"string\") {\n      return \"\";\n    }\n    const keys = (key || \"\").split(\".\");\n    let value = translations[currentLanguage];\n\n    for (const k of keys) {\n      if (value && typeof value === \"object\" && k in value) {\n        value = value[k];\n      } else {\n        // Fallback to en-US\n        if (currentLanguage !== \"en-US\" && translations[\"en-US\"]) {\n          let fallbackValue = translations[\"en-US\"];\n          for (const fallbackK of keys) {\n            if (\n              fallbackValue &&\n              typeof fallbackValue === \"object\" &&\n              fallbackK in fallbackValue\n            ) {\n              fallbackValue = fallbackValue[fallbackK];\n            } else {\n              return key;\n            }\n          }\n          value = fallbackValue;\n          break;\n        }\n        return key;\n      }\n    }\n\n    // Handle multilingual objects\n    if (typeof value === \"object\" && value !== null) {\n      // If it's a multilingual object, try to get the current language\n      if (value[currentLanguage]) {\n        value = value[currentLanguage];\n      } else if (value[\"en-NG\"]) {\n        value = value[\"en-NG\"];\n      } else {\n        // Get first available value\n        const firstKey = Object.keys(value)[0];\n        if (firstKey) {\n          value = value[firstKey];\n        } else {\n          console.warn(\n            `Translation key \"${key}\" resolved to non-string value:`,\n            value,\n          );\n          return key;\n        }\n      }\n    }\n\n    if (typeof value !== \"string\") {\n      console.warn(\n        `Translation key \"${key}\" resolved to non-string value:`,\n        value,\n      );\n      return key;\n    }\n\n    if (params) {\n      return value.replace(/\\{\\{(\\w+)\\}\\}/g, (match, paramKey) => {\n        return params[paramKey]?.toString() || match;\n      });\n    }\n\n    return value;\n  };\n\n  const getRandomQuote = (): string => {\n    if (isLoading) return \"\";\n\n    const quotes =\n      translations[currentLanguage]?.cultural?.motivationalQuotes || [];\n    if (quotes.length === 0) return \"\";\n\n    const randomIndex = Math.floor(Math.random() * quotes.length);\n    return quotes[randomIndex] || \"\";\n  };\n\n  return {\n    t,\n    currentLanguage,\n    changeLanguage,\n    isLoading,\n    getRandomQuote,\n    getLocalizedText, // ✅ Adicionado aqui\n  };\n}\n","size_bytes":4233},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/badges.tsx":{"content":"\nimport React, { useState } from 'react';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Award, Lock, Star, Trophy, Target, Zap, Search } from 'lucide-react';\nimport { Input } from '../components/ui/input';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { useApp } from '../contexts/AppContext';\nimport { BadgeCard } from '../components/BadgeCard';\n\n// Predefined badge system\nconst AVAILABLE_BADGES = [\n  {\n    id: 'first_step',\n    name: 'First Step',\n    description: 'Completed your first day of any challenge',\n    icon: '🏃‍♂️',\n    category: 'milestone',\n    requirement: 'Complete day 1 of any challenge'\n  },\n  {\n    id: 'hydrated',\n    name: 'Hydrated',\n    description: 'Hit water goal for 7 consecutive days',\n    icon: '💧',\n    category: 'consistency',\n    requirement: 'Log water intake for 7 days in a row'\n  },\n  {\n    id: 'consistent',\n    name: 'Consistent',\n    description: 'Maintained a 7-day activity streak',\n    icon: '⚡',\n    category: 'consistency',\n    requirement: 'Complete any activity for 7 days straight'\n  },\n  {\n    id: 'no_sugar_hero',\n    name: 'No Sugar Hero',\n    description: 'Completed the 30-day no sugar challenge',\n    icon: '🍎',\n    category: 'challenge',\n    requirement: 'Complete the 30-Day No Sugar challenge'\n  },\n  {\n    id: 'halfway',\n    name: 'Halfway',\n    description: 'Reached 50% completion of any challenge',\n    icon: '🎯',\n    category: 'milestone',\n    requirement: 'Complete 50% of any challenge'\n  },\n  {\n    id: 'week_warrior',\n    name: 'Week Warrior',\n    description: 'Completed a full week challenge',\n    icon: '🏆',\n    category: 'challenge',\n    requirement: 'Complete any 7-day challenge'\n  },\n  {\n    id: 'month_master',\n    name: 'Month Master',\n    description: 'Completed a month-long challenge',\n    icon: '👑',\n    category: 'challenge',\n    requirement: 'Complete any 30-day challenge'\n  },\n  {\n    id: 'exercise_enthusiast',\n    name: 'Exercise Enthusiast',\n    description: 'Completed 20 different exercises',\n    icon: '💪',\n    category: 'activity',\n    requirement: 'Try 20 different exercises'\n  },\n  {\n    id: 'healthy_eater',\n    name: 'Healthy Eater',\n    description: 'Logged meals for 14 consecutive days',\n    icon: '🥗',\n    category: 'nutrition',\n    requirement: 'Log meals for 14 days in a row'\n  },\n  {\n    id: 'water_champion',\n    name: 'Water Champion',\n    description: 'Hit daily water goal for 30 days',\n    icon: '🌊',\n    category: 'consistency',\n    requirement: 'Meet water intake goal for 30 days'\n  }\n];\n\nexport default function Badges() {\n  const { t } = useTranslation();\n  const { state } = useApp();\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchTerm, setSearchTerm] = useState('');\n\n  const { userData } = state;\n  \n  // Create badge objects with unlock status\n  const allBadges = AVAILABLE_BADGES.map(badge => {\n    const unlockedBadge = userData.badges.find(b => b.id === badge.id);\n    return {\n      ...badge,\n      isUnlocked: !!unlockedBadge,\n      unlockedAt: unlockedBadge?.unlockedAt\n    };\n  });\n\n  const unlockedBadges = allBadges.filter(badge => badge.isUnlocked);\n  const lockedBadges = allBadges.filter(badge => !badge.isUnlocked);\n\n  const categories = ['all', 'milestone', 'consistency', 'challenge', 'activity', 'nutrition'];\n  \n  const filteredBadges = allBadges.filter(badge => {\n    const matchesCategory = selectedCategory === 'all' || badge.category === selectedCategory;\n    const matchesSearch = badge.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         badge.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesCategory && matchesSearch;\n  });\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'milestone': return <Target className=\"w-4 h-4\" />;\n      case 'consistency': return <Zap className=\"w-4 h-4\" />;\n      case 'challenge': return <Trophy className=\"w-4 h-4\" />;\n      case 'activity': return <Star className=\"w-4 h-4\" />;\n      case 'nutrition': return <Award className=\"w-4 h-4\" />;\n      default: return <Award className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'milestone': return 'bg-purple-100 text-purple-800 dark:bg-purple-800 dark:text-purple-100';\n      case 'consistency': return 'bg-blue-100 text-blue-800 dark:bg-blue-800 dark:text-blue-100';\n      case 'challenge': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-800 dark:text-yellow-100';\n      case 'activity': return 'bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100';\n      case 'nutrition': return 'bg-orange-100 text-orange-800 dark:bg-orange-800 dark:text-orange-100';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-100';\n    }\n  };\n\n  const BadgeStats = () => (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-8\">\n      <Card className=\"bg-gradient-to-r from-green-500 to-green-600 text-white border-0\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Trophy className=\"w-8 h-8 mr-2\" />\n            <div className=\"text-3xl font-bold\">{unlockedBadges.length}</div>\n          </div>\n          <div className=\"text-green-100 font-medium\">{t('badges.unlocked')}</div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"bg-gradient-to-r from-gray-400 to-gray-500 text-white border-0\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Lock className=\"w-8 h-8 mr-2\" />\n            <div className=\"text-3xl font-bold\">{lockedBadges.length}</div>\n          </div>\n          <div className=\"text-gray-100 font-medium\">{t('badges.locked')}</div>\n        </CardContent>\n      </Card>\n      \n      <Card className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white border-0\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center mb-2\">\n            <Award className=\"w-8 h-8 mr-2\" />\n            <div className=\"text-3xl font-bold\">{allBadges.length}</div>\n          </div>\n          <div className=\"text-blue-100 font-medium\">Total</div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm\">\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h1 className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                {t('badges.title')}\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                {t('badges.subtitle')}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-2xl font-bold text-primary\">{Math.round((unlockedBadges.length / allBadges.length) * 100)}%</div>\n              <div className=\"text-xs text-gray-500\">{t('progress.title')}</div>\n            </div>\n          </div>\n\n          {/* Search Bar */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n            <Input\n              type=\"text\"\n              placeholder={`${t('common.search') || 'Buscar'} badges...`}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10 rounded-2xl\"\n            />\n          </div>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        <BadgeStats />\n\n        <Tabs defaultValue=\"all\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 mb-6\">\n            <TabsTrigger value=\"all\" className=\"flex items-center space-x-2\">\n              <Award className=\"w-4 h-4\" />\n              <span>{t('meals.all')} ({allBadges.length})</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"unlocked\" className=\"flex items-center space-x-2\">\n              <Trophy className=\"w-4 h-4\" />\n              <span>{t('badges.unlocked')} ({unlockedBadges.length})</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"locked\" className=\"flex items-center space-x-2\">\n              <Lock className=\"w-4 h-4\" />\n              <span>{t('badges.locked')} ({lockedBadges.length})</span>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"mt-6\">\n            {/* Category Filter */}\n            <div className=\"flex flex-wrap gap-2 mb-6\">\n              {categories.map((category) => (\n                <button\n                  key={category}\n                  onClick={() => setSelectedCategory(category)}\n                  className={`flex items-center space-x-2 px-4 py-2 rounded-full text-sm font-medium transition-all duration-200 ${\n                    selectedCategory === category\n                      ? 'bg-primary text-white shadow-lg transform scale-105'\n                      : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 shadow-sm'\n                  }`}\n                >\n                  {category !== 'all' && getCategoryIcon(category)}\n                  <span>\n                    {category === 'all' ? t('meals.all') : \n                     category === 'milestone' ? t('badges.categories.milestone') :\n                     category === 'consistency' ? t('badges.categories.consistency') :\n                     category === 'challenge' ? t('challenges.title') :\n                     category === 'activity' ? t('badges.categories.activity') :\n                     category === 'nutrition' ? t('badges.categories.nutrition') : category}\n                  </span>\n                  <Badge variant=\"secondary\" className=\"ml-1\">\n                    {category === 'all' ? allBadges.length : allBadges.filter(b => b.category === category).length}\n                  </Badge>\n                </button>\n              ))}\n            </div>\n\n            {filteredBadges.length > 0 ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                {filteredBadges.map((badge) => (\n                  <div key={badge.id} className=\"relative group\">\n                    <div className={`absolute -top-2 -right-2 z-10 ${getCategoryColor(badge.category)} px-2 py-1 rounded-full text-xs flex items-center space-x-1 transition-opacity ${badge.isUnlocked ? 'opacity-100' : 'opacity-0 group-hover:opacity-100'}`}>\n                      {getCategoryIcon(badge.category)}\n                    </div>\n                    <BadgeCard badge={badge} showDate={true} />\n                    {!badge.isUnlocked && (\n                      <div className=\"mt-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400 text-center leading-relaxed\">\n                          {badge.requirement}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-12 text-center border-dashed border-2 border-gray-300 dark:border-gray-600\">\n                <Search className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400 text-lg mb-2\">\n                  {t('badges.noBadgesFound')}\n                </p>\n                <p className=\"text-gray-500 dark:text-gray-500 text-sm\">\n                  {t('badges.adjustFilters')}\n                </p>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"unlocked\" className=\"mt-6\">\n            {unlockedBadges.length > 0 ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                {unlockedBadges.map((badge) => (\n                  <div key={badge.id} className=\"relative\">\n                    <div className={`absolute -top-2 -right-2 z-10 ${getCategoryColor(badge.category)} px-2 py-1 rounded-full text-xs flex items-center space-x-1`}>\n                      {getCategoryIcon(badge.category)}\n                    </div>\n                    <BadgeCard badge={badge} showDate={true} />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <Trophy className=\"w-16 h-16 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400 text-lg mb-2\">\n                  {t('badges.noBadgesEarned')}\n                </p>\n                <p className=\"text-gray-500 dark:text-gray-500 text-sm\">\n                  {t('badges.completeActivities')}\n                </p>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"locked\" className=\"mt-6\">\n            {lockedBadges.length > 0 ? (\n              <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\">\n                {lockedBadges.map((badge) => (\n                  <div key={badge.id} className=\"relative group\">\n                    <div className={`absolute -top-2 -right-2 z-10 ${getCategoryColor(badge.category)} px-2 py-1 rounded-full text-xs flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity`}>\n                      {getCategoryIcon(badge.category)}\n                    </div>\n                    <BadgeCard badge={badge} />\n                    <div className=\"mt-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 text-center leading-relaxed\">\n                        {badge.requirement}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-12 text-center\">\n                <Trophy className=\"w-16 h-16 text-yellow-500 mx-auto mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400 text-lg mb-2\">\n                  {t('badges.congratulations')}\n                </p>\n                <p className=\"text-gray-500 dark:text-gray-500 text-sm\">\n                  {t('badges.keepUpHabits')}\n                </p>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14700},"client/src/pages/challenges.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Badge } from '../components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../components/ui/tabs';\nimport { Progress } from '../components/ui/progress';\nimport { Play, CheckCircle, Calendar, Target, Award, Trophy, Sparkles } from 'lucide-react';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { useApp } from '../contexts/AppContext';\nimport { ChallengeCard } from '../components/ChallengeCard';\nimport challengesData from '../data/challenges.json';\n\nexport default function Challenges() {\n  const { t } = useTranslation();\n  const { state, startChallenge, restartChallenge } = useApp();\n  const [selectedTab, setSelectedTab] = useState('available');\n  // All challenges are now accessible\n\n  // Helper function to ensure translation returns a string, not an object\n  // If object is received, get the first valid string or convert to JSON string to avoid React error\n  const safeTranslate = (key: string) => {\n    const result = t(key);\n    if (typeof result === 'string') return result;\n    if (typeof result === 'object' && result !== null) {\n      // If object, try to get the first key value\n      const firstKey = Object.keys(result)[0];\n      if (firstKey && typeof result[firstKey] === 'string') return result[firstKey];\n      // fallback to convert object to string\n      return JSON.stringify(result);\n    }\n    return '';\n  };\n\n  // Helper function to get translated text from multilingual objects\n  const getTranslatedText = (textObj: { [key: string]: string } | string, fallback?: string): string => {\n    if (typeof textObj === 'string') return textObj;\n    if (typeof textObj === 'object' && textObj !== null) {\n      // Try current language first\n      const currentLang = state.currentLanguage;\n      if (textObj[currentLang]) return textObj[currentLang];\n      // Fallback to en-US\n      if (textObj['en-US']) return textObj['en-US'];\n      // Fallback to first available language\n      const firstKey = Object.keys(textObj)[0];\n      if (firstKey && textObj[firstKey]) return textObj[firstKey];\n    }\n    return fallback || '';\n  };\n\n  // All challenges are accessible - no need to check access\n\n  const { userData } = state;\n  const activeChallenges = Object.values(userData.challenges).filter(c => c.isActive);\n  const completedChallenges = Object.values(userData.challenges).filter(c => c.completedDays.length === c.days);\n  const availableChallenges = challengesData.filter(c => !userData.challenges[c.id] || !userData.challenges[c.id].isActive);\n\n  // No plan restrictions needed\n\n  const handleStartChallenge = (challengeId: string) => {\n    // All challenges are accessible\n    startChallenge(challengeId);\n  };\n\n  const handleRestartChallenge = (challengeId: string) => {\n    restartChallenge(challengeId);\n  };\n\n  const ChallengeStats = () => (\n    <div className=\"grid grid-cols-3 gap-4 mb-8\">\n      <Card className=\"bg-gradient-to-br from-blue-500/10 to-blue-600/20 border-blue-200 dark:border-blue-800\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center w-12 h-12 bg-blue-500/20 rounded-full mx-auto mb-3\">\n            <Play className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n          </div>\n          <div className=\"text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1\">{activeChallenges.length}</div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400 font-medium\">{t('challenges.activeChallengesLabel')}</div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-gradient-to-br from-green-500/10 to-green-600/20 border-green-200 dark:border-green-800\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center w-12 h-12 bg-green-500/20 rounded-full mx-auto mb-3\">\n            <Trophy className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n          </div>\n          <div className=\"text-3xl font-bold text-green-600 dark:text-green-400 mb-1\">{completedChallenges.length}</div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400 font-medium\">{t('challenges.completedChallengesLabel')}</div>\n        </CardContent>\n      </Card>\n\n      <Card className=\"bg-gradient-to-br from-purple-500/10 to-purple-600/20 border-purple-200 dark:border-purple-800\">\n        <CardContent className=\"p-6 text-center\">\n          <div className=\"flex items-center justify-center w-12 h-12 bg-purple-500/20 rounded-full mx-auto mb-3\">\n            <Sparkles className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n          </div>\n          <div className=\"text-3xl font-bold text-purple-600 dark:text-purple-400 mb-1\">{availableChallenges.length}</div>\n          <div className=\"text-sm text-gray-600 dark:text-gray-400 font-medium\">{t('challenges.availableChallengesLabel')}</div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n\n  const AvailableChallengeCard = ({ challenge }: { challenge: any }) => {\n    return (\n      <Card className=\"overflow-hidden transition-all duration-300 hover:shadow-xl hover:scale-[1.02]\">\n        <div className=\"h-2 bg-gradient-to-r from-blue-400 to-purple-500\" />\n\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex-1\">\n              <div className=\"flex items-center gap-3 mb-2\">\n                <CardTitle className=\"text-xl font-bold text-gray-800 dark:text-gray-100\">\n                  {typeof challenge.name === 'string' ? challenge.name : safeTranslate(challenge.name)}\n                </CardTitle>\n              </div>\n\n              <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400\">\n                <div className=\"flex items-center gap-1\">\n                  <Calendar className=\"w-4 h-4\" />\n                  <span>{challenge.days} {t('challenges.daysLabel')}</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Target className=\"w-4 h-4\" />\n                  <span>{t('challenges.completeChallengeLabel')}</span>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"w-16 h-16 rounded-2xl flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600\">\n              <Target className=\"w-8 h-8 text-white\" />\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"pt-0\">\n          <p className=\"text-gray-600 dark:text-gray-400 mb-6 leading-relaxed\">\n            {typeof challenge.description === 'string' ? challenge.description : safeTranslate(challenge.description)}\n          </p>\n\n          <div className=\"space-y-3 mb-6\">\n            {challenge.dailyTasks && challenge.dailyTasks.slice(0, 3).map((task: any, idx: number) => (\n              <div key={idx} className=\"flex items-center gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />\n                <span className=\"text-sm text-gray-700 dark:text-gray-300\">\n                  {typeof task.tasks[0] === 'string' ? task.tasks[0] : safeTranslate(task.tasks[0])}\n                </span>\n              </div>\n            ))}\n          </div>\n\n          <Button\n            className=\"w-full\"\n            onClick={() => handleStartChallenge(challenge.id)}\n          >\n            {t('challenges.startChallenge')}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const ActiveChallengeCard = ({ challenge }: { challenge: any }) => {\n    const progress = (challenge.completedDays.length / challenge.days) * 100;\n    const { state, completeTask, uncompleteTask } = useApp();\n    const { currentLanguage } = useTranslation();\n    \n    // Get today's tasks for the current day\n    const currentDay = challenge.currentDay || 1;\n    const todayTasks = challenge.dailyTasks && challenge.dailyTasks.find((task: any) => task.day === currentDay);\n    // Use the same language that was used when the challenge was created to maintain index consistency\n    const challengeLanguage = challenge.language || 'en-US'; \n    const tasks = todayTasks ? (todayTasks.tasks[challengeLanguage] || todayTasks.tasks['en-US'] || []) : [];\n\n    return (\n      <Card className=\"overflow-hidden hover:shadow-xl transition-all duration-300\">\n        <div className=\"h-2 bg-gradient-to-r from-green-400 to-teal-500\" />\n\n        <CardHeader className=\"pb-4\">\n          <CardTitle className=\"text-xl font-bold text-gray-800 dark:text-gray-100 mb-2\">\n            {getTranslatedText(challenge.name)}\n          </CardTitle>\n\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4 leading-relaxed\">\n            {getTranslatedText(challenge.description)}\n          </p>\n\n          <Progress value={progress} className=\"mb-4\" />\n\n          <div className=\"flex justify-between text-sm text-gray-600 dark:text-gray-400\">\n            <span>{challenge.completedDays.length} / {challenge.days} {t('challenges.daysCompleted')}</span>\n            <span>{Math.round(progress)}%</span>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"pt-0\">\n          {/* Today's Tasks Checklist */}\n          <div className=\"mb-6\">\n            <h4 className=\"font-semibold text-gray-800 dark:text-gray-100 mb-3\">\n              {t('challenges.todaysTasks')} - {t('challenges.day')} {currentDay}\n            </h4>\n            <div className=\"space-y-3\">\n              {tasks.map((task: string, taskIndex: number) => {\n                const isCompleted = todayTasks?.completed && todayTasks.completed[taskIndex];\n                return (\n                  <div key={taskIndex} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                    <button\n                      onClick={() => {\n                        if (isCompleted) {\n                          uncompleteTask(challenge.id, currentDay, taskIndex);\n                        } else {\n                          completeTask(challenge.id, currentDay, taskIndex);\n                        }\n                      }}\n                      className={`flex-shrink-0 w-5 h-5 rounded border-2 flex items-center justify-center transition-colors ${\n                        isCompleted\n                          ? 'bg-green-500 border-green-500 text-white'\n                          : 'border-gray-300 dark:border-gray-600 hover:border-green-400'\n                      }`}\n                      data-testid={`task-checkbox-${taskIndex}`}\n                    >\n                      {isCompleted && <CheckCircle className=\"w-3 h-3\" />}\n                    </button>\n                    <span className={`text-sm ${\n                      isCompleted \n                        ? 'text-gray-500 dark:text-gray-400 line-through' \n                        : 'text-gray-700 dark:text-gray-300'\n                    }`}>\n                      {task}\n                    </span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          <Button \n            className=\"w-full\" \n            onClick={() => handleRestartChallenge(challenge.id)}\n            data-testid=\"restart-challenge-button\"\n          >\n            {t('challenges.restartChallenge')}\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <div className=\"max-w-5xl mx-auto px-6 py-12\">\n      <h1 className=\"text-4xl font-extrabold mb-8\">{t('challenges.title')}</h1>\n\n      <ChallengeStats />\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"mb-8\">\n        <TabsList>\n          <TabsTrigger value=\"available\">{t('challenges.available')}</TabsTrigger>\n          <TabsTrigger value=\"active\">{t('challenges.active')}</TabsTrigger>\n          <TabsTrigger value=\"completed\">{t('challenges.completed')}</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"available\" className=\"space-y-6\">\n          {availableChallenges.length === 0 && (\n            <p className=\"text-center text-gray-600 dark:text-gray-400\">{t('challenges.noAvailable')}</p>\n          )}\n\n          {availableChallenges.map(challenge => (\n            <AvailableChallengeCard key={challenge.id} challenge={challenge} />\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"active\" className=\"space-y-6\">\n          {activeChallenges.length === 0 && (\n            <p className=\"text-center text-gray-600 dark:text-gray-400\">{t('challenges.noActive')}</p>\n          )}\n\n          {activeChallenges.map(challenge => (\n            <ActiveChallengeCard key={challenge.id} challenge={challenge} />\n          ))}\n        </TabsContent>\n\n        <TabsContent value=\"completed\" className=\"space-y-6\">\n          {completedChallenges.length === 0 && (\n            <p className=\"text-center text-gray-600 dark:text-gray-400\">{safeTranslate('noCompletedChallenges') || 'Nenhum desafio concluído ainda.'}</p>\n          )}\n\n          {completedChallenges.map(challenge => (\n            <Card key={challenge.id} className=\"overflow-hidden hover:shadow-xl transition-all duration-300\">\n              <CardHeader>\n                <CardTitle>\n                  {getTranslatedText(challenge.name)}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p>{getTranslatedText(challenge.description)}</p>\n                <Badge variant=\"secondary\" className=\"mt-2\">\n                  {safeTranslate('completedBadge') || 'Concluído'}\n                </Badge>\n              </CardContent>\n            </Card>\n          ))}\n        </TabsContent>\n      </Tabs>\n\n      {/* Plan system removed - no upgrade popups needed */}\n    </div>\n  );\n}\n","size_bytes":13830},"client/src/pages/course-details.tsx":{"content":"\nimport React from 'react';\nimport { useApp } from '../contexts/AppContext';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent } from '../components/ui/card';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '../components/ui/accordion';\nimport { ArrowLeft, Play, CheckCircle2, Clock, Video, FileText } from 'lucide-react';\nimport coursesData from '../data/courses.json';\nimport { Course, CourseProgress } from '../types';\nimport { RouteComponentProps } from 'wouter';\nimport { useTranslation } from '../hooks/useTranslation';\n\nconst courses = coursesData as Course[];\n\ninterface CourseDetailsProps extends RouteComponentProps {\n  params: { id: string };\n}\n\nexport default function CourseDetails({ params }: CourseDetailsProps) {\n  const { t, currentLanguage } = useTranslation();\n  const { user, updateUser } = useApp();\n  \n  const course = courses.find(c => c.id === params.id);\n  const courseProgress = user?.courseProgress?.[params.id];\n  \n  if (!course) {\n    return (\n      <div className=\"p-4 text-center\">\n        <h1 className=\"text-2xl font-bold mb-4\">Course Not Found</h1>\n        <Button onClick={() => window.history.back()}>\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Go Back\n        </Button>\n      </div>\n    );\n  }\n\n  const getCourseName = () => {\n    if (typeof course.name === 'string') {\n      return course.name;\n    }\n    return course.name[currentLanguage] || course.name['en-NG'] || 'Course';\n  };\n\n  const getCourseDescription = () => {\n    if (typeof course.description === 'string') {\n      return course.description;\n    }\n    return course.description[currentLanguage] || course.description['en-NG'] || '';\n  };\n\n  const getLessonTitle = (lesson: any) => {\n    if (typeof lesson.title === 'string') {\n      return lesson.title;\n    }\n    return lesson.title[currentLanguage] || lesson.title['en-NG'] || 'Lesson';\n  };\n\n  const getLessonDescription = (lesson: any) => {\n    if (typeof lesson.description === 'string') {\n      return lesson.description;\n    }\n    return lesson.description?.[currentLanguage] || lesson.description?.['en-NG'] || '';\n  };\n\n  const startCourse = () => {\n    if (!user) return;\n    \n    const newProgress: CourseProgress = {\n      currentLessonId: course.lessons[0].id,\n      completedLessons: [],\n      startedAt: new Date().toISOString(),\n      lastAccessedAt: new Date().toISOString()\n    };\n    \n    updateUser({\n      ...user,\n      courseProgress: {\n        ...user.courseProgress,\n        [course.id]: newProgress\n      }\n    });\n  };\n\n  const continueCourse = () => {\n    if (!user || !courseProgress) return;\n    \n    updateUser({\n      ...user,\n      courseProgress: {\n        ...user.courseProgress,\n        [course.id]: {\n          ...courseProgress,\n          lastAccessedAt: new Date().toISOString()\n        }\n      }\n    });\n  };\n\n  const completedLessons = courseProgress?.completedLessons?.length || 0;\n  const progressPercentage = (completedLessons / course.lessons.length) * 100;\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <Button variant=\"ghost\" size=\"sm\" onClick={() => window.history.back()}>\n          <ArrowLeft className=\"w-4 h-4\" />\n        </Button>\n        <h1 className=\"text-2xl font-bold\">{getCourseName()}</h1>\n      </div>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <Clock className=\"w-4 h-4 text-muted-foreground\" />\n                <span className=\"text-sm text-muted-foreground\">\n                  {course.lessons.length} {t('courses.lessons')}\n                </span>\n              </div>\n              <div className=\"text-sm text-muted-foreground\">\n                {t('courses.progress')}: {Math.round(progressPercentage)}%\n              </div>\n            </div>\n            \n            <p className=\"text-muted-foreground\">\n              {getCourseDescription()}\n            </p>\n            \n            <div className=\"flex gap-2\">\n              {!courseProgress ? (\n                <Button onClick={startCourse} className=\"flex-1\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  {t('courses.startCourse')}\n                </Button>\n              ) : (\n                <Button onClick={continueCourse} className=\"flex-1\">\n                  <Play className=\"w-4 h-4 mr-2\" />\n                  {t('courses.continueCourse')}\n                </Button>\n              )}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card>\n        <CardContent className=\"p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Course Content</h2>\n          <Accordion type=\"single\" collapsible>\n            {course.lessons.map((lesson, index) => {\n              const isCompleted = courseProgress?.completedLessons?.includes(lesson.id);\n              const isCurrent = courseProgress?.currentLessonId === lesson.id;\n              \n              return (\n                <AccordionItem key={lesson.id} value={lesson.id}>\n                  <AccordionTrigger className=\"text-left\">\n                    <div className=\"flex items-center gap-3\">\n                      {isCompleted ? (\n                        <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n                      ) : isCurrent ? (\n                        <Play className=\"w-5 h-5 text-blue-500\" />\n                      ) : (\n                        <div className=\"w-5 h-5 rounded-full border-2 border-muted-foreground\" />\n                      )}\n                      <div>\n                        <div className=\"font-medium\">\n                          {index + 1}. {getLessonTitle(lesson)}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground flex items-center gap-2\">\n                          {lesson.type === 'video' ? (\n                            <Video className=\"w-3 h-3\" />\n                          ) : (\n                            <FileText className=\"w-3 h-3\" />\n                          )}\n                          {lesson.duration}\n                        </div>\n                      </div>\n                    </div>\n                  </AccordionTrigger>\n                  <AccordionContent>\n                    <div className=\"pl-8 space-y-2\">\n                      <p className=\"text-sm text-muted-foreground\">\n                        {getLessonDescription(lesson)}\n                      </p>\n                      <Button size=\"sm\" variant=\"outline\">\n                        Start Lesson\n                      </Button>\n                    </div>\n                  </AccordionContent>\n                </AccordionItem>\n              );\n            })}\n          </Accordion>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":6928},"client/src/pages/courses.tsx":{"content":"import React from \"react\";\nimport { useApp } from \"../contexts/AppContext\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Progress } from \"../components/ui/progress\";\nimport { Play, Clock } from \"lucide-react\";\nimport coursesData from \"../data/courses.json\";\nimport { Course } from \"../types\";\nimport { useTranslation } from \"../hooks/useTranslation\";\n\nconst courses = coursesData as Course[];\n\nexport default function Courses() {\n  const { state } = useApp();\n  // All courses are now accessible\n  const { t, currentLanguage } = useTranslation();\n\n  const getCourseProgress = (courseId: string) => {\n    const progressList = state.userData.courseProgress || [];\n\n    const progress = progressList.find(\n      (p) => p.courseId === courseId\n    );\n\n    if (!progress) return 0;\n\n    const course = courses.find((c) => c.id === courseId);\n    if (!course) return 0;\n\n    // Calculate total lessons dynamically\n    const totalLessons = course.modules.reduce((total, module) => total + module.lessons.length, 0);\n\n    return Math.round(\n      (progress.completedLessons.length / totalLessons) * 100\n    );\n  };\n\n  const handleCourseClick = (course: Course) => {\n    // All courses are accessible now\n    window.location.hash = `#/course/${course.id}`;\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h1 className=\"text-2xl font-bold\">{t('courses.title')}</h1>\n        <p className=\"text-muted-foreground\">\n          {t('courses.subtitle')}\n        </p>\n      </div>\n\n      <div className=\"grid gap-4\">\n        {courses.map((course) => {\n          const hasAccessToCourse = true; // All courses accessible\n          const progress = getCourseProgress(course.id);\n\n          return (\n            <Card key={course.id} className=\"overflow-hidden\">\n              <div className=\"relative\">\n                <img\n                  src={course.image}\n                  alt={course.title}\n                  className=\"w-full h-48 object-cover\"\n                />\n              </div>\n\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  {course.title[currentLanguage] || course.title['en-NG']}\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  {course.description[currentLanguage] || course.description['en-NG']}\n                </p>\n                <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                  <Clock className=\"w-4 h-4\" />\n                  {course.modules.reduce((total, module) => total + module.lessons.length, 0)} {t('courses.lessons')}\n                </div>\n              </CardHeader>\n\n              <CardContent>\n                {progress > 0 && (\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span>{t('courses.progress')}</span>\n                      <span>{progress}%</span>\n                    </div>\n                    <Progress value={progress} />\n                  </div>\n                )}\n\n                <Button\n                  onClick={() => handleCourseClick(course)}\n                  className=\"w-full\"\n                >\n                  {progress > 0 ? (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      {t('courses.continueCourse')}\n                    </>\n                  ) : (\n                    <>\n                      <Play className=\"w-4 h-4 mr-2\" />\n                      {t('courses.startCourse')}\n                    </>\n                  )}\n                </Button>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":3887},"client/src/pages/dashboard.tsx":{"content":"import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Badge } from \"../components/ui/badge\";\nimport { \n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"../components/ui/popover\";\nimport {\n  Bell,\n  Moon,\n  Sun,\n  TrendingUp,\n  Droplets,\n  Zap,\n  Award,\n  Play,\n  Download,\n  Languages,\n} from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { useTheme } from \"../components/ThemeProvider\";\nimport { ChallengeCard } from \"../components/ChallengeCard\";\nimport { MealCard } from \"../components/MealCard\";\nimport { ExerciseCard } from \"../components/ExerciseCard\";\nimport { BadgeCard } from \"../components/BadgeCard\";\nimport { LanguageSwitcher } from \"../components/LanguageSwitcher\";\nimport { getCurrentStreak } from \"../utils/storage\";\nimport challengesData from \"../data/challenges.json\";\nimport mealsData from \"../data/meals.json\";\nimport exercisesData from \"../data/exercises.json\";\nimport { useLocation } from \"wouter\";\nimport { exportAllDataAsCSV } from \"../utils/csvExport\";\n\nexport default function Dashboard() {\n  const { t, getRandomQuote } = useTranslation();\n  const { state } = useApp();\n  const { theme, toggleTheme } = useTheme();\n  const [, setLocation] = useLocation();\n\n  const { userData } = state;\n  const streak = getCurrentStreak();\n\n  // Get today's data\n  const today = new Date().toISOString().split(\"T\")[0];\n  const todayWeight =\n    userData.weights.find((w) => w.date === today)?.weight ||\n    userData.userProfile.weight;\n  const todayWater =\n    userData.waterLog.find((w) => w.date === today)?.liters || 0;\n  const unlockedBadges = userData.badges.filter((b) => b.isUnlocked);\n\n  // Get active challenges\n  const activeChallenges = Object.values(userData.challenges).filter(\n    (c) => c.isActive,\n  );\n\n  // Get dynamic suggested meals based on time of day and favorites\n  const getTimeBasedMeals = () => {\n    const hour = new Date().getHours();\n    const favoriteMeals = userData.favorites?.meals || [];\n    \n    let categoryFilter;\n    if (hour < 10) categoryFilter = 'breakfast';\n    else if (hour < 15) categoryFilter = 'lunch';\n    else if (hour < 20) categoryFilter = 'dinner';\n    else categoryFilter = 'snack';\n    \n    // First try to get favorite meals in the right category\n    let filteredMeals = mealsData.filter(meal => \n      meal.category === categoryFilter && favoriteMeals.includes(meal.id)\n    );\n    \n    // If no favorites, get all meals in category\n    if (filteredMeals.length === 0) {\n      filteredMeals = mealsData.filter(meal => meal.category === categoryFilter);\n    }\n    \n    // Shuffle and get 2\n    const shuffled = filteredMeals.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, 2);\n  };\n  \n  const suggestedMeals = getTimeBasedMeals();\n\n  // Get exercise based on recent activity and difficulty progression\n  const getSmartExercise = () => {\n    const recentExercises = userData.exerciseLogs || [];\n    const lastWeekExercises = recentExercises.filter(log => {\n      const logDate = new Date(log.date);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return logDate > weekAgo;\n    });\n    \n    // Get difficulty progression\n    const difficulties = ['Light', 'Moderate', 'Advanced'];\n    const userDifficulties = lastWeekExercises.map(log => \n      exercisesData.find(ex => ex.id === log.exerciseId)?.difficulty\n    ).filter(Boolean);\n    \n    let targetDifficulty = 'Light'; // Default\n    if (userDifficulties.includes('Advanced')) targetDifficulty = 'Advanced';\n    else if (userDifficulties.includes('Moderate')) targetDifficulty = 'Moderate';\n    \n    // Get exercises not done recently in the target difficulty\n    const recentExerciseIds = lastWeekExercises.map(log => log.exerciseId);\n    const availableExercises = exercisesData.filter(ex => \n      ex.difficulty === targetDifficulty && !recentExerciseIds.includes(ex.id)\n    );\n    \n    return availableExercises.length > 0 \n      ? availableExercises[Math.floor(Math.random() * availableExercises.length)]\n      : exercisesData[Math.floor(Math.random() * exercisesData.length)];\n  };\n  \n  const quickExercise = getSmartExercise();\n\n  // Get recent achievements and progress\n  const recentBadges = unlockedBadges.slice(-3);\n  const recentMealLogs = (userData.mealLogs || []).slice(-5);\n  const weeklyCalories = recentMealLogs.reduce((sum, meal) => sum + (meal.calories || 0), 0);\n\n  // Get motivational quote\n  const dailyQuote = getRandomQuote();\n\n  const getGreeting = () => {\n    const hour = new Date().getHours();\n    if (hour < 12)\n      return t(\"dashboard.greeting\", { name: userData.userProfile.name });\n    if (hour < 18)\n      return t(\"dashboard.greeting\", {\n        name: userData.userProfile.name,\n      }).replace(\"morning\", \"afternoon\");\n    return t(\"dashboard.greeting\", { name: userData.userProfile.name }).replace(\n      \"morning\",\n      \"evening\",\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-40\">\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img\n                src=\"/logo.png\"\n                alt=\"My Reset Logo\"\n                className=\"w-10 h-10 rounded-full\"\n              />\n              <div>\n                <h1 className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                  NaijaReset\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                  {getGreeting()}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">\n                  {activeChallenges.length === 1 \n                    ? t(\"dashboard.activeChallengeCount\", { count: activeChallenges.length })\n                    : t(\"dashboard.activeChallengeCountPlural\", { count: activeChallenges.length })}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              {/* CSV Export */}\n              <Button\n                onClick={() => exportAllDataAsCSV(userData)}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-2 rounded-full text-green-600 hover:text-green-700\"\n              >\n                <Download className=\"w-6 h-6\" />\n              </Button>\n\n              {/* Dark Mode Toggle */}\n              <Button\n                onClick={toggleTheme}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-2 rounded-full\"\n              >\n                {theme === \"dark\" ? (\n                  <Sun className=\"w-6 h-6\" />\n                ) : (\n                  <Moon className=\"w-6 h-6\" />\n                )}\n              </Button>\n\n              {/* Language Switcher */}\n              <Popover>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"p-2 rounded-full\"\n                    data-testid=\"button-language-switcher\"\n                  >\n                    <Languages className=\"w-6 h-6\" />\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-64 p-4\" align=\"end\">\n                  <LanguageSwitcher />\n                </PopoverContent>\n              </Popover>\n\n              {/* Notification Bell */}\n              <Button\n                onClick={() => {\n                  if (activeChallenges.length > 0) {\n                    setLocation(\"/challenges\");\n                  } else {\n                    alert(\"No active challenges. Start a challenge to get notifications!\");\n                  }\n                }}\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"p-2 rounded-full relative hover:bg-gray-100 dark:hover:bg-gray-700\"\n              >\n                <Bell className=\"w-6 h-6\" />\n                {activeChallenges.length > 0 && (\n                  <span className=\"absolute -top-1 -right-1 bg-primary text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\n                    {activeChallenges.length}\n                  </span>\n                )}\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Motivational Quote */}\n      {dailyQuote && (\n        <div className=\"px-4 py-4\">\n          <Card className=\"bg-gradient-to-r from-primary/10 to-secondary/10 dark:from-primary/20 dark:to-secondary/20 border-none\">\n            <CardContent className=\"p-4\">\n              <p className=\"text-sm text-gray-700 dark:text-gray-200 italic text-center\">\n                \"{dailyQuote}\"\n              </p>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Quick Stats */}\n      <div className=\"px-4 py-2\">\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {t(\"dashboard.stats.currentWeight\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                    {todayWeight}\n                    {t(\"common.kg\")}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                  <TrendingUp className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {t(\"dashboard.stats.waterToday\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                    {todayWater}\n                    {t(\"common.liters\")}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-100 dark:bg-blue-900 rounded-full flex items-center justify-center\">\n                  <Droplets className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {t(\"dashboard.stats.streak\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                    {streak} {t(\"dashboard.stats.days\")}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-yellow-100 dark:bg-yellow-900 rounded-full flex items-center justify-center\">\n                  <Zap className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-sm hover:shadow-md transition-shadow\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    Calorias (semana)\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-800 dark:text-gray-100\">\n                    {weeklyCalories || 0}\n                  </p>\n                </div>\n                <div className=\"w-10 h-10 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center\">\n                  <Zap className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Active Challenges */}\n      <div className=\"px-4 py-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n            {t(\"dashboard.activeChallenges\")}\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/challenges\")}\n          >\n            View All\n          </Button>\n        </div>\n\n        {activeChallenges.length > 0 ? (\n          <div className=\"space-y-4\">\n            {activeChallenges.slice(0, 2).map((challenge) => (\n              <ChallengeCard\n                key={challenge.id}\n                challenge={challenge}\n                onViewDetails={() => setLocation(\"/challenges\")}\n              />\n            ))}\n          </div>\n        ) : (\n          <Card className=\"p-6 text-center\">\n            <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n              No active challenges. Start one to begin your wellness journey!\n            </p>\n            <Button\n              onClick={() => setLocation(\"/challenges\")}\n              className=\"bg-primary hover:bg-primary/90\"\n            >\n              Browse Challenges\n            </Button>\n          </Card>\n        )}\n      </div>\n\n      {/* Today's Meal Suggestions */}\n      <div className=\"px-4 py-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h2 className=\"text-xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n            {(() => {\n              const hour = new Date().getHours();\n              if (hour < 10) return \"☀️ Sugestões para o Café\";\n              if (hour < 15) return \"🍽️ Sugestões para o Almoço\";\n              if (hour < 20) return \"🌙 Sugestões para o Jantar\";\n              return \"🍪 Sugestões de Lanches\";\n            })()}\n          </h2>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/meals\")}\n          >\n            View All\n          </Button>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {suggestedMeals.map((meal) => (\n            <MealCard\n              key={meal.id}\n              meal={meal}\n              onLogMeal={() => {\n                /* Add meal logging logic */\n              }}\n            />\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Exercise */}\n      <div className=\"px-4 py-6\">\n        <h2 className=\"text-xl font-poppins font-bold text-gray-800 dark:text-gray-100 mb-4\">\n          {t(\"dashboard.quickExercise\")}\n        </h2>\n\n        <div className=\"max-w-md\">\n          <ExerciseCard\n            exercise={quickExercise}\n            onStart={() => {\n              /* Add exercise start logic */\n            }}\n          />\n        </div>\n      </div>\n\n      {/* Recent Achievements */}\n      {recentBadges.length > 0 && (\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h2 className=\"text-xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n              {t(\"dashboard.recentAchievements\")}\n            </h2>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setLocation(\"/badges\")}\n            >\n              View All\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n            {recentBadges.map((badge) => (\n              <BadgeCard key={badge.id} badge={badge} />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":16210},"client/src/pages/exercises.tsx":{"content":"import React, { useState } from \"react\";\nimport { Card, CardContent } from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Input } from \"../components/ui/input\";\nimport { Badge } from \"../components/ui/badge\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"../components/ui/tabs\";\nimport { Search, Filter, Heart, Play } from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { ExerciseCard } from \"../components/ExerciseCard\";\nimport exercisesData from \"../data/exercises.json\";\n\nexport default function Exercises() {\n  const { t } = useTranslation();\n  const { state } = useApp();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { userData } = state;\n  const favoriteExercises = exercisesData.filter((exercise) =>\n    userData.favorites.exercises.includes(exercise.id),\n  );\n\n  const filteredExercises = exercisesData.filter((exercise) => {\n    const exerciseName = typeof exercise.name === 'string' ? exercise.name : (exercise.name['en-NG'] || Object.values(exercise.name)[0]);\n    const exerciseDescription = typeof exercise.description === 'string' ? exercise.description : (exercise.description['en-NG'] || Object.values(exercise.description)[0]);\n    \n    const matchesSearch =\n      exerciseName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      exerciseDescription?.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory =\n      selectedCategory === \"all\" || exercise.category === selectedCategory;\n    // All exercises are now accessible\n    const matchesPlan = true;\n    return matchesSearch && matchesCategory;\n  });\n\n  const categories = [\"all\", \"Light\", \"Moderate\", \"Advanced\"];\n  const categoryCounts = {\n    all: exercisesData.length,\n    Light: exercisesData.filter((e) => e.category === \"Light\").length,\n    Moderate: exercisesData.filter((e) => e.category === \"Moderate\").length,\n    Advanced: exercisesData.filter((e) => e.category === \"Advanced\").length,\n  };\n\n  // All exercises are accessible now\n\n  const ExerciseStats = () => (\n    <div className=\"grid grid-cols-4 gap-2 mb-6\">\n      {categories.map((category) => (\n        <Card\n          key={category}\n          className={`text-center cursor-pointer transition-colors ${\n            selectedCategory === category\n              ? \"border-primary bg-primary/10\"\n              : \"hover:bg-gray-50 dark:hover:bg-gray-800\"\n          }`}\n          onClick={() => setSelectedCategory(category)}\n        >\n          <CardContent className=\"p-3\">\n            <div className=\"text-lg font-bold text-gray-800 dark:text-gray-100\">\n              {categoryCounts[category as keyof typeof categoryCounts]}\n            </div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">\n              {category === \"all\"\n                ? \"All\"\n                : t(`exercises.categories.${category}`)}\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n\n  const handleStartExercise = (exerciseId: string) => {\n    const userData = state.userData;\n    const today = new Date().toISOString().split(\"T\")[0];\n\n    const newExerciseEntry = {\n      exerciseId,\n      date: today,\n      duration: exercisesData.find((e) => e.id === exerciseId)?.duration || 0,\n      completed: true,\n    };\n\n    const updatedUserData = {\n      ...userData,\n      exerciseHistory: [...(userData.exerciseHistory || []), newExerciseEntry],\n    };\n\n    // Save to localStorage\n    localStorage.setItem(\n      \"wellness_tracker_data\",\n      JSON.stringify(updatedUserData),\n    );\n\n    // Check for badge unlocks\n    import(\"../utils/storage\").then(({ checkAndUnlockBadges }) => {\n      checkAndUnlockBadges();\n    });\n\n    const exercise = exercisesData.find((e) => e.id === exerciseId);\n    const exerciseName = typeof exercise?.name === 'string' ? exercise.name : (exercise?.name?.['en-NG'] || Object.values(exercise?.name || {})[0]);\n    \n    alert(\n      `Started ${exerciseName}! Keep up the good work!`,\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm\">\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                {t(\"exercises.title\")}\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                Home-friendly exercises for every fitness level\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        {/* Search Bar */}\n        <div className=\"relative mb-6\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search exercises...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pl-10 rounded-2xl\"\n          />\n        </div>\n\n        <ExerciseStats />\n\n        <Tabs defaultValue=\"all\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"all\">All Exercises</TabsTrigger>\n            <TabsTrigger value=\"favorites\">\n              Favorites ({favoriteExercises.length})\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"all\" className=\"mt-6\">\n            {/* Category Filter */}\n            <div className=\"flex space-x-2 mb-4 overflow-x-auto\">\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  variant={\n                    selectedCategory === category ? \"default\" : \"outline\"\n                  }\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  className=\"whitespace-nowrap\"\n                >\n                  {category === \"all\"\n                    ? \"All\"\n                    : t(`exercises.categories.${category}`)}\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {categoryCounts[category as keyof typeof categoryCounts]}\n                  </Badge>\n                </Button>\n              ))}\n            </div>\n\n\n            {filteredExercises.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {filteredExercises.map((exercise) => (\n                  <ExerciseCard\n                    key={exercise.id}\n                    exercise={exercise}\n                    onStart={() => handleStartExercise(exercise.id)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-6 text-center\">\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  No exercises found matching your criteria.\n                </p>\n              </Card>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"favorites\" className=\"mt-6\">\n            {favoriteExercises.length > 0 ? (\n              <div className=\"grid gap-4\">\n                {favoriteExercises.map((exercise) => (\n                  <ExerciseCard\n                    key={exercise.id}\n                    exercise={exercise}\n                    onStart={() => handleStartExercise(exercise.id)}\n                  />\n                ))}\n              </div>\n            ) : (\n              <Card className=\"p-6 text-center\">\n                <Heart className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  No favorite exercises yet. Start adding exercises to your\n                  favorites!\n                </p>\n                <Button\n                  onClick={() => setSelectedCategory(\"all\")}\n                  className=\"bg-primary hover:bg-primary/90\"\n                >\n                  Browse All Exercises\n                </Button>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8289},"client/src/pages/faq.tsx":{"content":"\nimport React from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from '../components/ui/accordion';\nimport { HelpCircle } from 'lucide-react';\nimport { useTranslation } from '../hooks/useTranslation';\nimport faqData from '../data/faq.json';\n\ninterface FAQItem {\n  id: string;\n  question: {\n    [key: string]: string;\n  };\n  answer: {\n    [key: string]: string;\n  };\n}\n\nconst faq = faqData as FAQItem[];\n\nexport default function FAQ() {\n  const { t, currentLanguage } = useTranslation();\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <div className=\"flex items-center justify-center gap-2\">\n          <HelpCircle className=\"w-6 h-6 text-primary\" />\n          <h1 className=\"text-2xl font-bold\">{t('faq.title')}</h1>\n        </div>\n        <p className=\"text-muted-foreground\">\n          {t('faq.subtitle')}\n        </p>\n      </div>\n\n      <Card>\n        <CardHeader>\n          <CardTitle>{t('faq.frequentQuestions')}</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Accordion type=\"single\" collapsible className=\"space-y-2\">\n            {faq.map((item) => (\n              <AccordionItem key={item.id} value={item.id}>\n                <AccordionTrigger className=\"text-left\">\n                  {item.question[currentLanguage] || item.question['en-NG'] || 'Question'}\n                </AccordionTrigger>\n                <AccordionContent className=\"text-muted-foreground\">\n                  {item.answer[currentLanguage] || item.answer['en-NG'] || 'Answer'}\n                </AccordionContent>\n              </AccordionItem>\n            ))}\n          </Accordion>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1808},"client/src/pages/lesson.tsx":{"content":"import React from 'react';\nimport { useApp } from '../contexts/AppContext';\nimport { Button } from '../components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { ArrowLeft, ArrowRight, CheckCircle2, Clock, Video, FileText } from 'lucide-react';\nimport coursesData from '../data/courses.json';\nimport { Course, CourseProgress } from '../types';\nimport { RouteComponentProps } from 'wouter';\nimport { useTranslation } from '../hooks/useTranslation';\n\nconst courses = coursesData as Course[];\n\ninterface LessonPageProps {\n  courseId: string;\n  moduleId: string;\n  lessonId: string;\n}\n\nexport default function LessonPage({ courseId, moduleId, lessonId }: LessonPageProps) {\n  const { state, dispatch } = useApp();\n  const { t } = useTranslation();\n\n  const course = courses.find(c => c.id === courseId);\n  const module = course?.modules.find(m => m.id === moduleId);\n  const lesson = module?.lessons.find(l => l.id === lessonId);\n  const progress = state.userData.courseProgress.find(p => p.courseId === courseId);\n\n  if (!course || !module || !lesson) {\n    return (\n      <div className=\"p-4 text-center\">\n        <h1 className=\"text-2xl font-bold mb-4\">{t('Lesson not found')}</h1>\n        <Button onClick={() => window.location.hash = '#/courses'}>\n          {t('Back to Courses')}\n        </Button>\n      </div>\n    );\n  }\n\n  const isCompleted = progress?.completedLessons.includes(lessonId) || false;\n\n  const markAsCompleted = () => {\n    if (isCompleted) return;\n\n    // Update course progress\n    let updatedCourseProgress;\n    if (progress) {\n      const updatedProgress = {\n        ...progress,\n        completedLessons: [...progress.completedLessons, lessonId],\n        lastAccessedAt: new Date().toISOString()\n      };\n      updatedCourseProgress = state.userData.courseProgress.map(p => \n        p.courseId === courseId ? updatedProgress : p\n      );\n    } else {\n      // Create new progress if it doesn't exist\n      const newProgress = {\n        courseId,\n        completedLessons: [lessonId],\n        currentModule: moduleId,\n        currentLesson: lessonId,\n        startedAt: new Date().toISOString(),\n        lastAccessedAt: new Date().toISOString()\n      };\n      updatedCourseProgress = [...state.userData.courseProgress, newProgress];\n    }\n\n    // Update lesson progress\n    const existingLessonProgress = state.userData.lessonProgress || [];\n    const existingLesson = existingLessonProgress.find(\n      lp => lp.lessonId === lessonId && lp.courseId === courseId\n    );\n\n    let updatedLessonProgress;\n    if (existingLesson) {\n      updatedLessonProgress = existingLessonProgress.map(lp =>\n        lp.lessonId === lessonId && lp.courseId === courseId\n          ? { ...lp, completed: true, completedAt: new Date().toISOString() }\n          : lp\n      );\n    } else {\n      const newLessonProgress = {\n        lessonId,\n        courseId,\n        moduleId,\n        completed: true,\n        completedAt: new Date().toISOString()\n      };\n      updatedLessonProgress = [...existingLessonProgress, newLessonProgress];\n    }\n\n    // Save to localStorage and state\n    const updatedUserData = {\n      ...state.userData,\n      courseProgress: updatedCourseProgress,\n      lessonProgress: updatedLessonProgress\n    };\n\n    localStorage.setItem('naijaresetUserData', JSON.stringify(updatedUserData));\n\n    dispatch({\n      type: 'SET_USER_DATA',\n      payload: updatedUserData\n    });\n  };\n\n  const getNextLesson = () => {\n    const allLessons: Array<{ moduleId: string; lessonId: string; lesson: any }> = [];\n\n    course.modules.forEach(mod => {\n      mod.lessons.forEach(les => {\n        allLessons.push({ moduleId: mod.id, lessonId: les.id, lesson: les });\n      });\n    });\n\n    const currentIndex = allLessons.findIndex(l => l.lessonId === lessonId);\n    return currentIndex < allLessons.length - 1 ? allLessons[currentIndex + 1] : null;\n  };\n\n  const getPrevLesson = () => {\n    const allLessons: Array<{ moduleId: string; lessonId: string; lesson: any }> = [];\n\n    course.modules.forEach(mod => {\n      mod.lessons.forEach(les => {\n        allLessons.push({ moduleId: mod.id, lessonId: les.id, lesson: les });\n      });\n    });\n\n    const currentIndex = allLessons.findIndex(l => l.lessonId === lessonId);\n    return currentIndex > 0 ? allLessons[currentIndex - 1] : null;\n  };\n\n  const nextLesson = getNextLesson();\n  const prevLesson = getPrevLesson();\n\n  const goToNextLesson = () => {\n    if (nextLesson) {\n      // Update current lesson in progress\n      if (progress) {\n        const updatedProgress = {\n          ...progress,\n          currentModule: nextLesson.moduleId,\n          currentLesson: nextLesson.lessonId,\n          lastAccessedAt: new Date().toISOString()\n        };\n\n        const updatedCourseProgress = state.userData.courseProgress.map(p => \n          p.courseId === courseId ? updatedProgress : p\n        );\n\n        dispatch({\n          type: 'SET_USER_DATA',\n          payload: {\n            ...state.userData,\n            courseProgress: updatedCourseProgress\n          }\n        });\n      }\n\n      window.location.hash = `#/lesson/${courseId}/${nextLesson.moduleId}/${nextLesson.lessonId}`;\n    }\n  };\n\n  const goToPrevLesson = () => {\n    if (prevLesson) {\n      window.location.hash = `#/lesson/${courseId}/${prevLesson.moduleId}/${prevLesson.lessonId}`;\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-6\">\n      <Button\n        variant=\"ghost\"\n        onClick={() => window.location.hash = `#/course/${courseId}`}\n        className=\"mb-4\"\n      >\n        <ArrowLeft className=\"w-4 h-4 mr-2\" />\n        {t('Back to Course')}\n      </Button>\n\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-2\">\n            <span>{course.title}</span>\n            <span>•</span>\n            <span>{module.title}</span>\n          </div>\n\n          <CardTitle className=\"flex items-center gap-3\">\n            {lesson.type === 'video' ? (\n              <Video className=\"w-5 h-5 text-blue-500\" />\n            ) : (\n              <FileText className=\"w-5 h-5 text-green-500\" />\n            )}\n            {lesson.title}\n            {isCompleted && (\n              <CheckCircle2 className=\"w-5 h-5 text-green-500\" />\n            )}\n          </CardTitle>\n\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Clock className=\"w-4 h-4\" />\n            {lesson.duration}\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {lesson.type === 'video' ? (\n            <div className=\"space-y-4\">\n              <div className=\"aspect-video\">\n                <iframe\n                  src={lesson.videoUrl}\n                  className=\"w-full h-full rounded-lg\"\n                  allowFullScreen\n                  title={lesson.title}\n                />\n              </div>\n              {lesson.description && (\n                <p className=\"text-muted-foreground\">{lesson.description}</p>\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              <div className=\"prose prose-sm max-w-none dark:prose-invert\">\n                {lesson.content?.text.split('\\n').map((paragraph, index) => {\n                  if (paragraph.startsWith('# ')) {\n                    return <h1 key={index} className=\"text-2xl font-bold mb-4\">{paragraph.slice(2)}</h1>;\n                  }\n                  if (paragraph.startsWith('## ')) {\n                    return <h2 key={index} className=\"text-xl font-semibold mb-3 mt-6\">{paragraph.slice(3)}</h2>;\n                  }\n                  if (paragraph.startsWith('### ')) {\n                    return <h3 key={index} className=\"text-lg font-medium mb-2 mt-4\">{paragraph.slice(4)}</h3>;\n                  }\n                  if (paragraph.startsWith('- ')) {\n                    return <li key={index} className=\"ml-6\">{paragraph.slice(2)}</li>;\n                  }\n                  if (paragraph.startsWith('**') && paragraph.endsWith('**')) {\n                    return <p key={index} className=\"font-semibold mb-2\">{paragraph.slice(2, -2)}</p>;\n                  }\n                  if (paragraph.trim()) {\n                    return <p key={index} className=\"mb-4\">{paragraph}</p>;\n                  }\n                  return null;\n                })}\n              </div>\n\n              {lesson.content?.images && lesson.content.images.length > 0 && (\n                <div className=\"space-y-4\">\n                  {lesson.content.images.map((image, index) => (\n                    <img\n                      key={index}\n                      src={image}\n                      alt={`Imagem da aula ${index + 1}`}\n                      className=\"w-full rounded-lg\"\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          )}\n\n          <div className=\"flex flex-col sm:flex-row gap-3 pt-6 border-t\">\n            <div className=\"flex gap-3\">\n              <Button\n                variant=\"outline\"\n                onClick={goToPrevLesson}\n                disabled={!prevLesson}\n              >\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                {t('Previous')}\n              </Button>\n\n              <Button\n                variant=\"outline\"\n                onClick={goToNextLesson}\n                disabled={!nextLesson}\n              >\n                {t('Next')}\n                <ArrowRight className=\"w-4 h-4 ml-2\" />\n              </Button>\n            </div>\n\n            <Button\n              onClick={markAsCompleted}\n              disabled={isCompleted}\n              className=\"sm:ml-auto\"\n            >\n              {isCompleted ? (\n                <>\n                  <CheckCircle2 className=\"w-4 h-4 mr-2\" />\n                  {t('Completed')}\n                </>\n              ) : (\n                t('Mark as Completed')\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":10048},"client/src/pages/meals.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Badge } from \"../components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"../components/ui/dialog\";\nimport {\n  Utensils,\n  Search,\n  Filter,\n  Eye,\n  Plus,\n  Clock,\n  Target,\n  Globe,\n  Lock,\n  ChefHat,\n  Heart,\n  Star,\n} from \"lucide-react\";\nimport { Input } from \"../components/ui/input\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { MealLogDialog } from \"../components/MealLogDialog\";\nimport mealsData from \"../data/meals.json\";\n\ninterface Meal {\n  id: string;\n  name: {\n    [key: string]: string;\n  };\n  calories: number;\n  protein: number;\n  carbs: number;\n  fats: number;\n  category: string;\n  countries: string[];\n  image?: string;\n  ingredients?: {\n    [key: string]: string[];\n  };\n  instructions?: {\n    [key: string]: string[];\n  };\n}\n\nconst meals = mealsData as Meal[];\n\nfunction Meals() {\n  const { t, currentLanguage } = useTranslation();\n  const { state, dispatch } = useApp();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [countryFilter, setCountryFilter] = useState(\"all\");\n  const [showFavoritesOnly, setShowFavoritesOnly] = useState(false);\n  const [selectedMeal, setSelectedMeal] = useState<Meal | null>(null);\n  const [mealToLog, setMealToLog] = useState<Meal | null>(null);\n  const [showLogDialog, setShowLogDialog] = useState(false);\n\n  // Get favorite meals from user data\n  const favoriteMeals = state.userData.favorites?.meals || [];\n\n  // Extract unique countries from all meals\n  const availableCountries = Array.from(\n    new Set(meals.flatMap((meal) => meal.countries)),\n  ).sort();\n\n  // Toggle favorite meal\n  const toggleFavorite = (mealId: string) => {\n    dispatch({\n      type: \"TOGGLE_FAVORITE\",\n      payload: {\n        type: \"meals\",\n        id: mealId,\n      },\n    });\n  };\n\n  // Check if meal is favorite\n  const isFavorite = (mealId: string) => {\n    return favoriteMeals.includes(mealId);\n  };\n\n  const logMeal = (meal: Meal, date: string) => {\n    // Update daily calories for the selected date\n    const calories = state.userData.calories || [];\n    const existing = calories.find(c => c.date === date);\n    const updatedCalories = calories.filter(c => c.date !== date);\n    const newTotal = (existing?.calories || 0) + meal.calories;\n    \n    updatedCalories.push({\n      date: date,\n      calories: newTotal,\n    });\n\n    dispatch({\n      type: \"SET_USER_DATA\",\n      payload: {\n        ...state.userData,\n        calories: updatedCalories,\n      },\n    });\n\n    console.log(\n      \"Logging meal:\",\n      meal.name[currentLanguage] || meal.name[\"en-US\"],\n      \"for date:\",\n      date,\n    );\n  };\n\n  const handleLogMealClick = (meal: Meal) => {\n    setMealToLog(meal);\n    setShowLogDialog(true);\n  };\n\n  const handleConfirmLog = (date: string) => {\n    if (mealToLog) {\n      logMeal(mealToLog, date);\n      setMealToLog(null);\n    }\n  };\n\n  const getCategoryVariant = (category: string) => {\n    switch (category) {\n      case \"breakfast\":\n        return \"secondary\";\n      case \"lunch\":\n        return \"default\";\n      case \"dinner\":\n        return \"destructive\";\n      case \"snack\":\n        return \"outline\";\n      default:\n        return \"default\";\n    }\n  };\n\n  const filteredMeals = meals.filter((meal) => {\n    const searchTermLower = searchTerm.toLowerCase();\n\n    const mealName =\n      meal.name[currentLanguage] ||\n      meal.name[\"en-US\"] ||\n      Object.values(meal.name)[0] ||\n      \"\";\n\n    const mealNameLower = mealName.toLowerCase();\n\n    // Check if search term matches meal name\n    const matchesName = mealNameLower.includes(searchTermLower);\n    \n    // Check if search term matches any ingredient\n    let matchesIngredients = false;\n    if (meal.ingredients && searchTerm.trim()) {\n      const ingredients = meal.ingredients[currentLanguage] || meal.ingredients[\"en-US\"] || [];\n      matchesIngredients = ingredients.some((ingredient: string) => \n        ingredient.toLowerCase().includes(searchTermLower)\n      );\n    }\n\n    const matchesSearch = matchesName || matchesIngredients;\n    const matchesCategory =\n      categoryFilter === \"all\" || meal.category === categoryFilter;\n    const matchesCountry =\n      countryFilter === \"all\" || meal.countries.includes(countryFilter);\n    const matchesFavorites = !showFavoritesOnly || isFavorite(meal.id);\n\n    return matchesSearch && matchesCategory && matchesCountry && matchesFavorites;\n  });\n\n  return (\n    <div className=\"container mx-auto py-6 px-4\">\n      <Card className=\"shadow-lg\">\n        <CardHeader className=\"bg-gradient-to-r from-green-50 to-blue-50 dark:from-green-900/20 dark:to-blue-900/20\">\n          <CardTitle className=\"text-3xl font-bold text-center mb-2\">\n            <Utensils className=\"w-8 h-8 inline mr-3\" />\n            {t(\"meals.title\")}\n          </CardTitle>\n          <p className=\"text-center text-muted-foreground\">\n            {t(\"meals.subtitle\")}\n          </p>\n        </CardHeader>\n        <CardContent className=\"p-6\">\n          <div className=\"grid gap-6\">\n            {/* Search and Filter Controls */}\n            <div className=\"flex flex-col md:flex-row gap-4\">\n              <div className=\"flex-1 relative\">\n                <Search className=\"w-5 h-5 text-gray-500 absolute left-3 top-1/2 transform -translate-y-1/2\" />\n                <Input\n                  type=\"search\"\n                  placeholder={t(\"meals.search\") || \"Buscar por nome ou ingrediente...\"}\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"w-5 h-5 text-gray-500\" />\n                <Select\n                  value={categoryFilter}\n                  onValueChange={setCategoryFilter}\n                >\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue placeholder={t(\"meals.filter\")} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">\n                      {t(\"meals.categories.all\")}\n                    </SelectItem>\n                    <SelectItem value=\"breakfast\">\n                      {t(\"meals.categories.breakfast\")}\n                    </SelectItem>\n                    <SelectItem value=\"lunch\">\n                      {t(\"meals.categories.lunch\")}\n                    </SelectItem>\n                    <SelectItem value=\"dinner\">\n                      {t(\"meals.categories.dinner\")}\n                    </SelectItem>\n                    <SelectItem value=\"snack\">\n                      {t(\"meals.categories.snack\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={countryFilter} onValueChange={setCountryFilter}>\n                  <SelectTrigger className=\"w-[200px]\">\n                    <SelectValue\n                      placeholder={t(\"meals.countryFilter\")}\n                    />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">\n                      {t(\"meals.countries.all\")}\n                    </SelectItem>\n                    {availableCountries.map((country) => (\n                      <SelectItem key={country} value={country}>\n                        {t(`meals.countries.${country}`)}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                {/* Favorites Toggle */}\n                <Button\n                  variant={showFavoritesOnly ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setShowFavoritesOnly(!showFavoritesOnly)}\n                  className=\"flex items-center gap-2\"\n                >\n                  <Heart className={`w-4 h-4 ${showFavoritesOnly ? \"fill-current\" : \"\"}`} />\n                  {t(\"meals.favoritesFilter\")}\n                </Button>\n              </div>\n            </div>\n\n            {/* Results Count */}\n            <div className=\"text-sm text-muted-foreground\">\n              {filteredMeals.length === 1 \n                ? t(\"meals.resultsCount\", { count: filteredMeals.length })\n                : t(\"meals.resultsCountPlural\", { count: filteredMeals.length })}\n            </div>\n\n            {/* Meals Grid */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {filteredMeals.map((meal) => {\n                return (\n                  <Card\n                    key={meal.id}\n                    className=\"overflow-hidden hover:shadow-lg transition-shadow duration-200\"\n                  >\n                    {/* Meal Image */}\n                    <div className=\"aspect-video w-full overflow-hidden\">\n                      {meal.image ? (\n                        <img\n                          src={meal.image}\n                          alt={meal.name[currentLanguage] || meal.name[\"en-US\"]}\n                          className=\"w-full h-full object-cover hover:scale-105 transition-transform duration-200\"\n                        />\n                      ) : (\n                        <div className=\"flex items-center justify-center h-full bg-gray-200 dark:bg-gray-700\">\n                          <Utensils className=\"w-16 h-16 text-gray-400\" />\n                        </div>\n                      )}\n                    </div>\n\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-start justify-between gap-2\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center gap-2\">\n                            <CardTitle className=\"text-lg line-clamp-2\">\n                              {meal.name[currentLanguage] || meal.name[\"en-US\"]}\n                            </CardTitle>\n                          </div>\n                          <Badge\n                            variant={getCategoryVariant(meal.category)}\n                            className=\"shrink-0 mt-1\"\n                          >\n                            {t(`meals.categories.${meal.category}`)}\n                          </Badge>\n\n                          {/* Show countries */}\n                          <div className=\"flex flex-wrap gap-1 mt-2\">\n                            {meal.countries.slice(0, 2).map((country) => (\n                              <Badge\n                                key={country}\n                                variant=\"outline\"\n                                className=\"text-xs\"\n                              >\n                                <Globe className=\"w-3 h-3 mr-1\" />\n                                {country}\n                              </Badge>\n                            ))}\n                            {meal.countries.length > 2 && (\n                              <Badge variant=\"outline\" className=\"text-xs\">\n                                +{meal.countries.length - 2} more\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        \n                        {/* Favorite Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => toggleFavorite(meal.id)}\n                          className=\"shrink-0\"\n                        >\n                          <Heart \n                            className={`w-5 h-5 ${isFavorite(meal.id) ? \"fill-red-500 text-red-500\" : \"text-muted-foreground\"}`} \n                          />\n                        </Button>\n                      </div>\n                    </CardHeader>\n\n                    <CardContent className=\"space-y-4\">\n                      <div className=\"grid grid-cols-4 gap-2 text-center\">\n                        <div className=\"bg-orange-50 dark:bg-orange-900/20 p-2 rounded\">\n                          <div className=\"text-xl font-bold text-orange-600\">\n                            {meal.calories}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {t(\"meals.calories\")}\n                          </div>\n                        </div>\n                        <div className=\"bg-blue-50 dark:bg-blue-900/20 p-2 rounded\">\n                          <div className=\"text-lg font-semibold text-blue-600\">\n                            {meal.protein}g\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {t(\"meals.protein\")}\n                          </div>\n                        </div>\n                        <div className=\"bg-green-50 dark:bg-green-900/20 p-2 rounded\">\n                          <div className=\"text-lg font-semibold text-green-600\">\n                            {meal.carbs}g\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {t(\"meals.carbs\")}\n                          </div>\n                        </div>\n                        <div className=\"bg-purple-50 dark:bg-purple-900/20 p-2 rounded\">\n                          <div className=\"text-lg font-semibold text-purple-600\">\n                            {meal.fats}g\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {t(\"meals.fats\")}\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-2 justify-center\">\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              className=\"flex-1 text-xs px-3 py-2 flex items-center justify-center min-w-0\"\n                              onClick={() => setSelectedMeal(meal)}\n                            >\n                              <Eye className=\"w-4 h-4 mr-1 shrink-0\" />\n                              <span className=\"text-xs truncate\">{t(\"meals.view\")}</span>\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n                            <DialogHeader>\n                              <DialogTitle className=\"text-xl\">\n                                {meal.name[currentLanguage] ||\n                                  meal.name[\"en-US\"]}\n                              </DialogTitle>\n                            </DialogHeader>\n\n                            <div className=\"space-y-6\">\n                              {meal.image && (\n                                <img\n                                  src={meal.image}\n                                  alt={\n                                    meal.name[currentLanguage] ||\n                                    meal.name[\"en-US\"]\n                                  }\n                                  className=\"w-full h-64 object-cover rounded-lg\"\n                                />\n                              )}\n\n                              {/* Detailed Macronutrients */}\n                              <div className=\"grid grid-cols-4 gap-4 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                                <div className=\"text-center\">\n                                  <Target className=\"w-6 h-6 mx-auto mb-1 text-orange-500\" />\n                                  <div className=\"font-bold text-xl text-orange-600\">\n                                    {meal.calories}\n                                  </div>\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {t(\"meals.calories\")}\n                                  </div>\n                                </div>\n                                <div className=\"text-center\">\n                                  <div className=\"w-6 h-6 mx-auto mb-1 bg-blue-500 rounded\"></div>\n                                  <div className=\"font-semibold text-lg text-blue-600\">\n                                    {meal.protein}g\n                                  </div>\n                                  <div className=\"text-sm text-muted-foreground\">\n                                    {t(\"meals.protein\")}\n                                  </div>\n                                </div>\n                                <div className=\"text-center\">\n                                  <div className=\"w-6 h-6 mx-auto mb-1 bg-green-500 rounded\"></div>\n                                  <div className=\"font-semibold text-lg text-green-600\">\n                                    {meal.carbs}g\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {t(\"meals.carbs\")}\n                                  </div>\n                                </div>\n                                <div className=\"text-center\">\n                                  <div className=\"w-6 h-6 mx-auto mb-1 bg-purple-500 rounded\"></div>\n                                  <div className=\"font-semibold text-lg text-purple-600\">\n                                    {meal.fats}g\n                                  </div>\n                                  <div className=\"text-xs text-muted-foreground\">\n                                    {t(\"meals.fats\")}\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Ingredients */}\n                              {meal.ingredients && (\n                                <div className=\"space-y-3\">\n                                  <h4 className=\"font-semibold text-lg flex items-center gap-2\">\n                                    <ChefHat className=\"w-5 h-5\" />\n                                    {t(\"meals.ingredients\") || \"Ingredientes\"}\n                                  </h4>\n                                  <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                                    <ul className=\"space-y-2\">\n                                      {(meal.ingredients[currentLanguage] || meal.ingredients[\"en-US\"] || []).map((ingredient: string, index: number) => (\n                                        <li key={index} className=\"text-sm flex items-start gap-2\">\n                                          <div className=\"w-2 h-2 bg-green-500 rounded-full mt-2 flex-shrink-0\"></div>\n                                          <span className=\"leading-relaxed\">{ingredient}</span>\n                                        </li>\n                                      ))}\n                                    </ul>\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* Preparation Instructions */}\n                              {meal.instructions && (\n                                <div className=\"space-y-3\">\n                                  <h4 className=\"font-semibold text-lg flex items-center gap-2\">\n                                    <Clock className=\"w-5 h-5\" />\n                                    {t(\"meals.preparation\") || \"Preparo\"}\n                                  </h4>\n                                  <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                                    <p className=\"text-sm leading-relaxed\">\n                                      {meal.instructions[currentLanguage] ||\n                                        (meal.instructions &&\n                                          meal.instructions[\"en-US\"])}\n                                    </p>\n                                  </div>\n                                </div>\n                              )}\n\n                              {/* Category Badge */}\n                              <div className=\"flex justify-center\">\n                                <Badge\n                                  variant={getCategoryVariant(meal.category)}\n                                  className=\"text-sm px-4 py-1\"\n                                >\n                                  {t(`meals.categories.${meal.category}`)}\n                                </Badge>\n                              </div>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n                        <Button\n                          className=\"flex-1 text-xs px-3 py-2 flex items-center justify-center min-w-0\"\n                          onClick={() => handleLogMealClick(meal)}\n                        >\n                          <Plus className=\"w-4 h-4 mr-1 shrink-0\" />\n                          <span className=\"text-xs truncate\">{t(\"meals.logMeal\")}</span>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            {/* No Results Message */}\n            {filteredMeals.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Utensils className=\"w-16 h-16 mx-auto text-muted-foreground mb-4\" />\n                <h3 className=\"text-lg font-semibold mb-2\">{t('meals.noMealsFound')}</h3>\n                <p className=\"text-muted-foreground\">\n                  {t('meals.adjustSearchFilters')}\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Meal Log Dialog */}\n      <MealLogDialog\n        isOpen={showLogDialog}\n        onClose={() => setShowLogDialog(false)}\n        onConfirm={handleConfirmLog}\n        mealName={\n          mealToLog\n            ? mealToLog.name[currentLanguage] || mealToLog.name[\"en-US\"]\n            : \"\"\n        }\n      />\n    </div>\n  );\n}\n\nexport default Meals;\n","size_bytes":22564},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/onboarding.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { Checkbox } from \"../components/ui/checkbox\";\nimport { Progress } from \"../components/ui/progress\";\nimport { ArrowLeft, ArrowRight } from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport { UserProfile } from \"../types\";\n\nconst TOTAL_STEPS = 8;\n\nexport default function Onboarding() {\n  const [, setLocation] = useLocation();\n  const { t } = useTranslation();\n  const { updateUserProfile, dispatch } = useApp();\n\n  const [currentStep, setCurrentStep] = useState(1);\n  const [profile, setProfile] = useState<Partial<UserProfile>>({\n    name: \"\",\n    age: 0,\n    height: 0,\n    weight: 0,\n    targetWeight: 0,\n    gender: \"other\",\n    exerciseLevel: \"sedentary\",\n    diet: [],\n    language: \"en-NG\",\n  });\n\n  const updateProfile = (field: keyof UserProfile, value: any) => {\n    setProfile((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleDietToggle = (diet: string, checked: boolean) => {\n    setProfile((prev) => ({\n      ...prev,\n      diet: checked\n        ? [...(prev.diet || []), diet]\n        : (prev.diet || []).filter((d) => d !== diet),\n    }));\n  };\n\n  const nextStep = () => {\n    if (currentStep < TOTAL_STEPS) {\n      setCurrentStep(currentStep + 1);\n    } else {\n      // Complete onboarding\n      updateUserProfile(profile as UserProfile);\n      dispatch({ type: \"SET_ONBOARDED\", payload: true });\n      setLocation(\"/dashboard\");\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const isStepValid = () => {\n    switch (currentStep) {\n      case 1:\n        return profile.name && profile.name.length > 0;\n      case 2:\n        return profile.age && profile.age > 0;\n      case 3:\n        return profile.height && profile.height > 0;\n      case 4:\n        return profile.weight && profile.weight > 0;\n      case 5:\n        return profile.targetWeight && profile.targetWeight > 0;\n      case 6:\n        return profile.gender !== undefined;\n      case 7:\n        return profile.exerciseLevel !== undefined;\n      case 8:\n        return true; // Diet preferences are optional\n      default:\n        return false;\n    }\n  };\n\n  const progressPercentage = (currentStep / TOTAL_STEPS) * 100;\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"name\">{t(\"onboarding.fields.name\")}</Label>\n            <Input\n              id=\"name\"\n              type=\"text\"\n              placeholder={t(\"onboarding.fields.namePlaceholder\")}\n              value={profile.name || \"\"}\n              onChange={(e) => updateProfile(\"name\", e.target.value)}\n              className=\"rounded-2xl\"\n            />\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"age\">{t(\"onboarding.fields.age\")}</Label>\n            <Input\n              id=\"age\"\n              type=\"number\"\n              placeholder={t(\"onboarding.fields.agePlaceholder\")}\n              value={profile.age || \"\"}\n              onChange={(e) =>\n                updateProfile(\"age\", parseInt(e.target.value) || 0)\n              }\n              className=\"rounded-2xl\"\n            />\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"height\">{t(\"onboarding.fields.height\")}</Label>\n            <Input\n              id=\"height\"\n              type=\"number\"\n              placeholder={t(\"onboarding.fields.heightPlaceholder\")}\n              value={profile.height || \"\"}\n              onChange={(e) =>\n                updateProfile(\"height\", parseInt(e.target.value) || 0)\n              }\n              className=\"rounded-2xl\"\n            />\n          </div>\n        );\n\n      case 4:\n        return (\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"weight\">{t(\"onboarding.fields.weight\")}</Label>\n            <Input\n              id=\"weight\"\n              type=\"number\"\n              placeholder={t(\"onboarding.fields.weightPlaceholder\")}\n              value={profile.weight || \"\"}\n              onChange={(e) =>\n                updateProfile(\"weight\", parseInt(e.target.value) || 0)\n              }\n              className=\"rounded-2xl\"\n            />\n          </div>\n        );\n\n      case 5:\n        return (\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"targetWeight\">\n              {t(\"onboarding.fields.targetWeight\")}\n            </Label>\n            <Input\n              id=\"targetWeight\"\n              type=\"number\"\n              placeholder={t(\"onboarding.fields.targetWeightPlaceholder\")}\n              value={profile.targetWeight || \"\"}\n              onChange={(e) =>\n                updateProfile(\"targetWeight\", parseInt(e.target.value) || 0)\n              }\n              className=\"rounded-2xl\"\n            />\n          </div>\n        );\n\n      case 6:\n        return (\n          <div className=\"space-y-4\">\n            <Label>{t(\"onboarding.fields.gender\")}</Label>\n            <Select\n              value={profile.gender}\n              onValueChange={(value) => updateProfile(\"gender\", value)}\n            >\n              <SelectTrigger className=\"rounded-2xl\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"male\">\n                  {t(\"onboarding.fields.genderOptions.male\")}\n                </SelectItem>\n                <SelectItem value=\"female\">\n                  {t(\"onboarding.fields.genderOptions.female\")}\n                </SelectItem>\n                <SelectItem value=\"other\">\n                  {t(\"onboarding.fields.genderOptions.other\")}\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        );\n\n      case 7:\n        return (\n          <div className=\"space-y-4\">\n            <Label>{t(\"onboarding.fields.exerciseLevel\")}</Label>\n            <Select\n              value={profile.exerciseLevel}\n              onValueChange={(value) => updateProfile(\"exerciseLevel\", value)}\n            >\n              <SelectTrigger className=\"rounded-2xl\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"sedentary\">\n                  {t(\"onboarding.fields.exerciseOptions.sedentary\")}\n                </SelectItem>\n                <SelectItem value=\"light\">\n                  {t(\"onboarding.fields.exerciseOptions.light\")}\n                </SelectItem>\n                <SelectItem value=\"moderate\">\n                  {t(\"onboarding.fields.exerciseOptions.moderate\")}\n                </SelectItem>\n                <SelectItem value=\"active\">\n                  {t(\"onboarding.fields.exerciseOptions.active\")}\n                </SelectItem>\n                <SelectItem value=\"very_active\">\n                  {t(\"onboarding.fields.exerciseOptions.very_active\")}\n                </SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        );\n\n      case 8:\n        const dietOptions = [\n          \"none\",\n          \"vegetarian\",\n          \"vegan\",\n          \"halal\",\n          \"kosher\",\n          \"gluten_free\",\n          \"dairy_free\",\n        ];\n        return (\n          <div className=\"space-y-4\">\n            <Label>{t(\"onboarding.fields.diet\")}</Label>\n            <div className=\"space-y-3\">\n              {dietOptions.map((diet) => (\n                <div key={diet} className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id={diet}\n                    checked={(profile.diet || []).includes(diet)}\n                    onCheckedChange={(checked) =>\n                      handleDietToggle(diet, checked as boolean)\n                    }\n                  />\n                  <Label htmlFor={diet} className=\"text-sm\">\n                    {t(`onboarding.fields.dietOptions.${diet}`)}\n                  </Label>\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 py-8 px-4\">\n      <div className=\"max-w-md mx-auto\">\n        <Card className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-lg\">\n          <CardHeader>\n            <div className=\"flex items-center justify-between mb-4\">\n              <CardTitle className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                {t(\"onboarding.title\")}\n              </CardTitle>\n              <div className=\"bg-gray-200 dark:bg-gray-700 rounded-full px-3 py-1 text-sm font-medium text-gray-600 dark:text-gray-300\">\n                {t(\"onboarding.step\", {\n                  current: currentStep,\n                  total: TOTAL_STEPS,\n                })}\n              </div>\n            </div>\n\n            {/* Progress Bar */}\n            <Progress value={progressPercentage} className=\"w-full h-2 mb-6\" />\n          </CardHeader>\n\n          <CardContent>\n            <div className=\"space-y-6\">\n              {renderStepContent()}\n\n              <div className=\"flex space-x-3 pt-4\">\n                {currentStep > 1 && (\n                  <Button\n                    onClick={prevStep}\n                    variant=\"outline\"\n                    className=\"flex-1 py-4 rounded-2xl\"\n                  >\n                    <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                    {t(\"onboarding.back\")}\n                  </Button>\n                )}\n\n                <Button\n                  onClick={nextStep}\n                  disabled={!isStepValid()}\n                  className=\"flex-1 bg-primary hover:bg-primary/90 text-white py-4 rounded-2xl font-medium transition-colors duration-200\"\n                >\n                  {currentStep === TOTAL_STEPS\n                    ? t(\"onboarding.finish\")\n                    : t(\"onboarding.continue\")}\n                  {currentStep < TOTAL_STEPS && (\n                    <ArrowRight className=\"w-4 h-4 ml-2\" />\n                  )}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10700},"client/src/pages/progress.tsx":{"content":"import React, { useState, useEffect, useMemo } from \"react\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Button } from \"../components/ui/button\";\nimport { Input } from \"../components/ui/input\";\nimport { Label } from \"../components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { Progress as ProgressBar } from \"../components/ui/progress\";\nimport { Badge } from \"../components/ui/badge\";\nimport { Separator } from \"../components/ui/separator\";\nimport {\n  Tabs,\n  TabsContent,\n  TabsList,\n  TabsTrigger,\n} from \"../components/ui/tabs\";\nimport {\n  TrendingUp,\n  Droplets,\n  Scale,\n  Calculator,\n  BarChart3,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Target,\n  Activity,\n  Download,\n  Upload,\n  Utensils,\n  User,\n} from \"lucide-react\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n} from \"recharts\";\nimport {\n  WaterIntakeData,\n  DailyCaloriesData,\n  BodyCompositionData,\n  calculateWaterIntake,\n  getWaterIntakeMessage,\n  calculateBMI,\n  getBMIMessage,\n  calculateDailyCalories,\n  getCalorieMessage,\n  calculateWaistToHipRatio,\n  getWaistToHipMessage,\n  calculateBodyFat,\n  getBodyFatMessage,\n  saveWaterIntake,\n  loadWaterIntake,\n  saveDailyCalories,\n  loadDailyCalories,\n  saveBodyComposition,\n  loadBodyComposition,\n  resetProgressData,\n  isNewDay,\n  getTodayDate,\n} from \"../utils/progressCalculations\";\nimport { exportAllDataAsCSV } from \"../utils/csvExport\";\nimport { CSVImport } from \"../components/CSVImport\";\nimport { Dialog, DialogContent, DialogTrigger } from \"../components/ui/dialog\";\nimport { DailyWeightLogger } from \"../components/DailyWeightLogger\";\nimport { DailyMoodLogger } from \"../components/DailyMoodLogger\";\nimport { Journal } from \"../components/Journal\";\n\nexport default function Progress() {\n  const { state } = useApp();\n  const [showImportDialog, setShowImportDialog] = useState(false);\n  const { t } = useTranslation();\n  const { logWeight, logMood, logWater, logCalories } = useApp();\n  const [timeFilter, setTimeFilter] = useState(\"1month\");\n  const [calorieTimeFilter, setCalorieTimeFilter] = useState(\"1month\");\n  const { userData } = state;\n  // Helper function to filter data by time period\n  const filterDataByTime = (data: any[], filter: string) => {\n    if (!Array.isArray(data)) {\n      console.warn(\"filterDataByTime received an invalid value:\", data);\n      return [];\n    }\n\n    const now = new Date();\n    const filterDate = new Date();\n\n    switch (filter) {\n      case \"1week\":\n        filterDate.setDate(now.getDate() - 7);\n        break;\n      case \"1month\":\n        filterDate.setMonth(now.getMonth() - 1);\n        break;\n      case \"3months\":\n        filterDate.setMonth(now.getMonth() - 3);\n        break;\n      case \"6months\":\n        filterDate.setMonth(now.getMonth() - 6);\n        break;\n      default:\n        return data;\n    }\n\n    return data.filter((item) => new Date(item.date) >= filterDate);\n  };\n\n  // Get user's current weight from saved data\n  const getCurrentUserWeight = () => {\n    if (!userData) return 70;\n\n    const latestWeight =\n      userData.weights && userData.weights.length > 0\n        ? userData.weights[userData.weights.length - 1].weight\n        : null;\n\n    const profileWeight = userData.userProfile?.weight;\n\n    return latestWeight || profileWeight || 70;\n  };\n\n  // Get user's saved profile data\n  const getUserProfileData = () => {\n    const profile = userData.userProfile || {};\n\n    return {\n      weight: getCurrentUserWeight(),\n      height: profile.height || 175,\n      age: profile.age || 30,\n      sex: profile.gender || \"male\",\n      activityLevel: profile.exerciseLevel || \"moderate\",\n    };\n  };\n\n  // Water Intake State\n  const [waterData, setWaterData] = useState<WaterIntakeData>({\n    weight: getCurrentUserWeight(),\n    activity: \"moderate\",\n    goal: \"maintain\",\n    recommendedMl: 2950,\n    loggedMlToday: 0,\n    lastUpdated: getTodayDate(),\n  });\n  const [waterInput, setWaterInput] = useState(\"\");\n\n  // Daily Calories State\n  const userProfileData = getUserProfileData();\n  const [caloriesData, setCaloriesData] = useState<DailyCaloriesData>({\n    weight: userProfileData.weight,\n    height: userProfileData.height,\n    age: userProfileData.age,\n    sex: userProfileData.sex,\n    activity: userProfileData.activityLevel,\n    goal: \"maintain\",\n    BMI: 22.86,\n    recommendedCalories: 2400,\n    lastUpdated: getTodayDate(),\n  });\n\n  // Body Composition State\n  const [bodyData, setBodyData] = useState<BodyCompositionData>({\n    waist: 80,\n    hip: 95,\n    neck: 38,\n    height: 175,\n    sex: \"male\",\n    waistToHipRatio: 0.842,\n    bodyFatPercentage: 15.2,\n    lastUpdated: getTodayDate(),\n  });\n\n  // Load data from localStorage on component mount\n  useEffect(() => {\n    const savedWaterData = loadWaterIntake();\n    const savedCaloriesData = loadDailyCalories();\n    const savedBodyData = loadBodyComposition();\n    const userProfile = getUserProfileData();\n\n    if (savedWaterData) {\n      // Reset water log if it's a new day\n      if (isNewDay(savedWaterData.lastUpdated)) {\n        savedWaterData.loggedMlToday = 0;\n        savedWaterData.lastUpdated = getTodayDate();\n      }\n      // Update with current user weight if available\n      savedWaterData.weight = userProfile.weight;\n      setWaterData(savedWaterData);\n    } else {\n      // Set initial water data with user profile\n      const initialWaterData = {\n        ...waterData,\n        weight: userProfile.weight,\n        activity: userProfile.activityLevel\n      };\n      initialWaterData.recommendedMl = calculateWaterIntake(\n        initialWaterData.weight,\n        initialWaterData.activity,\n        initialWaterData.goal\n      );\n      setWaterData(initialWaterData);\n    }\n\n    if (savedCaloriesData) {\n      // Update with current user data\n      const updatedCaloriesData = {\n        ...savedCaloriesData,\n        weight: userProfile.weight,\n        height: userProfile.height,\n        age: userProfile.age,\n        sex: userProfile.sex,\n        activity: userProfile.activityLevel\n      };\n      updatedCaloriesData.BMI = calculateBMI(updatedCaloriesData.weight, updatedCaloriesData.height);\n      updatedCaloriesData.recommendedCalories = calculateDailyCalories(\n        updatedCaloriesData.weight,\n        updatedCaloriesData.height,\n        updatedCaloriesData.age,\n        updatedCaloriesData.sex,\n        updatedCaloriesData.activity,\n        updatedCaloriesData.goal\n      );\n      setCaloriesData(updatedCaloriesData);\n    } else {\n      // Set initial calories data with user profile\n      const initialCaloriesData = {\n        ...caloriesData,\n        weight: userProfile.weight,\n        height: userProfile.height,\n        age: userProfile.age,\n        sex: userProfile.sex,\n        activity: userProfile.activityLevel\n      };\n      initialCaloriesData.BMI = calculateBMI(initialCaloriesData.weight, initialCaloriesData.height);\n      initialCaloriesData.recommendedCalories = calculateDailyCalories(\n        initialCaloriesData.weight,\n        initialCaloriesData.height,\n        initialCaloriesData.age,\n        initialCaloriesData.sex,\n        initialCaloriesData.activity,\n        initialCaloriesData.goal\n      );\n      setCaloriesData(initialCaloriesData);\n    }\n\n    if (savedBodyData) {\n      // Update with current user data\n      const updatedBodyData = {\n        ...savedBodyData,\n        height: userProfile.height,\n        sex: userProfile.sex\n      };\n      setBodyData(updatedBodyData);\n    } else {\n      // Set initial body data with user profile\n      const initialBodyData = {\n        ...bodyData,\n        height: userProfile.height,\n        sex: userProfile.sex\n      };\n      setBodyData(initialBodyData);\n    }\n  }, [userData]);\n\n  // Water calculations\n  const updateWaterCalculations = (newData: Partial<WaterIntakeData>) => {\n    const updated = { ...waterData, ...newData };\n    updated.recommendedMl = calculateWaterIntake(\n      updated.weight,\n      updated.activity,\n      updated.goal,\n    );\n    updated.lastUpdated = getTodayDate();\n    setWaterData(updated);\n    saveWaterIntake(updated);\n  };\n\n  // Calories calculations\n  const updateCaloriesCalculations = (newData: Partial<DailyCaloriesData>) => {\n    const updated = { ...caloriesData, ...newData };\n    updated.BMI = calculateBMI(updated.weight, updated.height);\n    updated.recommendedCalories = calculateDailyCalories(\n      updated.weight,\n      updated.height,\n      updated.age,\n      updated.sex,\n      updated.activity,\n      updated.goal,\n    );\n    updated.lastUpdated = getTodayDate();\n    setCaloriesData(updated);\n    saveDailyCalories(updated);\n  };\n\n  // Body composition calculations\n  const updateBodyCalculations = (newData: Partial<BodyCompositionData>) => {\n    const updated = { ...bodyData, ...newData };\n    updated.waistToHipRatio = calculateWaistToHipRatio(\n      updated.waist,\n      updated.hip,\n    );\n    updated.bodyFatPercentage = calculateBodyFat(\n      updated.waist,\n      updated.hip,\n      updated.neck,\n      updated.height,\n      updated.sex,\n    );\n    updated.lastUpdated = getTodayDate();\n    setBodyData(updated);\n    saveBodyComposition(updated);\n  };\n\n  // Handle water logging\n  const handleLogWater = () => {\n    const amount = parseFloat(waterInput);\n    if (amount > 0) {\n      updateWaterCalculations({\n        loggedMlToday: waterData.loggedMlToday + amount * 1000,\n      });\n      // Also log to global context for charts\n      logWater(amount);\n      setWaterInput(\"\");\n    }\n  };\n\n  // Reset all progression data\n  const handleResetProgression = () => {\n    if (\n      confirm(\n        \"Are you sure you want to reset all progression data? This cannot be undone.\",\n      )\n    ) {\n      resetProgressData();\n      setWaterData({\n        weight: 70,\n        activity: \"moderate\",\n        goal: \"maintain\",\n        recommendedMl: 2950,\n        loggedMlToday: 0,\n        lastUpdated: getTodayDate(),\n      });\n      setCaloriesData({\n        weight: 70,\n        height: 175,\n        age: 30,\n        sex: \"male\",\n        activity: \"moderate\",\n        goal: \"maintain\",\n        BMI: 22.86,\n        recommendedCalories: 2400,\n        lastUpdated: getTodayDate(),\n      });\n      setBodyData({\n        waist: 80,\n        hip: 95,\n        neck: 38,\n        height: 175,\n        sex: \"male\",\n        waistToHipRatio: 0.842,\n        bodyFatPercentage: 15.2,\n        lastUpdated: getTodayDate(),\n      });\n    }\n  };\n\n  // Prepare chart data\n  const weightData = userData.weights.slice(-30).map((w) => ({\n    date: new Date(w.date).toLocaleDateString(\"en-US\", {\n      month: \"short\",\n      day: \"numeric\",\n    }),\n    weight: w.weight,\n  }));\n\n  const waterChartData = userData.waterLog.slice(-7).map((w) => ({\n    date: new Date(w.date).toLocaleDateString(\"en-US\", { weekday: \"short\" }),\n    liters: Number(w.liters.toFixed(1)),\n  }));\n\n  const waterPercentage = Math.min(\n    100,\n    (waterData.loggedMlToday / waterData.recommendedMl) * 100,\n  );\n\n  // Process calorie data\n  const calorieData = useMemo(() => {\n    const mealLogs = state.userData.mealLogs || [];\n    const dailyCalories: { [key: string]: number } = {};\n\n    mealLogs.forEach((log) => {\n      if (dailyCalories[log.date]) {\n        dailyCalories[log.date] += log.calories;\n      } else {\n        dailyCalories[log.date] = log.calories;\n      }\n    });\n\n    const chartData = Object.entries(dailyCalories)\n      .map(([date, calories]) => ({\n        date,\n        calories,\n        formattedDate: new Date(date).toLocaleDateString(),\n      }))\n      .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n\n    return filterDataByTime(chartData, calorieTimeFilter);\n  }, [state.userData.mealLogs, calorieTimeFilter]);\n\n  const filteredWeightData = filterDataByTime(weightData, timeFilter);\n  const filteredWaterData = filterDataByTime(waterChartData, timeFilter);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      {/* Header */}\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm\">\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <img\n                src=\"/logo.png\"\n                alt=\"NaijaReset Logo\"\n                className=\"w-10 h-10 rounded-full\"\n              />\n              <div>\n                <h1 className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                  {t('progress.title')}\n                </h1>\n                <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                  {t('progress.subtitle')}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6\">\n        {/* User Profile Information Card */}\n        <Card className=\"mb-6\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"w-5 h-5 text-blue-500\" />\n              Personal Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\n                  {userData.userProfile?.name || 'No name set'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Name</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\n                  {userData.userProfile?.age || 0}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Age</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600 dark:text-purple-400\">\n                  {getCurrentUserWeight()} kg\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Current Weight</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-orange-600 dark:text-orange-400\">\n                  {userData.userProfile?.targetWeight || 0} kg\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Target Weight</div>\n              </div>\n            </div>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-4\">\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-gray-700 dark:text-gray-300\">\n                  {userData.userProfile?.height || 0} cm\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Height</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 capitalize\">\n                  {userData.userProfile?.gender || 'Not set'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Gender</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-lg font-semibold text-gray-700 dark:text-gray-300 capitalize\">\n                  {userData.userProfile?.exerciseLevel?.replace('_', ' ') || 'Not set'}\n                </div>\n                <div className=\"text-sm text-gray-600 dark:text-gray-400\">Activity Level</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Tabs defaultValue=\"journal\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"journal\">📖 Journal</TabsTrigger>\n            <TabsTrigger value=\"water\">💧 Water</TabsTrigger>\n            <TabsTrigger value=\"calories\">🔥 Calories</TabsTrigger>\n            <TabsTrigger value=\"body\">📏 Body Comp</TabsTrigger>\n            <TabsTrigger value=\"charts\">📊 Charts</TabsTrigger>\n          </TabsList>\n\n          {/* Journal Tab */}\n          <TabsContent value=\"journal\" className=\"mt-6\">\n            <Journal />\n          </TabsContent>\n\n          {/* Water Intake Tab */}\n          <TabsContent value=\"water\" className=\"mt-6 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Droplets className=\"w-5 h-5 text-blue-500\" />\n                  {t('progress.waterIntakeTitle')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Input Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"water-weight\">Weight (kg)</Label>\n                    <Input\n                      id=\"water-weight\"\n                      type=\"number\"\n                      value={waterData.weight}\n                      onChange={(e) =>\n                        updateWaterCalculations({\n                          weight: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                      placeholder=\"70\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"water-activity\">Activity Level</Label>\n                    <Select\n                      value={waterData.activity}\n                      onValueChange={(\n                        value: \"sedentary\" | \"moderate\" | \"active\",\n                      ) => updateWaterCalculations({ activity: value })}\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"sedentary\">Sedentary</SelectItem>\n                        <SelectItem value=\"moderate\">Moderate</SelectItem>\n                        <SelectItem value=\"active\">Active</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"water-goal\">Goal</Label>\n                    <Select\n                      value={waterData.goal}\n                      onValueChange={(value: \"lose\" | \"gain\" | \"maintain\") =>\n                        updateWaterCalculations({ goal: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"lose\">Lose Weight</SelectItem>\n                        <SelectItem value=\"gain\">Gain Weight</SelectItem>\n                        <SelectItem value=\"maintain\">\n                          Maintain Weight\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Results */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-lg font-semibold\">\n                        Daily Water Target\n                      </p>\n                      <p className=\"text-3xl font-bold text-blue-600\">\n                        {waterData.recommendedMl}ml\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        ({(waterData.recommendedMl / 1000).toFixed(1)} liters)\n                      </p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        Today's Progress\n                      </p>\n                      <p className=\"text-2xl font-bold text-blue-500\">\n                        {waterData.loggedMlToday}ml\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        ({(waterData.loggedMlToday / 1000).toFixed(1)} liters)\n                      </p>\n                    </div>\n                  </div>\n\n                  <ProgressBar value={waterPercentage} className=\"h-3\" />\n\n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                    <p className=\"text-sm\">\n                      {getWaterIntakeMessage(\n                        waterData.loggedMlToday,\n                        waterData.recommendedMl,\n                      )}\n                    </p>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Water Logging */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold\">Log Water Intake</h3>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      type=\"number\"\n                      step=\"0.1\"\n                      value={waterInput}\n                      onChange={(e) => setWaterInput(e.target.value)}\n                      placeholder=\"Amount in liters (e.g., 0.5)\"\n                      className=\"flex-1\"\n                    />\n                    <Button onClick={handleLogWater} disabled={!waterInput}>\n                      <Droplets className=\"w-4 h-4 mr-2\" />\n                      Log Water\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Daily Calories Tab */}\n          <TabsContent value=\"calories\" className=\"mt-6 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Target className=\"w-5 h-5 text-orange-500\" />\n                  {t('progress.caloriesTitle')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Input Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"cal-weight\">Weight (kg)</Label>\n                    <Input\n                      id=\"cal-weight\"\n                      type=\"number\"\n                      value={caloriesData.weight}\n                      onChange={(e) =>\n                        updateCaloriesCalculations({\n                          weight: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cal-height\">Height (cm)</Label>\n                    <Input\n                      id=\"cal-height\"\n                      type=\"number\"\n                      value={caloriesData.height}\n                      onChange={(e) =>\n                        updateCaloriesCalculations({\n                          height: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cal-age\">Age</Label>\n                    <Input\n                      id=\"cal-age\"\n                      type=\"number\"\n                      value={caloriesData.age}\n                      onChange={(e) =>\n                        updateCaloriesCalculations({\n                          age: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cal-sex\">Sex</Label>\n                    <Select\n                      value={caloriesData.sex}\n                      onValueChange={(value: \"male\" | \"female\") =>\n                        updateCaloriesCalculations({ sex: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cal-activity\">Activity Level</Label>\n                    <Select\n                      value={caloriesData.activity}\n                      onValueChange={(value: any) =>\n                        updateCaloriesCalculations({ activity: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"sedentary\">Sedentary</SelectItem>\n                        <SelectItem value=\"light\">Lightly Active</SelectItem>\n                        <SelectItem value=\"moderate\">\n                          Moderately Active\n                        </SelectItem>\n                        <SelectItem value=\"active\">Very Active</SelectItem>\n                        <SelectItem value=\"very_active\">\n                          Extra Active\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"cal-goal\">Goal</Label>\n                    <Select\n                      value={caloriesData.goal}\n                      onValueChange={(value: \"lose\" | \"gain\" | \"maintain\") =>\n                        updateCaloriesCalculations({ goal: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"lose\">Lose Weight</SelectItem>\n                        <SelectItem value=\"gain\">Gain Weight</SelectItem>\n                        <SelectItem value=\"maintain\">\n                          Maintain Weight\n                        </SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Results */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-lg font-semibold\">\n                        Body Mass Index (BMI)\n                      </p>\n                      <p className=\"text-3xl font-bold text-purple-600\">\n                        {caloriesData.BMI}\n                      </p>\n                      <Badge variant=\"outline\" className=\"mt-2\">\n                        {getBMIMessage(caloriesData.BMI).includes(\"healthy\")\n                          ? \"✅\"\n                          : \"⚠️\"}\n                        {caloriesData.BMI < 18.5\n                          ? \"Underweight\"\n                          : caloriesData.BMI < 25\n                            ? \"Normal\"\n                            : caloriesData.BMI < 30\n                              ? \"Overweight\"\n                              : \"Obese\"}\n                      </Badge>\n                    </div>\n                    <div className=\"bg-purple-50 dark:bg-purple-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm\">\n                        {getBMIMessage(caloriesData.BMI)}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-lg font-semibold\">\n                        Daily Calorie Target\n                      </p>\n                      <p className=\"text-3xl font-bold text-orange-600\">\n                        {caloriesData.recommendedCalories}\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        calories per day\n                      </p>\n                    </div>\n                    <div className=\"bg-orange-50 dark:bg-orange-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm\">\n                        {getCalorieMessage(\n                          caloriesData.recommendedCalories,\n                          caloriesData.goal,\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Body Composition Tab */}\n          <TabsContent value=\"body\" className=\"mt-6 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Scale className=\"w-5 h-5 text-green-500\" />\n                  {t('progress.bodyCompositionTitle')}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {/* Input Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"body-waist\">Waist (cm)</Label>\n                    <Input\n                      id=\"body-waist\"\n                      type=\"number\"\n                      value={bodyData.waist}\n                      onChange={(e) =>\n                        updateBodyCalculations({\n                          waist: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"body-hip\">Hip (cm)</Label>\n                    <Input\n                      id=\"body-hip\"\n                      type=\"number\"\n                      value={bodyData.hip}\n                      onChange={(e) =>\n                        updateBodyCalculations({\n                          hip: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"body-neck\">Neck (cm)</Label>\n                    <Input\n                      id=\"body-neck\"\n                      type=\"number\"\n                      value={bodyData.neck}\n                      onChange={(e) =>\n                        updateBodyCalculations({\n                          neck: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"body-height\">Height (cm)</Label>\n                    <Input\n                      id=\"body-height\"\n                      type=\"number\"\n                      value={bodyData.height}\n                      onChange={(e) =>\n                        updateBodyCalculations({\n                          height: parseFloat(e.target.value) || 0,\n                        })\n                      }\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"body-sex\">Sex</Label>\n                    <Select\n                      value={bodyData.sex}\n                      onValueChange={(value: \"male\" | \"female\") =>\n                        updateBodyCalculations({ sex: value })\n                      }\n                    >\n                      <SelectTrigger>\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"male\">Male</SelectItem>\n                        <SelectItem value=\"female\">Female</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n\n                <Separator />\n\n                {/* Results */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-lg font-semibold\">\n                        Waist-to-Hip Ratio\n                      </p>\n                      <p className=\"text-3xl font-bold text-green-600\">\n                        {bodyData.waistToHipRatio}\n                      </p>\n                      <Badge variant=\"outline\" className=\"mt-2\">\n                        {getWaistToHipMessage(\n                          bodyData.waistToHipRatio,\n                          bodyData.sex,\n                        ).includes(\"Low\")\n                          ? \"✅\"\n                          : getWaistToHipMessage(\n                                bodyData.waistToHipRatio,\n                                bodyData.sex,\n                              ).includes(\"Moderate\")\n                            ? \"⚠️\"\n                            : \"🚨\"}\n                        {\n                          getWaistToHipMessage(\n                            bodyData.waistToHipRatio,\n                            bodyData.sex,\n                          ).split(\" \")[0]\n                        }{\" \"}\n                        Risk\n                      </Badge>\n                    </div>\n                    <div className=\"bg-green-50 dark:bg-green-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm\">\n                        {getWaistToHipMessage(\n                          bodyData.waistToHipRatio,\n                          bodyData.sex,\n                        )}\n                      </p>\n                    </div>\n                  </div>\n\n                  <div className=\"space-y-4\">\n                    <div>\n                      <p className=\"text-lg font-semibold\">\n                        Body Fat Percentage\n                      </p>\n                      <p className=\"text-3xl font-bold text-blue-600\">\n                        {bodyData.bodyFatPercentage}%\n                      </p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                        US Navy Method\n                      </p>\n                    </div>\n                    <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                      <p className=\"text-sm\">\n                        {getBodyFatMessage(\n                          bodyData.bodyFatPercentage,\n                          bodyData.sex,\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Charts Tab */}\n          <TabsContent value=\"charts\" className=\"mt-6 space-y-6\">\n            {/* Weight Progress Chart */}\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-base font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <TrendingUp className=\"h-4 w-4 text-primary\" />\n                    {t(\"progress.charts.weightProgress\")}\n                  </div>\n                </CardTitle>\n                <Select value={timeFilter} onValueChange={setTimeFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1week\">\n                      {t(\"progress.timeFilters.1week\")}\n                    </SelectItem>\n                    <SelectItem value=\"1month\">\n                      {t(\"progress.timeFilters.1month\")}\n                    </SelectItem>\n                    <SelectItem value=\"3months\">\n                      {t(\"progress.timeFilters.3months\")}\n                    </SelectItem>\n                    <SelectItem value=\"6months\">\n                      {t(\"progress.timeFilters.6months\")}\n                    </SelectItem>\n                    <SelectItem value=\"max\">\n                      {t(\"progress.timeFilters.max\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <LineChart data={filteredWeightData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip\n                      labelFormatter={(value) => `Date: ${value}`}\n                      formatter={(value: any) => [`${value} kg`, \"Weight\"]}\n                    />\n                    <Line\n                      type=\"monotone\"\n                      dataKey=\"weight\"\n                      stroke=\"#8884d8\"\n                      activeDot={{ r: 8 }}\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-base font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <Droplets className=\"h-4 w-4 text-blue-500\" />\n                    {t(\"progress.charts.waterIntake\")}\n                  </div>\n                </CardTitle>\n                <Select value={timeFilter} onValueChange={setTimeFilter}>\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1week\">\n                      {t(\"progress.timeFilters.1week\")}\n                    </SelectItem>\n                    <SelectItem value=\"1month\">\n                      {t(\"progress.timeFilters.1month\")}\n                    </SelectItem>\n                    <SelectItem value=\"3months\">\n                      {t(\"progress.timeFilters.3months\")}\n                    </SelectItem>\n                    <SelectItem value=\"6months\">\n                      {t(\"progress.timeFilters.6months\")}\n                    </SelectItem>\n                    <SelectItem value=\"max\">\n                      {t(\"progress.timeFilters.max\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={filteredWaterData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip\n                      labelFormatter={(value) => `Date: ${value}`}\n                      formatter={(value: any) => [`${value}L`, \"Water\"]}\n                    />\n                    <Bar dataKey=\"amount\" fill=\"#3b82f6\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-base font-medium\">\n                  <div className=\"flex items-center gap-2\">\n                    <Utensils className=\"h-4 w-4 text-orange-500\" />\n                    {t(\"progress.charts.calorieIntake\")}\n                  </div>\n                </CardTitle>\n                <Select\n                  value={calorieTimeFilter}\n                  onValueChange={setCalorieTimeFilter}\n                >\n                  <SelectTrigger className=\"w-32\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"1week\">\n                      {t(\"progress.timeFilters.1week\")}\n                    </SelectItem>\n                    <SelectItem value=\"1month\">\n                      {t(\"progress.timeFilters.1month\")}\n                    </SelectItem>\n                    <SelectItem value=\"3months\">\n                      {t(\"progress.timeFilters.3months\")}\n                    </SelectItem>\n                    <SelectItem value=\"6months\">\n                      {t(\"progress.timeFilters.6months\")}\n                    </SelectItem>\n                    <SelectItem value=\"max\">\n                      {t(\"progress.timeFilters.max\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <BarChart data={calorieData}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"formattedDate\" />\n                    <YAxis />\n                    <Tooltip\n                      labelFormatter={(value) => `Date: ${value}`}\n                      formatter={(value: any) => [`${value} cal`, \"Calories\"]}\n                    />\n                    <Bar dataKey=\"calories\" fill=\"#f97316\" />\n                  </BarChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":41762},"client/src/pages/settings.tsx":{"content":"\nimport React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport { Button } from '../components/ui/button';\nimport { Input } from '../components/ui/input';\nimport { Label } from '../components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../components/ui/select';\nimport { useTranslation } from '../hooks/useTranslation';\nimport { useApp } from '../contexts/AppContext';\nimport { LanguageSwitcher } from '../components/LanguageSwitcher';\nimport { Settings as SettingsIcon, Save, User, Ruler, Weight, Calendar, Globe, Download, Upload, RefreshCw, Crown, Clock } from 'lucide-react';\nimport { DailyWeightLogger } from '../components/DailyWeightLogger';\nimport { Dialog, DialogContent, DialogTrigger } from '../components/ui/dialog';\nimport { CSVImport } from '../components/CSVImport';\nimport { exportAllDataAsCSV } from '../utils/csvExport';\nimport { resetProgressData } from '../utils/progressCalculations';\nimport { clearUserData } from '../utils/storage';\nimport { Badge } from '../components/ui/badge';\n\nexport default function Settings() {\n  const { t } = useTranslation();\n  const { state, updateUserProfile } = useApp();\n  const [formData, setFormData] = useState({\n    name: '',\n    age: '',\n    weight: '',\n    height: '',\n    targetWeight: '',\n    gender: '',\n    exerciseLevel: '',\n    diet: [] as string[]\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  // Plan system removed - no longer needed\n\n  // Plan system removed\n\n  useEffect(() => {\n    // Load data from state userProfile only\n    const userProfile = state.userData?.userProfile;\n    \n    setFormData({\n      name: userProfile?.name || '',\n      age: userProfile?.age?.toString() || '',\n      weight: userProfile?.weight?.toString() || '',\n      height: userProfile?.height?.toString() || '',\n      targetWeight: userProfile?.targetWeight?.toString() || '',\n      gender: userProfile?.gender || '',\n      exerciseLevel: userProfile?.exerciseLevel || '',\n      diet: userProfile?.diet || []\n    });\n  }, [state.userData]);\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }));\n  };\n\n  const handleSave = async () => {\n    setIsSaving(true);\n    try {\n      const updatedData = {\n        name: formData.name,\n        age: formData.age ? parseInt(formData.age) : 0,\n        weight: formData.weight ? parseFloat(formData.weight) : 0,\n        height: formData.height ? parseFloat(formData.height) : 0,\n        targetWeight: formData.targetWeight ? parseFloat(formData.targetWeight) : 0,\n        gender: formData.gender as 'male' | 'female' | 'other',\n        exerciseLevel: formData.exerciseLevel as 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active',\n        diet: formData.diet\n      };\n      \n      // Save to context\n      updateUserProfile(updatedData);\n      \n      // Show success message (you can integrate with your toast system)\n      alert('Settings saved successfully!');\n    } catch (error) {\n      alert('Error saving settings. Please try again.');\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const handleResetData = () => {\n    if (confirm('Are you sure you want to reset all data? This cannot be undone.')) {\n      resetProgressData();\n      clearUserData();\n      // Plan deactivation removed\n      alert('All data has been reset successfully!');\n      window.location.reload();\n    }\n  };\n\n  // Plan management functions removed\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      <header className=\"bg-white dark:bg-gray-800 shadow-sm\">\n        <div className=\"px-4 py-6\">\n          <div className=\"flex items-center gap-3\">\n            <SettingsIcon className=\"w-8 h-8 text-primary\" />\n            <div>\n              <h1 className=\"text-2xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                {t('settings.title')}\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm\">\n                {t('settings.profile')}\n              </p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"px-4 py-6 space-y-6\">\n        {/* Language Selector */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Globe className=\"w-5 h-5\" />\n              {t('settings.language')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <LanguageSwitcher />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <User className=\"w-5 h-5\" />\n              {t('settings.profile')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">{t('onboarding.fields.name')}</Label>\n              <Input\n                id=\"name\"\n                value={formData.name}\n                onChange={(e) => handleInputChange('name', e.target.value)}\n                placeholder={t('onboarding.fields.namePlaceholder')}\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"age\">{t('onboarding.fields.age')}</Label>\n                <Input\n                  id=\"age\"\n                  type=\"number\"\n                  value={formData.age}\n                  onChange={(e) => handleInputChange('age', e.target.value)}\n                  placeholder={t('onboarding.fields.agePlaceholder')}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"gender\">{t('onboarding.fields.gender')}</Label>\n                <Select value={formData.gender} onValueChange={(value) => handleInputChange('gender', value)}>\n                  <SelectTrigger>\n                    <SelectValue placeholder={t('onboarding.fields.gender')} />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"male\">{t('onboarding.fields.genderOptions.male')}</SelectItem>\n                    <SelectItem value=\"female\">{t('onboarding.fields.genderOptions.female')}</SelectItem>\n                    <SelectItem value=\"other\">{t('onboarding.fields.genderOptions.other')}</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Ruler className=\"w-5 h-5\" />\n              {t('onboarding.fields.height')} & {t('onboarding.fields.weight')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <Label htmlFor=\"weight\">{t('onboarding.fields.weight')}</Label>\n                <Input\n                  id=\"weight\"\n                  type=\"number\"\n                  step=\"0.1\"\n                  value={formData.weight}\n                  onChange={(e) => handleInputChange('weight', e.target.value)}\n                  placeholder={t('onboarding.fields.weightPlaceholder')}\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"height\">{t('onboarding.fields.height')}</Label>\n                <Input\n                  id=\"height\"\n                  type=\"number\"\n                  value={formData.height}\n                  onChange={(e) => handleInputChange('height', e.target.value)}\n                  placeholder={t('onboarding.fields.heightPlaceholder')}\n                />\n              </div>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"targetWeight\">{t('onboarding.fields.targetWeight')}</Label>\n              <Input\n                id=\"targetWeight\"\n                type=\"number\"\n                step=\"0.1\"\n                value={formData.targetWeight}\n                onChange={(e) => handleInputChange('targetWeight', e.target.value)}\n                placeholder={t('onboarding.fields.targetWeightPlaceholder')}\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Weight className=\"w-5 h-5\" />\n              {t('progress.weightProgress')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <DailyWeightLogger />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Calendar className=\"w-5 h-5\" />\n              {t('onboarding.fields.exerciseLevel')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"exerciseLevel\">{t('onboarding.fields.exerciseLevel')}</Label>\n              <Select value={formData.exerciseLevel} onValueChange={(value) => handleInputChange('exerciseLevel', value)}>\n                <SelectTrigger>\n                  <SelectValue placeholder={t('onboarding.fields.exerciseLevel')} />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"sedentary\">{t('onboarding.fields.exerciseOptions.sedentary')}</SelectItem>\n                  <SelectItem value=\"light\">{t('onboarding.fields.exerciseOptions.light')}</SelectItem>\n                  <SelectItem value=\"moderate\">{t('onboarding.fields.exerciseOptions.moderate')}</SelectItem>\n                  <SelectItem value=\"active\">{t('onboarding.fields.exerciseOptions.active')}</SelectItem>\n                  <SelectItem value=\"very_active\">{t('onboarding.fields.exerciseOptions.very_active')}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Save className=\"w-5 h-5\" />\n              {t('progress.exportData')}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col gap-2\">\n              <Button\n                onClick={() => exportAllDataAsCSV(state.userData)}\n                variant=\"outline\"\n                className=\"w-full text-green-600 hover:text-green-700\"\n              >\n                <Download className=\"w-4 h-4 mr-2\" />\n                {t('progress.exportData')}\n              </Button>\n              \n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button variant=\"outline\" className=\"w-full\">\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Importar Dados CSV\n                  </Button>\n                </DialogTrigger>\n                <DialogContent>\n                  <CSVImport />\n                </DialogContent>\n              </Dialog>\n              \n              <Button\n                onClick={handleResetData}\n                variant=\"outline\"\n                className=\"w-full text-red-600 hover:text-red-700\"\n              >\n                <RefreshCw className=\"w-4 h-4 mr-2\" />\n                Resetar Dados\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Button \n          onClick={handleSave} \n          disabled={isSaving}\n          className=\"w-full bg-primary hover:bg-primary/90\"\n        >\n          <Save className=\"w-4 h-4 mr-2\" />\n          {isSaving ? t('common.loading') : t('common.save')}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11830},"client/src/pages/welcome.tsx":{"content":"import React, { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"../components/ui/button\";\nimport { Card, CardContent } from \"../components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"../components/ui/select\";\nimport { useTranslation } from \"../hooks/useTranslation\";\nimport { useApp } from \"../contexts/AppContext\";\n\nexport default function Welcome() {\n  const [, setLocation] = useLocation();\n  const { t, changeLanguage } = useTranslation();\n  const { updateUserProfile } = useApp();\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(\"\");\n\n  const languages = [\n    { code: \"en-NG\", name: \"English (Nigeria)\", flag: \"🇳🇬\" },\n    { code: \"en-ZA\", name: \"English (South Africa)\", flag: \"🇿🇦\" },\n    { code: \"en-KE\", name: \"English (Kenya)\", flag: \"🇰🇪\" },\n    { code: \"en-GH\", name: \"English (Ghana)\", flag: \"🇬🇭\" },\n    { code: \"fr-CI\", name: \"Français (Côte d'Ivoire)\", flag: \"🇨🇮\" },\n  ];\n\n  const handleLanguageSelect = (languageCode: string) => {\n    setSelectedLanguage(languageCode);\n  };\n\n  const handleContinue = () => {\n    if (selectedLanguage) {\n      changeLanguage(selectedLanguage);\n      updateUserProfile({ language: selectedLanguage as any });\n      setLocation(\"/onboarding\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary to-secondary flex items-center justify-center p-4\">\n      <div className=\"animate-fadeIn\">\n        <Card className=\"bg-white dark:bg-gray-800 rounded-3xl shadow-2xl p-8 max-w-md w-full text-center\">\n          <CardContent className=\"space-y-6\">\n            {/* App Logo */}\n            <div className=\"w-32 h-32 mx-auto mb-6 bg-white rounded-full flex items-center justify-center shadow-lg\">\n              <img\n                src=\"/logo.png\"\n                alt=\"NaijaReset Logo\"\n                className=\"w-24 h-24 object-contain rounded-full\"\n                onError={(e) => {\n                  // Fallback to text logo if image fails to load\n                  const target = e.target as HTMLImageElement;\n                  target.style.display = \"none\";\n                  const container = target.parentElement!;\n                  container.innerHTML = `\n                    <div class=\"w-24 h-24 bg-gradient-to-br from-accent to-primary rounded-full flex items-center justify-center\">\n                      <span class=\"text-white font-bold text-lg\">NR</span>\n                    </div>\n                  `;\n                }}\n              />\n            </div>\n\n            {/* Welcome Text */}\n            <div className=\"space-y-2\">\n              <h1 className=\"text-3xl font-poppins font-bold text-gray-800 dark:text-gray-100\">\n                My Reset\n              </h1>\n              <p className=\"text-gray-600 dark:text-gray-300\">\n                {t(\"welcome.subtitle\")}\n              </p>\n            </div>\n\n            {/* Language Selection */}\n            <div className=\"space-y-4\">\n              <h2 className=\"text-xl font-poppins font-semibold text-gray-800 dark:text-gray-100\">\n                {t(\"welcome.chooseLanguage\")}\n              </h2>\n\n              <div className=\"space-y-4\">\n                <Select\n                  onValueChange={handleLanguageSelect}\n                  value={selectedLanguage}\n                >\n                  <SelectTrigger className=\"w-full py-4 px-6 rounded-2xl border-2 border-gray-200 dark:border-gray-600\">\n                    <SelectValue placeholder=\"Select your language / Choisissez votre langue\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    {languages.map((language) => (\n                      <SelectItem key={language.code} value={language.code}>\n                        <span className=\"flex items-center space-x-3\">\n                          <span className=\"text-xl\">{language.flag}</span>\n                          <span>{language.name}</span>\n                        </span>\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Button\n                  onClick={handleContinue}\n                  disabled={!selectedLanguage}\n                  className=\"w-full bg-primary hover:bg-primary/90 disabled:bg-gray-300 disabled:cursor-not-allowed text-white py-4 px-6 rounded-2xl font-medium transition-all duration-200 transform hover:scale-105 disabled:hover:scale-100\"\n                >\n                  {selectedLanguage\n                    ? selectedLanguage.startsWith(\"fr\")\n                      ? \"Continuer\"\n                      : \"Continue\"\n                    : \"Continue / Continuer\"}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4865},"client/src/types/index.ts":{"content":"export interface UserProfile {\n  name: string;\n  age: number;\n  height: number;\n  weight: number;\n  targetWeight: number;\n  gender: 'male' | 'female' | 'other';\n  exerciseLevel: 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';\n  diet: string[];\n  language: 'en-US' | 'fr-FR' | 'es-ES';\n}\n\nexport interface Challenge {\n  id: string;\n  name: {\n    [key: string]: string; // e.g., \"en-US\": \"Challenge Name\", \"fr-FR\": \"Nom du Défi\"\n  };\n  description: {\n    [key: string]: string; // e.g., \"en-US\": \"Challenge Description\", \"fr-FR\": \"Description du Défi\"\n  };\n  days: number;\n  dailyTasks: DailyTask[];\n  currentDay: number;\n  completedDays: number[];\n  isActive: boolean;\n  startDate?: string;\n  language?: string; // Store the language used when the challenge was created\n  accessPlans?: number[];\n}\n\nexport interface DailyTask {\n  day: number;\n  tasks: {\n    [key: string]: string[]; // e.g., \"en-US\": [\"Task 1\", \"Task 2\"], \"fr-FR\": [\"Tâche 1\", \"Tâche 2\"]\n  };\n  completed: boolean[];\n}\n\nexport interface Exercise {\n  id: string;\n  name: string;\n  category: 'Light' | 'Moderate' | 'Advanced';\n  duration?: string;\n  reps?: string;\n  rest: string;\n  description?: string;\n  isFavorite?: boolean;\n  accessPlans?: number[];\n}\n\nexport interface Meal {\n  id: string;\n  name: string | { [key: string]: string };\n  description?: string | { [key: string]: string };\n  category: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  calories: number;\n  protein: number;\n  carbs: number;\n  fats: number;\n  cookingTime: string;\n  servings: number;\n  difficulty: 'easy' | 'medium' | 'hard';\n  ingredients: string[] | { [key: string]: string[] };\n  instructions: string[] | { [key: string]: string[] };\n  image?: string;\n  accessPlans?: number[];\n}\n\nexport interface WeightLog {\n  date: string;\n  weight: number;\n}\n\nexport interface MoodLog {\n  date: string;\n  mood: '😞' | '😐' | '🙂' | '😊' | '😄';\n}\n\nexport interface WaterLog {\n  id?: string;\n  date: string;\n  liters: number;\n  time: string;\n  timestamp: string;\n}\n\nexport interface CaloriesLog {\n  date: string;\n  calories: number;\n}\n\nexport interface Measurements {\n  date: string;\n  waist?: number;\n  hips?: number;\n  chest?: number;\n  arms?: number;\n  thighs?: number;\n}\n\nexport interface Badge {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  isUnlocked: boolean;\n  unlockedAt?: string;\n}\n\nexport interface Course {\n  id: string;\n  title: {\n    'en-NG': string;\n    'fr-CI': string;\n  };\n  description: {\n    'en-NG': string;\n    'fr-CI': string;\n  };\n  image: string;\n  accessPlans: number[];\n  totalLessons: number;\n  modules: CourseModule[];\n}\n\nexport interface CourseModule {\n  id: string;\n  title: {\n    'en-NG': string;\n    'fr-CI': string;\n  };\n  lessons: Lesson[];\n}\n\nexport interface Lesson {\n  id: string;\n  title: {\n    'en-NG': string;\n    'fr-CI': string;\n  };\n  type: 'video' | 'text';\n  duration: string;\n  videoUrl?: string;\n  description?: {\n    'en-NG': string;\n    'fr-CI': string;\n  };\n  content?: {\n    text: {\n      'en-NG': string;\n      'fr-CI': string;\n    };\n    images?: string[];\n  };\n}\n\nexport interface CourseProgress {\n  courseId: string;\n  completedLessons: string[];\n  currentModule: string;\n  currentLesson: string;\n  startedAt: string;\n  lastAccessedAt: string;\n}\n\nexport interface LessonProgress {\n  lessonId: string;\n  completed: boolean;\n}\n\nexport interface UserData {\n  userProfile: UserProfile;\n  challenges: Record<string, Challenge>;\n  weights: WeightLog[];\n  moods: MoodLog[];\n  measurements: Measurements[];\n  waterLog: WaterLog[];\n  caloriesLog: CaloriesLog[];\n  courseProgress: CourseProgress[];\n  lessonProgress: LessonProgress[];\n  badges: Badge[];\n  favorites: {\n    exercises: string[];\n    meals: string[];\n    quotes: string[];\n  };\n  exerciseHistory: Array<{\n    exerciseId: string;\n    date: string;\n    duration: number;\n    completed: boolean;\n  }>;\n  mealHistory: Array<{\n    mealId: string;\n    date: string;\n    mealType: 'breakfast' | 'lunch' | 'dinner' | 'snack';\n  }>;\n}\n\nexport interface AppState {\n  userData: UserData;\n  currentLanguage: 'en-US' | 'fr-FR' | 'es-ES';\n  isDarkMode: boolean;\n  isOnboarded: boolean;\n  currentChallenge?: string;\n}\n\nexport interface AppContextType {\n  state: AppState;\n  dispatch: React.Dispatch<AppAction>;\n  toggleDarkMode: () => void;\n  setLanguage: (language: 'en-US' | 'fr-FR' | 'es-ES') => void;\n  setOnboarded: () => void;\n  startChallenge: (challengeId: string) => void;\n  completeChallenge: (challengeId: string, day: number) => void;\n  restartChallenge: (challengeId: string) => void;\n  updateUserProfile: (profileData: Partial<UserData>) => void;\n  importCSVData: (csvData: any[]) => Promise<{ success: boolean; imported: number; skipped: number; message?: string }>;\n}\n\nexport type AppAction =\n  | { type: 'TOGGLE_DARK_MODE' }\n  | { type: 'SET_LANGUAGE'; payload: 'en-NG' | 'fr-CI' }\n  | { type: 'SET_ONBOARDED' }\n  | { type: 'SET_USER_DATA'; payload: UserData }\n  | { type: 'START_CHALLENGE'; payload: string }\n  | { type: 'COMPLETE_CHALLENGE'; payload: { challengeId: string; day: number } }\n  | { type: 'RESTART_CHALLENGE'; payload: string }\n  | { type: 'UPDATE_USER_PROFILE'; payload: Partial<UserData> }\n  | { type: 'IMPORT_CSV_DATA'; payload: any[] };","size_bytes":5254},"client/src/utils/calculations.ts":{"content":"import { UserProfile } from '../types';\n\nexport const calculateBMI = (weight: number, height: number): number => {\n  const heightInMeters = height / 100;\n  return weight / (heightInMeters * heightInMeters);\n};\n\nexport const getBMICategory = (bmi: number): string => {\n  if (bmi < 18.5) return 'Underweight';\n  if (bmi < 25) return 'Normal weight';\n  if (bmi < 30) return 'Overweight';\n  return 'Obese';\n};\n\nexport const calculateWaterNeeds = (weight: number, exerciseLevel: string): number => {\n  let baseWater = weight * 0.035; // 35ml per kg\n  \n  switch (exerciseLevel) {\n    case 'light':\n      return baseWater * 1.1;\n    case 'moderate':\n      return baseWater * 1.2;\n    case 'active':\n      return baseWater * 1.3;\n    case 'very_active':\n      return baseWater * 1.4;\n    default:\n      return baseWater;\n  }\n};\n\nexport const calculateCalorieNeeds = (profile: UserProfile): number => {\n  const { weight, height, age, gender, exerciseLevel } = profile;\n  \n  // Calculate BMR using Mifflin-St Jeor Equation\n  let bmr: number;\n  if (gender === 'male') {\n    bmr = 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    bmr = 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n  \n  // Apply activity multiplier\n  const activityMultipliers = {\n    sedentary: 1.2,\n    light: 1.375,\n    moderate: 1.55,\n    active: 1.725,\n    very_active: 1.9\n  };\n  \n  return Math.round(bmr * activityMultipliers[exerciseLevel]);\n};\n\nexport const calculateWaistToHipRatio = (waist: number, hips: number): number => {\n  return waist / hips;\n};\n\nexport const getWaistToHipRiskLevel = (ratio: number, gender: string): string => {\n  if (gender === 'male') {\n    if (ratio < 0.9) return 'Low';\n    if (ratio < 1.0) return 'Moderate';\n    return 'High';\n  } else {\n    if (ratio < 0.8) return 'Low';\n    if (ratio < 0.85) return 'Moderate';\n    return 'High';\n  }\n};\n\nexport const estimateBodyFat = (bmi: number, age: number, gender: string): number => {\n  // Deurenberg formula (rough estimation)\n  let bodyFat: number;\n  if (gender === 'male') {\n    bodyFat = 1.20 * bmi + 0.23 * age - 16.2;\n  } else {\n    bodyFat = 1.20 * bmi + 0.23 * age - 5.4;\n  }\n  \n  return Math.max(0, Math.round(bodyFat));\n};\n\nexport const calculateWeightLossCalories = (currentWeight: number, targetWeight: number, weeksToGoal: number): number => {\n  const weightDifference = currentWeight - targetWeight;\n  const caloriesPerKg = 7700; // Approximate calories per kg of body weight\n  const totalCaloriesNeeded = weightDifference * caloriesPerKg;\n  const dailyCalorieDeficit = totalCaloriesNeeded / (weeksToGoal * 7);\n  \n  return Math.round(dailyCalorieDeficit);\n};\n\nexport const getProgressPercentage = (current: number, start: number, target: number): number => {\n  if (start === target) return 100;\n  \n  const totalProgress = Math.abs(target - start);\n  const currentProgress = Math.abs(current - start);\n  \n  return Math.min(100, Math.round((currentProgress / totalProgress) * 100));\n};\n\nexport const formatNumber = (num: number, decimals: number = 1): string => {\n  return num.toFixed(decimals);\n};\n\nexport const formatDate = (date: string): string => {\n  const d = new Date(date);\n  return d.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};\n\nexport const getWeeklyAverage = (data: Array<{ date: string; value: number }>, weeks: number = 4): number => {\n  const cutoffDate = new Date();\n  cutoffDate.setDate(cutoffDate.getDate() - (weeks * 7));\n  \n  const recentData = data.filter(item => new Date(item.date) >= cutoffDate);\n  \n  if (recentData.length === 0) return 0;\n  \n  const sum = recentData.reduce((acc, item) => acc + item.value, 0);\n  return sum / recentData.length;\n};\n\nexport const getMonthlyAverage = (data: Array<{ date: string; value: number }>, months: number = 3): number => {\n  const cutoffDate = new Date();\n  cutoffDate.setMonth(cutoffDate.getMonth() - months);\n  \n  const recentData = data.filter(item => new Date(item.date) >= cutoffDate);\n  \n  if (recentData.length === 0) return 0;\n  \n  const sum = recentData.reduce((acc, item) => acc + item.value, 0);\n  return sum / recentData.length;\n};\n","size_bytes":4126},"client/src/utils/csvExport.ts":{"content":"// CSV Export utilities for NaijaReset app data\nimport { UserData } from '../types';\nimport { \n  WaterIntakeData, \n  DailyCaloriesData, \n  BodyCompositionData,\n  loadWaterIntake,\n  loadDailyCalories,\n  loadBodyComposition\n} from './progressCalculations';\n\nexport const exportAllDataAsCSV = (userData: UserData): void => {\n  try {\n    // Load progression data from localStorage\n    const waterData = loadWaterIntake();\n    const caloriesData = loadDailyCalories();\n    const bodyData = loadBodyComposition();\n\n    // Prepare CSV content\n    let csvContent = '';\n    \n    // Add header\n    csvContent += 'NaijaReset - Complete Health Data Export\\n';\n    csvContent += `Export Date: ${new Date().toLocaleDateString()}\\n\\n`;\n\n    // User Profile Section\n    csvContent += 'USER PROFILE\\n';\n    csvContent += 'Field,Value\\n';\n    csvContent += `Name,\"${userData.userProfile.name}\"\\n`;\n    csvContent += `Age,${userData.userProfile.age}\\n`;\n    csvContent += `Height (cm),${userData.userProfile.height}\\n`;\n    csvContent += `Weight (kg),${userData.userProfile.weight}\\n`;\n    csvContent += `Target Weight (kg),${userData.userProfile.targetWeight}\\n`;\n    csvContent += `Gender,\"${userData.userProfile.gender}\"\\n`;\n    csvContent += `Exercise Level,\"${userData.userProfile.exerciseLevel}\"\\n`;\n    csvContent += `Diet Preferences,\"${userData.userProfile.diet.join(', ')}\"\\n`;\n    csvContent += `Language,\"${userData.userProfile.language}\"\\n\\n`;\n\n    // Weight Tracking Section\n    csvContent += 'WEIGHT TRACKING\\n';\n    csvContent += 'Date,Weight (kg)\\n';\n    userData.weights.forEach(weight => {\n      csvContent += `${weight.date},${weight.weight}\\n`;\n    });\n    csvContent += '\\n';\n\n    // Mood Tracking Section\n    csvContent += 'MOOD TRACKING\\n';\n    csvContent += 'Date,Mood\\n';\n    userData.moods.forEach(mood => {\n      csvContent += `${mood.date},\"${mood.mood}\"\\n`;\n    });\n    csvContent += '\\n';\n\n    // Water Intake Section\n    csvContent += 'WATER INTAKE TRACKING\\n';\n    csvContent += 'Date,Liters\\n';\n    userData.waterLog.forEach(water => {\n      csvContent += `${water.date},${water.liters}\\n`;\n    });\n    csvContent += '\\n';\n\n    // Calories Tracking Section\n    csvContent += 'CALORIES TRACKING\\n';\n    csvContent += 'Date,Calories\\n';\n    userData.caloriesLog.forEach(calories => {\n      csvContent += `${calories.date},${calories.calories}\\n`;\n    });\n    csvContent += '\\n';\n\n    // Progressive Health Data Section\n    if (waterData) {\n      csvContent += 'WATER INTAKE CALCULATOR\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Weight (kg),${waterData.weight}\\n`;\n      csvContent += `Activity Level,\"${waterData.activity}\"\\n`;\n      csvContent += `Goal,\"${waterData.goal}\"\\n`;\n      csvContent += `Recommended Daily (ml),${waterData.recommendedMl}\\n`;\n      csvContent += `Logged Today (ml),${waterData.loggedMlToday}\\n`;\n      csvContent += `Last Updated,\"${waterData.lastUpdated}\"\\n\\n`;\n    }\n\n    if (caloriesData) {\n      csvContent += 'DAILY CALORIES & BMI DATA\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Weight (kg),${caloriesData.weight}\\n`;\n      csvContent += `Height (cm),${caloriesData.height}\\n`;\n      csvContent += `Age,${caloriesData.age}\\n`;\n      csvContent += `Sex,\"${caloriesData.sex}\"\\n`;\n      csvContent += `Activity Level,\"${caloriesData.activity}\"\\n`;\n      csvContent += `Goal,\"${caloriesData.goal}\"\\n`;\n      csvContent += `BMI,${caloriesData.BMI}\\n`;\n      csvContent += `Recommended Calories,${caloriesData.recommendedCalories}\\n`;\n      csvContent += `Last Updated,\"${caloriesData.lastUpdated}\"\\n\\n`;\n    }\n\n    if (bodyData) {\n      csvContent += 'BODY COMPOSITION DATA\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Waist (cm),${bodyData.waist}\\n`;\n      csvContent += `Hip (cm),${bodyData.hip}\\n`;\n      csvContent += `Neck (cm),${bodyData.neck}\\n`;\n      csvContent += `Height (cm),${bodyData.height}\\n`;\n      csvContent += `Sex,\"${bodyData.sex}\"\\n`;\n      csvContent += `Waist-to-Hip Ratio,${bodyData.waistToHipRatio}\\n`;\n      csvContent += `Body Fat Percentage,${bodyData.bodyFatPercentage}%\\n`;\n      csvContent += `Last Updated,\"${bodyData.lastUpdated}\"\\n\\n`;\n    }\n\n    // Measurements Section\n    csvContent += 'BODY MEASUREMENTS\\n';\n    csvContent += 'Date,Waist (cm),Hips (cm),Chest (cm),Arms (cm),Thighs (cm)\\n';\n    userData.measurements.forEach(measurement => {\n      csvContent += `${measurement.date},${measurement.waist || ''},${measurement.hips || ''},${measurement.chest || ''},${measurement.arms || ''},${measurement.thighs || ''}\\n`;\n    });\n    csvContent += '\\n';\n\n    // Badges Section\n    csvContent += 'BADGES & ACHIEVEMENTS\\n';\n    csvContent += 'Badge Name,Description,Unlocked,Date Unlocked\\n';\n    userData.badges.forEach(badge => {\n      csvContent += `\"${badge.name}\",\"${badge.description}\",${badge.isUnlocked ? 'Yes' : 'No'},\"${badge.unlockedAt || ''}\"\\n`;\n    });\n    csvContent += '\\n';\n\n    // Challenges Section\n    csvContent += 'CHALLENGES\\n';\n    csvContent += 'Challenge Name,Description,Days,Current Day,Completed Days,Status,Start Date\\n';\n    Object.values(userData.challenges).forEach(challenge => {\n      csvContent += `\"${challenge.name}\",\"${challenge.description}\",${challenge.days},${challenge.currentDay},\"${challenge.completedDays.join(', ')}\",${challenge.isActive ? 'Active' : 'Inactive'},\"${challenge.startDate || ''}\"\\n`;\n    });\n    csvContent += '\\n';\n\n    // Exercise History Section\n    csvContent += 'EXERCISE HISTORY\\n';\n    csvContent += 'Exercise ID,Date,Duration (minutes),Completed\\n';\n    userData.exerciseHistory.forEach(exercise => {\n      csvContent += `\"${exercise.exerciseId}\",\"${exercise.date}\",${exercise.duration},${exercise.completed ? 'Yes' : 'No'}\\n`;\n    });\n    csvContent += '\\n';\n\n    // Meal History Section\n    csvContent += 'MEAL HISTORY\\n';\n    csvContent += 'Meal ID,Date,Meal Type\\n';\n    userData.mealHistory.forEach(meal => {\n      csvContent += `\"${meal.mealId}\",\"${meal.date}\",\"${meal.mealType}\"\\n`;\n    });\n    csvContent += '\\n';\n\n    // Favorites Section\n    csvContent += 'FAVORITES\\n';\n    csvContent += 'Type,Item IDs\\n';\n    csvContent += `Exercises,\"${userData.favorites.exercises.join(', ')}\"\\n`;\n    csvContent += `Meals,\"${userData.favorites.meals.join(', ')}\"\\n`;\n    csvContent += `Quotes,\"${userData.favorites.quotes.join(', ')}\"\\n\\n`;\n\n    // Create and download the CSV file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `naija-reset-data-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    console.log('CSV export completed successfully');\n  } catch (error) {\n    console.error('Error exporting CSV:', error);\n    alert('Error exporting data. Please try again.');\n  }\n};\n\nexport const exportProgressDataOnlyAsCSV = (): void => {\n  try {\n    const waterData = loadWaterIntake();\n    const caloriesData = loadDailyCalories();\n    const bodyData = loadBodyComposition();\n\n    let csvContent = '';\n    \n    // Add header\n    csvContent += 'NaijaReset - Progress Data Export\\n';\n    csvContent += `Export Date: ${new Date().toLocaleDateString()}\\n\\n`;\n\n    if (waterData) {\n      csvContent += 'WATER INTAKE CALCULATOR\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Weight (kg),${waterData.weight}\\n`;\n      csvContent += `Activity Level,\"${waterData.activity}\"\\n`;\n      csvContent += `Goal,\"${waterData.goal}\"\\n`;\n      csvContent += `Recommended Daily (ml),${waterData.recommendedMl}\\n`;\n      csvContent += `Logged Today (ml),${waterData.loggedMlToday}\\n`;\n      csvContent += `Last Updated,\"${waterData.lastUpdated}\"\\n\\n`;\n    }\n\n    if (caloriesData) {\n      csvContent += 'DAILY CALORIES & BMI DATA\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Weight (kg),${caloriesData.weight}\\n`;\n      csvContent += `Height (cm),${caloriesData.height}\\n`;\n      csvContent += `Age,${caloriesData.age}\\n`;\n      csvContent += `Sex,\"${caloriesData.sex}\"\\n`;\n      csvContent += `Activity Level,\"${caloriesData.activity}\"\\n`;\n      csvContent += `Goal,\"${caloriesData.goal}\"\\n`;\n      csvContent += `BMI,${caloriesData.BMI}\\n`;\n      csvContent += `Recommended Calories,${caloriesData.recommendedCalories}\\n`;\n      csvContent += `Last Updated,\"${caloriesData.lastUpdated}\"\\n\\n`;\n    }\n\n    if (bodyData) {\n      csvContent += 'BODY COMPOSITION DATA\\n';\n      csvContent += 'Metric,Value\\n';\n      csvContent += `Waist (cm),${bodyData.waist}\\n`;\n      csvContent += `Hip (cm),${bodyData.hip}\\n`;\n      csvContent += `Neck (cm),${bodyData.neck}\\n`;\n      csvContent += `Height (cm),${bodyData.height}\\n`;\n      csvContent += `Sex,\"${bodyData.sex}\"\\n`;\n      csvContent += `Waist-to-Hip Ratio,${bodyData.waistToHipRatio}\\n`;\n      csvContent += `Body Fat Percentage,${bodyData.bodyFatPercentage}%\\n`;\n      csvContent += `Last Updated,\"${bodyData.lastUpdated}\"\\n\\n`;\n    }\n\n    // Create and download the CSV file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', `naija-reset-progress-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    URL.revokeObjectURL(url);\n\n    console.log('Progress CSV export completed successfully');\n  } catch (error) {\n    console.error('Error exporting progress CSV:', error);\n    alert('Error exporting progress data. Please try again.');\n  }\n};","size_bytes":9874},"client/src/utils/planManager.ts":{"content":"// Simplified plan manager - no plan restrictions\nexport interface PlanData {\n  planId: number;\n  startDate: string;\n  expirationDate: string;\n  isActive: boolean;\n}\n\nexport interface Plan {\n  id: number;\n  name: string;\n  duration: number;\n  password: string;\n  features: string[];\n}\n\n// Empty plans array - no plans needed anymore\nexport const PLANS: Plan[] = [];\n\n// Always return true - no restrictions\nexport const hasAccessToContent = (content: any): boolean => {\n  return true;\n};\n\n// Always return false - no access expiration\nexport const isAccessExpired = (): boolean => {\n  return false;\n};\n\n// Return null - no current plan needed\nexport const getCurrentPlan = (): Plan | null => {\n  return null;\n};\n\n// Return -1 - unlimited access\nexport const getRemainingDays = (): number => {\n  return -1;\n};\n\n// Simplified save/load functions (kept for compatibility but not used)\nexport const savePlanData = (planData: PlanData): void => {\n  // No-op - no plan data needed\n};\n\nexport const loadPlanData = (): PlanData | null => {\n  return null;\n};\n\nexport const activatePlan = (planId: number, password: string): boolean => {\n  return true; // Always successful but does nothing\n};\n\nexport const deactivatePlan = (): void => {\n  // No-op - no plan to deactivate\n};","size_bytes":1266},"client/src/utils/progressCalculations.ts":{"content":"// Health calculation utilities for progress tracking\n\nexport interface WaterIntakeData {\n  weight: number;\n  activity: 'sedentary' | 'moderate' | 'active';\n  goal: 'lose' | 'gain' | 'maintain';\n  recommendedMl: number;\n  loggedMlToday: number;\n  lastUpdated: string;\n}\n\nexport interface DailyCaloriesData {\n  weight: number;\n  height: number;\n  age: number;\n  sex: 'male' | 'female';\n  activity: 'sedentary' | 'light' | 'moderate' | 'active' | 'very_active';\n  goal: 'lose' | 'gain' | 'maintain';\n  BMI: number;\n  recommendedCalories: number;\n  lastUpdated: string;\n}\n\nexport interface BodyCompositionData {\n  waist: number;\n  hip: number;\n  neck: number;\n  height: number;\n  sex: 'male' | 'female';\n  waistToHipRatio: number;\n  bodyFatPercentage: number;\n  lastUpdated: string;\n}\n\n// Water intake calculations\nexport const calculateWaterIntake = (weight: number, activity: string, goal: string): number => {\n  let baseWater = 35 * weight; // Base: 35ml × weight (kg)\n  \n  if (activity === 'moderate') baseWater += 500;\n  if (activity === 'active') baseWater += 1000;\n  if (goal === 'lose') baseWater += 500;\n  \n  return Math.round(baseWater);\n};\n\nexport const getWaterIntakeMessage = (logged: number, recommended: number): string => {\n  const percentage = Math.round((logged / recommended) * 100);\n  \n  if (percentage >= 100) return `🎉 Excellent! You've reached ${percentage}% of your daily water goal!`;\n  if (percentage >= 75) return `💧 Great job! You've reached ${percentage}% of your daily goal.`;\n  if (percentage >= 50) return `👍 Good progress! You've reached ${percentage}% of your daily goal.`;\n  if (percentage >= 25) return `💪 Keep going! You've reached ${percentage}% of your daily goal.`;\n  return `🚰 Let's hydrate! You've reached ${percentage}% of your daily goal.`;\n};\n\n// BMI and calorie calculations\nexport const calculateBMI = (weight: number, height: number): number => {\n  return Number((weight / Math.pow(height / 100, 2)).toFixed(2));\n};\n\nexport const getBMICategory = (bmi: number): string => {\n  if (bmi < 18.5) return 'Underweight';\n  if (bmi < 25) return 'Normal weight';\n  if (bmi < 30) return 'Overweight';\n  return 'Obese';\n};\n\nexport const getBMIMessage = (bmi: number): string => {\n  const category = getBMICategory(bmi);\n  switch (category) {\n    case 'Underweight': return '⚠️ Your BMI suggests you may be underweight. Consider consulting a healthcare provider.';\n    case 'Normal weight': return '✅ Your BMI is within the healthy range. Keep up the good work!';\n    case 'Overweight': return '⚡ Your BMI suggests you may benefit from a healthy weight loss plan.';\n    case 'Obese': return '🏥 Your BMI suggests consulting a healthcare provider for a personalized plan.';\n    default: return '';\n  }\n};\n\nexport const calculateBMR = (weight: number, height: number, age: number, sex: string): number => {\n  // Mifflin-St Jeor formula\n  if (sex === 'male') {\n    return 10 * weight + 6.25 * height - 5 * age + 5;\n  } else {\n    return 10 * weight + 6.25 * height - 5 * age - 161;\n  }\n};\n\nexport const calculateDailyCalories = (\n  weight: number, \n  height: number, \n  age: number, \n  sex: string, \n  activity: string, \n  goal: string\n): number => {\n  const bmr = calculateBMR(weight, height, age, sex);\n  \n  // Activity multipliers\n  const activityMultipliers = {\n    sedentary: 1.2,\n    light: 1.375,\n    moderate: 1.55,\n    active: 1.725,\n    very_active: 1.9\n  };\n  \n  const maintenanceCalories = bmr * (activityMultipliers[activity as keyof typeof activityMultipliers] || 1.2);\n  \n  // Goal adjustments\n  switch (goal) {\n    case 'lose': return Math.round(maintenanceCalories - 500); // 1 lb per week loss\n    case 'gain': return Math.round(maintenanceCalories + 500); // 1 lb per week gain\n    case 'maintain': return Math.round(maintenanceCalories);\n    default: return Math.round(maintenanceCalories);\n  }\n};\n\nexport const getCalorieMessage = (calories: number, goal: string): string => {\n  switch (goal) {\n    case 'lose': return `🔥 To lose weight steadily, aim for ${calories} calories per day.`;\n    case 'gain': return `💪 To gain weight healthily, aim for ${calories} calories per day.`;\n    case 'maintain': return `⚖️ To maintain your current weight, aim for ${calories} calories per day.`;\n    default: return `🎯 Your daily calorie target is ${calories} calories.`;\n  }\n};\n\n// Body composition calculations\nexport const calculateWaistToHipRatio = (waist: number, hip: number): number => {\n  return Number((waist / hip).toFixed(3));\n};\n\nexport const getWaistToHipRiskLevel = (ratio: number, sex: string): string => {\n  if (sex === 'male') {\n    if (ratio < 0.95) return 'Low risk';\n    if (ratio <= 1.0) return 'Moderate risk';\n    return 'High risk';\n  } else {\n    if (ratio < 0.80) return 'Low risk';\n    if (ratio <= 0.85) return 'Moderate risk';\n    return 'High risk';\n  }\n};\n\nexport const getWaistToHipMessage = (ratio: number, sex: string): string => {\n  const risk = getWaistToHipRiskLevel(ratio, sex);\n  switch (risk) {\n    case 'Low risk': return '✅ Your waist-to-hip ratio suggests a low health risk.';\n    case 'Moderate risk': return '⚠️ Your waist-to-hip ratio suggests moderate health risk.';\n    case 'High risk': return '🚨 Your waist-to-hip ratio suggests higher health risk. Consider consulting a healthcare provider.';\n    default: return '';\n  }\n};\n\nexport const calculateBodyFat = (\n  waist: number, \n  hip: number, \n  neck: number, \n  height: number, \n  sex: string\n): number => {\n  // US Navy method\n  if (sex === 'male') {\n    const bodyFat = 495 / (1.0324 - 0.19077 * Math.log10(waist - neck) + 0.15456 * Math.log10(height)) - 450;\n    return Number(Math.max(0, Math.min(50, bodyFat)).toFixed(1));\n  } else {\n    const bodyFat = 495 / (1.29579 - 0.35004 * Math.log10(waist + hip - neck) + 0.221 * Math.log10(height)) - 450;\n    return Number(Math.max(0, Math.min(50, bodyFat)).toFixed(1));\n  }\n};\n\nexport const getBodyFatMessage = (bodyFat: number, sex: string): string => {\n  if (sex === 'male') {\n    if (bodyFat < 6) return '⚠️ Very low body fat. This may not be healthy.';\n    if (bodyFat < 14) return '🏃 Athletic body fat range. Excellent fitness level!';\n    if (bodyFat < 18) return '💪 Good body fat range. You\\'re in great shape!';\n    if (bodyFat < 25) return '👍 Average body fat range. Room for improvement.';\n    return '🎯 Higher body fat range. Consider a fitness plan.';\n  } else {\n    if (bodyFat < 16) return '⚠️ Very low body fat. This may not be healthy.';\n    if (bodyFat < 20) return '🏃 Athletic body fat range. Excellent fitness level!';\n    if (bodyFat < 25) return '💪 Good body fat range. You\\'re in great shape!';\n    if (bodyFat < 32) return '👍 Average body fat range. Room for improvement.';\n    return '🎯 Higher body fat range. Consider a fitness plan.';\n  }\n};\n\n// localStorage utilities\nexport const saveWaterIntake = (data: WaterIntakeData): void => {\n  localStorage.setItem('waterIntake', JSON.stringify(data));\n};\n\nexport const loadWaterIntake = (): WaterIntakeData | null => {\n  const data = localStorage.getItem('waterIntake');\n  return data ? JSON.parse(data) : null;\n};\n\nexport const saveDailyCalories = (data: DailyCaloriesData): void => {\n  localStorage.setItem('dailyCalories', JSON.stringify(data));\n};\n\nexport const loadDailyCalories = (): DailyCaloriesData | null => {\n  const data = localStorage.getItem('dailyCalories');\n  return data ? JSON.parse(data) : null;\n};\n\nexport const saveBodyComposition = (data: BodyCompositionData): void => {\n  localStorage.setItem('bodyComposition', JSON.stringify(data));\n};\n\nexport const loadBodyComposition = (): BodyCompositionData | null => {\n  const data = localStorage.getItem('bodyComposition');\n  return data ? JSON.parse(data) : null;\n};\n\nexport const resetProgressData = (): void => {\n  localStorage.removeItem('waterIntake');\n  localStorage.removeItem('dailyCalories');\n  localStorage.removeItem('bodyComposition');\n};\n\nexport const isNewDay = (lastUpdated: string): boolean => {\n  const today = new Date().toISOString().split('T')[0];\n  return lastUpdated !== today;\n};\n\nexport const getTodayDate = (): string => {\n  return new Date().toISOString().split('T')[0];\n};","size_bytes":8205},"client/src/utils/storage.ts":{"content":"import { UserData } from \"../types\";\n\nconst USER_DATA_KEY = \"user_data\";\n\nexport const defaultUserData: UserData = {\n  userProfile: {\n    name: \"\",\n    age: 0,\n    height: 0,\n    weight: 0,\n    targetWeight: 0,\n    gender: \"other\",\n    exerciseLevel: \"sedentary\",\n    diet: [],\n    language: \"en-US\",\n  },\n  favorites: {\n    exercises: [],\n    meals: [],\n    quotes: [],\n  },\n  weights: [],\n  moods: [],\n  waterLog: [],\n  caloriesLog: [],\n  badges: [],\n  challenges: {},\n};\n\n/**\n * Carrega os dados do usuário do localStorage ou retorna o default.\n */\nexport function loadUserData(): UserData {\n  try {\n    // Try to load from the current key first\n    let data = localStorage.getItem(USER_DATA_KEY);\n    if (data) {\n      return JSON.parse(data) as UserData;\n    }\n    \n    // Migration: Try to load from legacy \"userData\" key and migrate\n    data = localStorage.getItem(\"userData\");\n    if (data) {\n      const userData = JSON.parse(data) as UserData;\n      // Migrate to new key\n      saveUserData(userData);\n      // Remove old key\n      localStorage.removeItem(\"userData\");\n      return userData;\n    }\n  } catch (err) {\n    console.error(\"Error loading user data:\", err);\n  }\n  return defaultUserData;\n}\n\n/**\n * Salva os dados do usuário no localStorage.\n */\nexport function saveUserData(data: UserData): void {\n  try {\n    localStorage.setItem(USER_DATA_KEY, JSON.stringify(data));\n  } catch (err) {\n    console.error(\"Error saving user data:\", err);\n  }\n}\n\n/**\n * Limpa os dados do usuário do localStorage e retorna o estado padrão.\n */\nexport function clearUserData(): UserData {\n  try {\n    localStorage.removeItem(USER_DATA_KEY);\n  } catch (err) {\n    console.error(\"Error clearing user data:\", err);\n  }\n  return defaultUserData;\n}\n\n/**\n * Verifica e desbloqueia badges dependendo de certas condições nos dados do usuário.\n */\nexport function checkAndUnlockBadges(\n  userData: UserData,\n  dispatch: React.Dispatch<any>,\n): void {\n  const unlockedBadges = new Set((userData?.badges ?? []).map((b) => b.id));\n\n  const now = new Date().toISOString();\n\n  const maybeUnlock = (id: string, name: string, description: string) => {\n    if (!unlockedBadges.has(id)) {\n      dispatch({\n        type: \"UNLOCK_BADGE\",\n        payload: id,\n      });\n\n      console.log(`Badge unlocked: ${name}`);\n    }\n  };\n\n  // Exemplo: badge por completar todos os dias de um desafio\n  Object.values(userData?.challenges ?? {}).forEach((challenge) => {\n    if (\n      challenge.isActive &&\n      challenge.completedDays.length === challenge.days &&\n      !unlockedBadges.has(`challenge-${challenge.id}`)\n    ) {\n      maybeUnlock(\n        `challenge-${challenge.id}`,\n        `${challenge.name} Master`,\n        `Completed all ${challenge.days} days of ${challenge.name}`,\n      );\n    }\n  });\n\n  // Exemplo: badge por beber 2 litros de água em um dia\n  const today = new Date().toISOString().split(\"T\")[0];\n\n  const todayWater = (userData?.waterLog ?? []).find((w) => w.date === today);\n\n  if (\n    todayWater &&\n    todayWater.liters >= 2 &&\n    !unlockedBadges.has(\"hydration-hero\")\n  ) {\n    maybeUnlock(\n      \"hydration-hero\",\n      \"Hydration Hero\",\n      \"Drank at least 2 liters of water in one day\",\n    );\n  }\n\n  // Outros badges podem ser adicionados aqui seguindo o mesmo padrão\n}\n\n/**\n * Calcula a streak (sequência) atual de dias consecutivos a partir de uma lista de datas ISO (YYYY-MM-DD).\n * Exemplo de uso: getCurrentStreak(challenge.completedDays)\n */\nexport function getCurrentStreak(dates: string[]): number {\n  if (!dates || dates.length === 0) return 0;\n\n  // Ordena as datas do mais recente para o mais antigo\n  const sorted = dates\n    .map((date) => date.split(\"T\")[0]) // garante só YYYY-MM-DD\n    .map((date) => new Date(date))\n    .sort((a, b) => b.getTime() - a.getTime());\n\n  let streak = 1;\n\n  for (let i = 1; i < sorted.length; i++) {\n    const diffDays = Math.floor(\n      (sorted[i - 1].getTime() - sorted[i].getTime()) / (1000 * 60 * 60 * 24),\n    );\n\n    if (diffDays === 1) {\n      streak++;\n    } else if (diffDays > 1) {\n      break;\n    }\n  }\n\n  return streak;\n}\n\n// Removed getUserData and clearUserDataStorage as they used inconsistent storage keys.\n// Use loadUserData and clearUserData instead for consistent key usage.\n\nexport const getCurrentStreakValue = (): number => {\n  const userData = loadUserData();\n  return userData.streaks?.current || 0;\n};\n","size_bytes":4396},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}